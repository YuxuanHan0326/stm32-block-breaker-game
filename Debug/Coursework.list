
Coursework.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080080b0  080080b0  000180b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008228  08008228  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008230  08008230  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08008238  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200000e8  08008320  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08008320  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127d1  00000000  00000000  0002015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ed  00000000  00000000  0003292c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00035020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd8  00000000  00000000  00036198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185ab  00000000  00000000  00036f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156da  00000000  00000000  0004f51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cc9e  00000000  00000000  00064bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054a4  00000000  00000000  00101894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00106d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008098 	.word	0x08008098

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	08008098 	.word	0x08008098

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b970 	b.w	8000e90 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0xe2>
 8000bde:	fab2 f382 	clz	r3, r2
 8000be2:	b143      	cbz	r3, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be8:	f1c3 0220 	rsb	r2, r3, #32
 8000bec:	409f      	lsls	r7, r3
 8000bee:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf2:	4317      	orrs	r7, r2
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfa:	fa1f f58c 	uxth.w	r5, ip
 8000bfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c02:	0c22      	lsrs	r2, r4, #16
 8000c04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c0c:	fb01 f005 	mul.w	r0, r1, r5
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c1c:	f080 811c 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f240 8119 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4462      	add	r2, ip
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3a:	fb00 f505 	mul.w	r5, r0, r5
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x90>
 8000c42:	eb1c 0404 	adds.w	r4, ip, r4
 8000c46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4a:	f080 8107 	bcs.w	8000e5c <__udivmoddi4+0x294>
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	f240 8104 	bls.w	8000e5c <__udivmoddi4+0x294>
 8000c54:	4464      	add	r4, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11e      	cbz	r6, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40dc      	lsrs	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0xbc>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ed 	beq.w	8000e52 <__udivmoddi4+0x28a>
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	fab3 f183 	clz	r1, r3
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d149      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	d302      	bcc.n	8000c96 <__udivmoddi4+0xce>
 8000c90:	4282      	cmp	r2, r0
 8000c92:	f200 80f8 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000c96:	1a84      	subs	r4, r0, r2
 8000c98:	eb65 0203 	sbc.w	r2, r5, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d0e2      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca8:	e7df      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000caa:	b902      	cbnz	r2, 8000cae <__udivmoddi4+0xe6>
 8000cac:	deff      	udf	#255	; 0xff
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ccc:	0c22      	lsrs	r2, r4, #16
 8000cce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd2:	fb0e f005 	mul.w	r0, lr, r5
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cda:	eb1c 0202 	adds.w	r2, ip, r2
 8000cde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000cea:	4645      	mov	r5, r8
 8000cec:	1a12      	subs	r2, r2, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2c2>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d1e:	e79f      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d20:	f1c1 0720 	rsb	r7, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	40fd      	lsrs	r5, r7
 8000d38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4a:	0c1c      	lsrs	r4, r3, #16
 8000d4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d50:	fb08 f50e 	mul.w	r5, r8, lr
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	42a5      	cmp	r5, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	b29d      	uxth	r5, r3
 8000d7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d80:	fb09 4413 	mls	r4, r9, r3, r4
 8000d84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da6:	fba3 9502 	umull	r9, r5, r3, r2
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	42ac      	cmp	r4, r5
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46ae      	mov	lr, r5
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x29c>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x298>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x208>
 8000dba:	ebb0 0208 	subs.w	r2, r0, r8
 8000dbe:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40ca      	lsrs	r2, r1
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	f1c3 0120 	rsb	r1, r3, #32
 8000ddc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de0:	fa20 f201 	lsr.w	r2, r0, r1
 8000de4:	fa25 f101 	lsr.w	r1, r5, r1
 8000de8:	409d      	lsls	r5, r3
 8000dea:	432a      	orrs	r2, r5
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dfc:	0c11      	lsrs	r1, r2, #16
 8000dfe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e02:	fb00 f50e 	mul.w	r5, r0, lr
 8000e06:	428d      	cmp	r5, r1
 8000e08:	fa04 f403 	lsl.w	r4, r4, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x258>
 8000e0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	428d      	cmp	r5, r1
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1b49      	subs	r1, r1, r5
 8000e22:	b292      	uxth	r2, r2
 8000e24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e28:	fb07 1115 	mls	r1, r7, r5, r1
 8000e2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e30:	fb05 f10e 	mul.w	r1, r5, lr
 8000e34:	4291      	cmp	r1, r2
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x282>
 8000e38:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e46:	3d02      	subs	r5, #2
 8000e48:	4462      	add	r2, ip
 8000e4a:	1a52      	subs	r2, r2, r1
 8000e4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0xfc>
 8000e52:	4631      	mov	r1, r6
 8000e54:	4630      	mov	r0, r6
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000e58:	4639      	mov	r1, r7
 8000e5a:	e6e6      	b.n	8000c2a <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e6fb      	b.n	8000c58 <__udivmoddi4+0x90>
 8000e60:	4548      	cmp	r0, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e70:	4645      	mov	r5, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e74:	462b      	mov	r3, r5
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x258>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3d02      	subs	r5, #2
 8000e82:	4462      	add	r2, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x124>
 8000e86:	4608      	mov	r0, r1
 8000e88:	e70a      	b.n	8000ca0 <__udivmoddi4+0xd8>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x14e>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <HAL_ADC_ConvCpltCallback>:
int8_t fail_flag = 0;
uint8_t breath_request = 0;

uint8_t convCompleted = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<hadc1.Init.NbrOfConversion; i++){
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e00e      	b.n	8000ec0 <HAL_ADC_ConvCpltCallback+0x2c>
		VRX = (uint16_t) rawValues[0];
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000ea4:	881a      	ldrh	r2, [r3, #0]
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_ADC_ConvCpltCallback+0x48>)
 8000ea8:	801a      	strh	r2, [r3, #0]
		VRY = (uint16_t) rawValues[1];
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000eac:	885a      	ldrh	r2, [r3, #2]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000eb0:	801a      	strh	r2, [r3, #0]
		RNG = (uint16_t) rawValues[2];
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000eb4:	889a      	ldrh	r2, [r3, #4]
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0x50>)
 8000eb8:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0; i<hadc1.Init.NbrOfConversion; i++){
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0x54>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d3eb      	bcc.n	8000ea2 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	2000030e 	.word	0x2000030e
 8000ee0:	20000310 	.word	0x20000310
 8000ee4:	20000312 	.word	0x20000312
 8000ee8:	20000104 	.word	0x20000104

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f001 fddc 	bl	8002aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f860 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 fa4e 	bl	8001398 <MX_GPIO_Init>
  MX_DMA_Init();
 8000efc:	f000 fa2c 	bl	8001358 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f00:	f000 fa00 	bl	8001304 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f04:	f000 f9b0 	bl	8001268 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f08:	f000 f8c2 	bl	8001090 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f0c:	f000 f930 	bl	8001170 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000f10:	f000 f95c 	bl	80011cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f14:	481f      	ldr	r0, [pc, #124]	; (8000f94 <main+0xa8>)
 8000f16:	f004 fceb 	bl	80058f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f1a:	481f      	ldr	r0, [pc, #124]	; (8000f98 <main+0xac>)
 8000f1c:	f004 fce8 	bl	80058f0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 3);
 8000f20:	2203      	movs	r2, #3
 8000f22:	491e      	ldr	r1, [pc, #120]	; (8000f9c <main+0xb0>)
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <main+0xb4>)
 8000f26:	f001 ffab 	bl	8002e80 <HAL_ADC_Start_DMA>


  ISSI_init(&hi2c1);
 8000f2a:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <main+0xb8>)
 8000f2c:	f001 fa48 	bl	80023c0 <ISSI_init>

  initialise_game();
 8000f30:	f000 fb68 	bl	8001604 <initialise_game>
  render_frame();
 8000f34:	f000 fc24 	bl	8001780 <render_frame>
  ISSI_send_buffer(&hi2c1, frameBuffer);
 8000f38:	491b      	ldr	r1, [pc, #108]	; (8000fa8 <main+0xbc>)
 8000f3a:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <main+0xb8>)
 8000f3c:	f001 fac4 	bl	80024c8 <ISSI_send_buffer>
  ISSI_send_buffer_PWM(&hi2c1, PWMBuffer);
 8000f40:	491a      	ldr	r1, [pc, #104]	; (8000fac <main+0xc0>)
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <main+0xb8>)
 8000f44:	f001 fae6 	bl	8002514 <ISSI_send_buffer_PWM>
  ISSI_send_buffer_BLINK(&hi2c1, blinkBuffer);
 8000f48:	4919      	ldr	r1, [pc, #100]	; (8000fb0 <main+0xc4>)
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <main+0xb8>)
 8000f4c:	f001 fb0c 	bl	8002568 <ISSI_send_buffer_BLINK>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  render_frame();
 8000f50:	f000 fc16 	bl	8001780 <render_frame>
	  ISSI_send_buffer(&hi2c1, frameBuffer);
 8000f54:	4914      	ldr	r1, [pc, #80]	; (8000fa8 <main+0xbc>)
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <main+0xb8>)
 8000f58:	f001 fab6 	bl	80024c8 <ISSI_send_buffer>
	  ISSI_send_buffer_PWM(&hi2c1, PWMBuffer);
 8000f5c:	4913      	ldr	r1, [pc, #76]	; (8000fac <main+0xc0>)
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <main+0xb8>)
 8000f60:	f001 fad8 	bl	8002514 <ISSI_send_buffer_PWM>
	  ISSI_send_buffer_BLINK(&hi2c1, blinkBuffer);
 8000f64:	4912      	ldr	r1, [pc, #72]	; (8000fb0 <main+0xc4>)
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <main+0xb8>)
 8000f68:	f001 fafe 	bl	8002568 <ISSI_send_buffer_BLINK>

	  if (breath_request == 1){
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <main+0xc8>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d10a      	bne.n	8000f8a <main+0x9e>
		  ISSI_set_frame(&hi2c1, 0x01);
 8000f74:	2101      	movs	r1, #1
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <main+0xb8>)
 8000f78:	f001 fb1e 	bl	80025b8 <ISSI_set_frame>
		  ISSI_set_frame(&hi2c1, 0x00);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <main+0xb8>)
 8000f80:	f001 fb1a 	bl	80025b8 <ISSI_set_frame>
		  breath_request = 0;
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <main+0xc8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	  }


	  HAL_Delay(5);
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f001 fe00 	bl	8002b90 <HAL_Delay>
	  render_frame();
 8000f90:	e7de      	b.n	8000f50 <main+0x64>
 8000f92:	bf00      	nop
 8000f94:	20000200 	.word	0x20000200
 8000f98:	20000248 	.word	0x20000248
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000104 	.word	0x20000104
 8000fa4:	200001ac 	.word	0x200001ac
 8000fa8:	20000314 	.word	0x20000314
 8000fac:	20000010 	.word	0x20000010
 8000fb0:	20000320 	.word	0x20000320
 8000fb4:	200003b2 	.word	0x200003b2

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 fca8 	bl	800691c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <SystemClock_Config+0xd0>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	4a28      	ldr	r2, [pc, #160]	; (8001088 <SystemClock_Config+0xd0>)
 8000fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fea:	6413      	str	r3, [r2, #64]	; 0x40
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <SystemClock_Config+0xd0>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <SystemClock_Config+0xd4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <SystemClock_Config+0xd4>)
 8001006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SystemClock_Config+0xd4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800102c:	2310      	movs	r3, #16
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001030:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001034:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001036:	2304      	movs	r3, #4
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800103a:	2307      	movs	r3, #7
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	4618      	mov	r0, r3
 8001044:	f003 ff6c 	bl	8004f20 <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800104e:	f001 f97b 	bl	8002348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	2302      	movs	r3, #2
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f004 f9ce 	bl	8005410 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800107a:	f001 f965 	bl	8002348 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	; 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010a4:	4a30      	ldr	r2, [pc, #192]	; (8001168 <MX_ADC1_Init+0xd8>)
 80010a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010be:	2201      	movs	r2, #1
 80010c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010d2:	4a26      	ldr	r2, [pc, #152]	; (800116c <MX_ADC1_Init+0xdc>)
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010de:	2203      	movs	r2, #3
 80010e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f0:	481c      	ldr	r0, [pc, #112]	; (8001164 <MX_ADC1_Init+0xd4>)
 80010f2:	f001 fd71 	bl	8002bd8 <HAL_ADC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010fc:	f001 f924 	bl	8002348 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001100:	2306      	movs	r3, #6
 8001102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001108:	2307      	movs	r3, #7
 800110a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <MX_ADC1_Init+0xd4>)
 8001112:	f001 ffc3 	bl	800309c <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800111c:	f001 f914 	bl	8002348 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001120:	2307      	movs	r3, #7
 8001122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_ADC1_Init+0xd4>)
 800112e:	f001 ffb5 	bl	800309c <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001138:	f001 f906 	bl	8002348 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800113c:	2308      	movs	r3, #8
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001140:	2303      	movs	r3, #3
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_ADC1_Init+0xd4>)
 800114e:	f001 ffa5 	bl	800309c <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001158:	f001 f8f6 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000104 	.word	0x20000104
 8001168:	40012000 	.word	0x40012000
 800116c:	0f000001 	.word	0x0f000001

08001170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_I2C1_Init+0x50>)
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <MX_I2C1_Init+0x54>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_I2C1_Init+0x50>)
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x58>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_I2C1_Init+0x50>)
 800118e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_I2C1_Init+0x50>)
 80011ae:	f003 f889 	bl	80042c4 <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f001 f8c6 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001ac 	.word	0x200001ac
 80011c4:	40005400 	.word	0x40005400
 80011c8:	000186a0 	.word	0x000186a0

080011cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM2_Init+0x98>)
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_TIM2_Init+0x98>)
 80011f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM2_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 838;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_TIM2_Init+0x98>)
 8001200:	f240 3246 	movw	r2, #838	; 0x346
 8001204:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_TIM2_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_TIM2_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001212:	4814      	ldr	r0, [pc, #80]	; (8001264 <MX_TIM2_Init+0x98>)
 8001214:	f004 fb1c 	bl	8005850 <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800121e:	f001 f893 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001226:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_TIM2_Init+0x98>)
 8001230:	f004 fcb0 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800123a:	f001 f885 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_TIM2_Init+0x98>)
 800124c:	f004 feb8 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001256:	f001 f877 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000200 	.word	0x20000200

08001268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_TIM3_Init+0x94>)
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <MX_TIM3_Init+0x98>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM3_Init+0x94>)
 800128c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001290:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM3_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1846;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_TIM3_Init+0x94>)
 800129a:	f240 7236 	movw	r2, #1846	; 0x736
 800129e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_TIM3_Init+0x94>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_TIM3_Init+0x94>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012ac:	4813      	ldr	r0, [pc, #76]	; (80012fc <MX_TIM3_Init+0x94>)
 80012ae:	f004 facf 	bl	8005850 <HAL_TIM_Base_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012b8:	f001 f846 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM3_Init+0x94>)
 80012ca:	f004 fc63 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012d4:	f001 f838 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_TIM3_Init+0x94>)
 80012e6:	f004 fe6b 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012f0:	f001 f82a 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000248 	.word	0x20000248
 8001300:	40000400 	.word	0x40000400

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART2_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800133c:	f004 fec2 	bl	80060c4 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 ffff 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000290 	.word	0x20000290
 8001354:	40004400 	.word	0x40004400

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_DMA_Init+0x3c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <MX_DMA_Init+0x3c>)
 8001368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_DMA_Init+0x3c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2038      	movs	r0, #56	; 0x38
 8001380:	f002 fa11 	bl	80037a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001384:	2038      	movs	r0, #56	; 0x38
 8001386:	f002 fa2a 	bl	80037de <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b38      	ldr	r3, [pc, #224]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a37      	ldr	r2, [pc, #220]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b35      	ldr	r3, [pc, #212]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a30      	ldr	r2, [pc, #192]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a29      	ldr	r2, [pc, #164]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <MX_GPIO_Init+0xfc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <MX_GPIO_Init+0xfc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a22      	ldr	r2, [pc, #136]	; (8001494 <MX_GPIO_Init+0xfc>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_GPIO_Init+0xfc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2120      	movs	r1, #32
 8001422:	481d      	ldr	r0, [pc, #116]	; (8001498 <MX_GPIO_Init+0x100>)
 8001424:	f002 ff02 	bl	800422c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4817      	ldr	r0, [pc, #92]	; (800149c <MX_GPIO_Init+0x104>)
 8001440:	f002 fd58 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001444:	2320      	movs	r3, #32
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	480f      	ldr	r0, [pc, #60]	; (8001498 <MX_GPIO_Init+0x100>)
 800145c:	f002 fd4a 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146a:	2301      	movs	r3, #1
 800146c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4808      	ldr	r0, [pc, #32]	; (8001498 <MX_GPIO_Init+0x100>)
 8001476:	f002 fd3d 	bl	8003ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2028      	movs	r0, #40	; 0x28
 8001480:	f002 f991 	bl	80037a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001484:	2028      	movs	r0, #40	; 0x28
 8001486:	f002 f9aa 	bl	80037de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020800 	.word	0x40020800

080014a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) // Push Button Sample CLK and main CLK, T=10ms
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b0:	d154      	bne.n	800155c <HAL_TIM_PeriodElapsedCallback+0xbc>
	{
		if (main_CLK_autoreload <= 0){
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014b4:	f993 3000 	ldrsb.w	r3, [r3]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dc02      	bgt.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0x22>
			main_CLK_autoreload = 0;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
		}
		if (main_CLK_counter > main_CLK_autoreload){
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014ca:	f993 3000 	ldrsb.w	r3, [r3]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dd08      	ble.n	80014e4 <HAL_TIM_PeriodElapsedCallback+0x44>
			game_main();
 80014d2:	f000 fa65 	bl	80019a0 <game_main>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80014d6:	2120      	movs	r1, #32
 80014d8:	4828      	ldr	r0, [pc, #160]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014da:	f002 fec0 	bl	800425e <HAL_GPIO_TogglePin>
			main_CLK_counter = 0;
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
		}
		if (long_press_CLK_counter > long_press_CLK_autoreload){
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d926      	bls.n	800153e <HAL_TIM_PeriodElapsedCallback+0x9e>
			if ((prev_press_state_2 == 1) && (prev_press_state_1 == 0) && (prev_press_state == 0)){
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d117      	bne.n	8001528 <HAL_TIM_PeriodElapsedCallback+0x88>
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d113      	bne.n	8001528 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10f      	bne.n	8001528 <HAL_TIM_PeriodElapsedCallback+0x88>
				auto_play_enable = !auto_play_enable;
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800151a:	701a      	strb	r2, [r3, #0]
				breath_request = 1;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
				disable_single_click = 1;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
			}
			prev_press_state_2 = prev_press_state_1;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800152e:	701a      	strb	r2, [r3, #0]
			prev_press_state_1 = current_press_state;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001536:	701a      	strb	r2, [r3, #0]
			long_press_CLK_counter = 0;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		}

		long_press_CLK_counter++;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001548:	701a      	strb	r2, [r3, #0]
		main_CLK_counter++;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001554:	701a      	strb	r2, [r3, #0]
		user_input_pushbutton();
 8001556:	f000 fd75 	bl	8002044 <user_input_pushbutton>

	else if (htim->Instance == TIM3) // User Input CLK, T=0.333s
	{
		user_input_joystick();
	}
}
 800155a:	e006      	b.n	800156a <HAL_TIM_PeriodElapsedCallback+0xca>
	else if (htim->Instance == TIM3) // User Input CLK, T=0.333s
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_TIM_PeriodElapsedCallback+0xca>
		user_input_joystick();
 8001566:	f000 fcb1 	bl	8001ecc <user_input_joystick>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000005 	.word	0x20000005
 8001578:	200002d8 	.word	0x200002d8
 800157c:	40020000 	.word	0x40020000
 8001580:	200002d9 	.word	0x200002d9
 8001584:	20000006 	.word	0x20000006
 8001588:	2000006c 	.word	0x2000006c
 800158c:	2000006b 	.word	0x2000006b
 8001590:	2000006a 	.word	0x2000006a
 8001594:	200003ab 	.word	0x200003ab
 8001598:	200003b2 	.word	0x200003b2
 800159c:	200003ac 	.word	0x200003ac
 80015a0:	20000069 	.word	0x20000069
 80015a4:	40000400 	.word	0x40000400

080015a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13)  // On board push button, only for external interrupt testing purposes
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b8:	d118      	bne.n	80015ec <HAL_GPIO_EXTI_Callback+0x44>
    {
    	memset(MSG, '\0', sizeof(MSG));
 80015ba:	2232      	movs	r2, #50	; 0x32
 80015bc:	2100      	movs	r1, #0
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80015c0:	f005 f9ac 	bl	800691c <memset>
    	sprintf(MSG, "Test\r\n");
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80015c6:	480b      	ldr	r0, [pc, #44]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80015c8:	f005 f988 	bl	80068dc <siprintf>
    	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80015cc:	2364      	movs	r3, #100	; 0x64
 80015ce:	2232      	movs	r2, #50	; 0x32
 80015d0:	4908      	ldr	r1, [pc, #32]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80015d2:	480a      	ldr	r0, [pc, #40]	; (80015fc <HAL_GPIO_EXTI_Callback+0x54>)
 80015d4:	f004 fdc6 	bl	8006164 <HAL_UART_Transmit>
    	pause_game = !pause_game;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_GPIO_EXTI_Callback+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_GPIO_EXTI_Callback+0x58>)
 80015ea:	701a      	strb	r2, [r3, #0]
    }
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200002dc 	.word	0x200002dc
 80015f8:	080080b0 	.word	0x080080b0
 80015fc:	20000290 	.word	0x20000290
 8001600:	20000068 	.word	0x20000068

08001604 <initialise_game>:

void initialise_game(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
	// 0: NULL, 1: Boundary, 2: Block, 3: Paddle, 4: Ball, 5: Bottom Line, (1, 1) Top Left
	bonus = 1;
 800160a:	4b55      	ldr	r3, [pc, #340]	; (8001760 <initialise_game+0x15c>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
	blocks_left = 21;
 8001610:	4b54      	ldr	r3, [pc, #336]	; (8001764 <initialise_game+0x160>)
 8001612:	2215      	movs	r2, #21
 8001614:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <= 11; i++){
 8001616:	2300      	movs	r3, #0
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	e015      	b.n	8001648 <initialise_game+0x44>
		for (uint8_t j = 0; j <= 8; j++){
 800161c:	2300      	movs	r3, #0
 800161e:	71bb      	strb	r3, [r7, #6]
 8001620:	e00c      	b.n	800163c <initialise_game+0x38>
			pointProperties[i][j] = 0;
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	79b9      	ldrb	r1, [r7, #6]
 8001626:	4850      	ldr	r0, [pc, #320]	; (8001768 <initialise_game+0x164>)
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	4403      	add	r3, r0
 8001630:	440b      	add	r3, r1
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j <= 8; j++){
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	3301      	adds	r3, #1
 800163a:	71bb      	strb	r3, [r7, #6]
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	2b08      	cmp	r3, #8
 8001640:	d9ef      	bls.n	8001622 <initialise_game+0x1e>
	for (uint8_t i = 0; i <= 11; i++){
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	3301      	adds	r3, #1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b0b      	cmp	r3, #11
 800164c:	d9e6      	bls.n	800161c <initialise_game+0x18>
		}
	}
	// Initialise Boundaries
	Vx = random_initial_speed(); Vy = random_initial_speed();
 800164e:	f000 fd83 	bl	8002158 <random_initial_speed>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <initialise_game+0x168>)
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	f000 fd7d 	bl	8002158 <random_initial_speed>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <initialise_game+0x16c>)
 8001664:	701a      	strb	r2, [r3, #0]
	ball_blink_enable = 0;
 8001666:	4b43      	ldr	r3, [pc, #268]	; (8001774 <initialise_game+0x170>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <= 11; i++) {
 800166c:	2300      	movs	r3, #0
 800166e:	717b      	strb	r3, [r7, #5]
 8001670:	e013      	b.n	800169a <initialise_game+0x96>
		pointProperties[i][0] = 1;
 8001672:	797a      	ldrb	r2, [r7, #5]
 8001674:	493c      	ldr	r1, [pc, #240]	; (8001768 <initialise_game+0x164>)
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	440b      	add	r3, r1
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
		pointProperties[i][8] = 1;
 8001682:	797a      	ldrb	r2, [r7, #5]
 8001684:	4938      	ldr	r1, [pc, #224]	; (8001768 <initialise_game+0x164>)
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	440b      	add	r3, r1
 800168e:	3308      	adds	r3, #8
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <= 11; i++) {
 8001694:	797b      	ldrb	r3, [r7, #5]
 8001696:	3301      	adds	r3, #1
 8001698:	717b      	strb	r3, [r7, #5]
 800169a:	797b      	ldrb	r3, [r7, #5]
 800169c:	2b0b      	cmp	r3, #11
 800169e:	d9e8      	bls.n	8001672 <initialise_game+0x6e>
	}
	for (uint8_t i = 1; i <= 7; i++) {
 80016a0:	2301      	movs	r3, #1
 80016a2:	713b      	strb	r3, [r7, #4]
 80016a4:	e006      	b.n	80016b4 <initialise_game+0xb0>
		pointProperties[0][i] = 1;
 80016a6:	793b      	ldrb	r3, [r7, #4]
 80016a8:	4a2f      	ldr	r2, [pc, #188]	; (8001768 <initialise_game+0x164>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i <= 7; i++) {
 80016ae:	793b      	ldrb	r3, [r7, #4]
 80016b0:	3301      	adds	r3, #1
 80016b2:	713b      	strb	r3, [r7, #4]
 80016b4:	793b      	ldrb	r3, [r7, #4]
 80016b6:	2b07      	cmp	r3, #7
 80016b8:	d9f5      	bls.n	80016a6 <initialise_game+0xa2>
	}

	// Initialise Bottom Line
	for (uint8_t i = 0; i <= 8; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	70fb      	strb	r3, [r7, #3]
 80016be:	e008      	b.n	80016d2 <initialise_game+0xce>
		pointProperties[12][i] = 5;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	4a29      	ldr	r2, [pc, #164]	; (8001768 <initialise_game+0x164>)
 80016c4:	4413      	add	r3, r2
 80016c6:	2205      	movs	r2, #5
 80016c8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	for (uint8_t i = 0; i <= 8; i++) {
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	3301      	adds	r3, #1
 80016d0:	70fb      	strb	r3, [r7, #3]
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d9f3      	bls.n	80016c0 <initialise_game+0xbc>
	}

	// Place Paddle
	paddle_loc[0] = 11; paddle_loc[1] = 4;
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <initialise_game+0x174>)
 80016da:	220b      	movs	r2, #11
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <initialise_game+0x174>)
 80016e0:	2204      	movs	r2, #4
 80016e2:	705a      	strb	r2, [r3, #1]
	update_paddle();
 80016e4:	f000 f96c 	bl	80019c0 <update_paddle>

	// Place Ball
	ball_loc[0] = 7 + random_initial_pos(); ball_loc[1] = 4 + random_initial_pos();
 80016e8:	f000 fd4e 	bl	8002188 <random_initial_pos>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3307      	adds	r3, #7
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <initialise_game+0x178>)
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	f000 fd46 	bl	8002188 <random_initial_pos>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3304      	adds	r3, #4
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <initialise_game+0x178>)
 8001706:	705a      	strb	r2, [r3, #1]
	pointProperties[ball_loc[0]][ball_loc[1]] = 4;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <initialise_game+0x178>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <initialise_game+0x178>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	4618      	mov	r0, r3
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <initialise_game+0x164>)
 8001716:	460b      	mov	r3, r1
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	4413      	add	r3, r2
 800171e:	4403      	add	r3, r0
 8001720:	2204      	movs	r2, #4
 8001722:	701a      	strb	r2, [r3, #0]

	// Place Blocks
	for (uint8_t i = 1; i <= 7; i++) {
 8001724:	2301      	movs	r3, #1
 8001726:	70bb      	strb	r3, [r7, #2]
 8001728:	e011      	b.n	800174e <initialise_game+0x14a>
		pointProperties[1][i] = 2;
 800172a:	78bb      	ldrb	r3, [r7, #2]
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <initialise_game+0x164>)
 800172e:	4413      	add	r3, r2
 8001730:	2202      	movs	r2, #2
 8001732:	725a      	strb	r2, [r3, #9]
		pointProperties[2][i] = 2;
 8001734:	78bb      	ldrb	r3, [r7, #2]
 8001736:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <initialise_game+0x164>)
 8001738:	4413      	add	r3, r2
 800173a:	2202      	movs	r2, #2
 800173c:	749a      	strb	r2, [r3, #18]
		pointProperties[3][i] = 2;
 800173e:	78bb      	ldrb	r3, [r7, #2]
 8001740:	4a09      	ldr	r2, [pc, #36]	; (8001768 <initialise_game+0x164>)
 8001742:	4413      	add	r3, r2
 8001744:	2202      	movs	r2, #2
 8001746:	76da      	strb	r2, [r3, #27]
	for (uint8_t i = 1; i <= 7; i++) {
 8001748:	78bb      	ldrb	r3, [r7, #2]
 800174a:	3301      	adds	r3, #1
 800174c:	70bb      	strb	r3, [r7, #2]
 800174e:	78bb      	ldrb	r3, [r7, #2]
 8001750:	2b07      	cmp	r3, #7
 8001752:	d9ea      	bls.n	800172a <initialise_game+0x126>
	}
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200003ae 	.word	0x200003ae
 8001764:	2000006d 	.word	0x2000006d
 8001768:	2000032c 	.word	0x2000032c
 800176c:	200003af 	.word	0x200003af
 8001770:	200003b0 	.word	0x200003b0
 8001774:	200003aa 	.word	0x200003aa
 8001778:	200003a4 	.word	0x200003a4
 800177c:	200003a8 	.word	0x200003a8

08001780 <render_frame>:

void render_frame(void) {
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
	// 0: NULL, 1: Boundary, 2: Block, 3: Paddle, 4: Ball, 5: Bottom Line, (1, 1) Top Left
	uint8_t write_intermediate = 0x00;
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]
	uint8_t blink_intermediate = 0x00;
 800178a:	2300      	movs	r3, #0
 800178c:	71bb      	strb	r3, [r7, #6]

	for (uint8_t row = 1; row <= 11; row++) {
 800178e:	2301      	movs	r3, #1
 8001790:	717b      	strb	r3, [r7, #5]
 8001792:	e0e8      	b.n	8001966 <render_frame+0x1e6>
		write_intermediate = 0x00;
 8001794:	2300      	movs	r3, #0
 8001796:	71fb      	strb	r3, [r7, #7]
		blink_intermediate = 0x00;
 8001798:	2300      	movs	r3, #0
 800179a:	71bb      	strb	r3, [r7, #6]
		for (uint8_t col = 1; col <= 7; col++) {
 800179c:	2301      	movs	r3, #1
 800179e:	713b      	strb	r3, [r7, #4]
 80017a0:	e0d0      	b.n	8001944 <render_frame+0x1c4>
			switch (pointProperties[row][col]) {
 80017a2:	797a      	ldrb	r2, [r7, #5]
 80017a4:	7939      	ldrb	r1, [r7, #4]
 80017a6:	4876      	ldr	r0, [pc, #472]	; (8001980 <render_frame+0x200>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	4403      	add	r3, r0
 80017b0:	440b      	add	r3, r1
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d063      	beq.n	8001880 <render_frame+0x100>
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	f300 80b4 	bgt.w	8001926 <render_frame+0x1a6>
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d002      	beq.n	80017c8 <render_frame+0x48>
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d02e      	beq.n	8001824 <render_frame+0xa4>
 80017c6:	e0ae      	b.n	8001926 <render_frame+0x1a6>
			case 2:
				write_intermediate = write_intermediate + pow(2, col - 1);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe feaa 	bl	8000524 <__aeabi_i2d>
 80017d0:	4604      	mov	r4, r0
 80017d2:	460d      	mov	r5, r1
 80017d4:	793b      	ldrb	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fea3 	bl	8000524 <__aeabi_i2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	ec43 2b11 	vmov	d1, r2, r3
 80017e6:	ed9f 0b64 	vldr	d0, [pc, #400]	; 8001978 <render_frame+0x1f8>
 80017ea:	f005 fd1b 	bl	8007224 <pow>
 80017ee:	ec53 2b10 	vmov	r2, r3, d0
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7fe fd49 	bl	800028c <__adddf3>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a9 	bl	8000b58 <__aeabi_d2uiz>
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
				PWMBuffer[row - 1][col - 1] = BLOCK_PWM;
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	1e5a      	subs	r2, r3, #1
 800180e:	793b      	ldrb	r3, [r7, #4]
 8001810:	3b01      	subs	r3, #1
 8001812:	495c      	ldr	r1, [pc, #368]	; (8001984 <render_frame+0x204>)
 8001814:	7808      	ldrb	r0, [r1, #0]
 8001816:	495c      	ldr	r1, [pc, #368]	; (8001988 <render_frame+0x208>)
 8001818:	00d2      	lsls	r2, r2, #3
 800181a:	440a      	add	r2, r1
 800181c:	4413      	add	r3, r2
 800181e:	4602      	mov	r2, r0
 8001820:	701a      	strb	r2, [r3, #0]
				break;
 8001822:	e08c      	b.n	800193e <render_frame+0x1be>
			case 3:
				write_intermediate = write_intermediate + pow(2, col - 1);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe7c 	bl	8000524 <__aeabi_i2d>
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
 8001830:	793b      	ldrb	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe75 	bl	8000524 <__aeabi_i2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	ec43 2b11 	vmov	d1, r2, r3
 8001842:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8001978 <render_frame+0x1f8>
 8001846:	f005 fced 	bl	8007224 <pow>
 800184a:	ec53 2b10 	vmov	r2, r3, d0
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fd1b 	bl	800028c <__adddf3>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f97b 	bl	8000b58 <__aeabi_d2uiz>
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
				PWMBuffer[row - 1][col - 1] = PADDLE_PWM;
 8001866:	797b      	ldrb	r3, [r7, #5]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	793b      	ldrb	r3, [r7, #4]
 800186c:	3b01      	subs	r3, #1
 800186e:	4947      	ldr	r1, [pc, #284]	; (800198c <render_frame+0x20c>)
 8001870:	7808      	ldrb	r0, [r1, #0]
 8001872:	4945      	ldr	r1, [pc, #276]	; (8001988 <render_frame+0x208>)
 8001874:	00d2      	lsls	r2, r2, #3
 8001876:	440a      	add	r2, r1
 8001878:	4413      	add	r3, r2
 800187a:	4602      	mov	r2, r0
 800187c:	701a      	strb	r2, [r3, #0]
				break;
 800187e:	e05e      	b.n	800193e <render_frame+0x1be>
			case 4:
				write_intermediate = write_intermediate + pow(2, col - 1);
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe4e 	bl	8000524 <__aeabi_i2d>
 8001888:	4604      	mov	r4, r0
 800188a:	460d      	mov	r5, r1
 800188c:	793b      	ldrb	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe47 	bl	8000524 <__aeabi_i2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	ec43 2b11 	vmov	d1, r2, r3
 800189e:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8001978 <render_frame+0x1f8>
 80018a2:	f005 fcbf 	bl	8007224 <pow>
 80018a6:	ec53 2b10 	vmov	r2, r3, d0
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fced 	bl	800028c <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f94d 	bl	8000b58 <__aeabi_d2uiz>
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
				PWMBuffer[row - 1][col - 1] = BALL_PWM;
 80018c2:	797b      	ldrb	r3, [r7, #5]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	793b      	ldrb	r3, [r7, #4]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	4931      	ldr	r1, [pc, #196]	; (8001990 <render_frame+0x210>)
 80018cc:	7808      	ldrb	r0, [r1, #0]
 80018ce:	492e      	ldr	r1, [pc, #184]	; (8001988 <render_frame+0x208>)
 80018d0:	00d2      	lsls	r2, r2, #3
 80018d2:	440a      	add	r2, r1
 80018d4:	4413      	add	r3, r2
 80018d6:	4602      	mov	r2, r0
 80018d8:	701a      	strb	r2, [r3, #0]
				if (ball_blink_enable){
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <render_frame+0x214>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d02c      	beq.n	800193c <render_frame+0x1bc>
					blink_intermediate = blink_intermediate + pow(2, col - 1);
 80018e2:	79bb      	ldrb	r3, [r7, #6]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe1d 	bl	8000524 <__aeabi_i2d>
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
 80018ee:	793b      	ldrb	r3, [r7, #4]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_i2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	ec43 2b11 	vmov	d1, r2, r3
 8001900:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8001978 <render_frame+0x1f8>
 8001904:	f005 fc8e 	bl	8007224 <pow>
 8001908:	ec53 2b10 	vmov	r2, r3, d0
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fcbc 	bl	800028c <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f91c 	bl	8000b58 <__aeabi_d2uiz>
 8001920:	4603      	mov	r3, r0
 8001922:	71bb      	strb	r3, [r7, #6]
				}
				break;
 8001924:	e00a      	b.n	800193c <render_frame+0x1bc>
			default:
				PWMBuffer[row - 1][col - 1] = INIT_PWM;
 8001926:	797b      	ldrb	r3, [r7, #5]
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	793b      	ldrb	r3, [r7, #4]
 800192c:	3b01      	subs	r3, #1
 800192e:	4916      	ldr	r1, [pc, #88]	; (8001988 <render_frame+0x208>)
 8001930:	00d2      	lsls	r2, r2, #3
 8001932:	440a      	add	r2, r1
 8001934:	4413      	add	r3, r2
 8001936:	2204      	movs	r2, #4
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e000      	b.n	800193e <render_frame+0x1be>
				break;
 800193c:	bf00      	nop
		for (uint8_t col = 1; col <= 7; col++) {
 800193e:	793b      	ldrb	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	713b      	strb	r3, [r7, #4]
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	2b07      	cmp	r3, #7
 8001948:	f67f af2b 	bls.w	80017a2 <render_frame+0x22>
			}
		}
		frameBuffer[row - 1] = write_intermediate;
 800194c:	797b      	ldrb	r3, [r7, #5]
 800194e:	3b01      	subs	r3, #1
 8001950:	4911      	ldr	r1, [pc, #68]	; (8001998 <render_frame+0x218>)
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	54ca      	strb	r2, [r1, r3]
		blinkBuffer[row - 1] = blink_intermediate;
 8001956:	797b      	ldrb	r3, [r7, #5]
 8001958:	3b01      	subs	r3, #1
 800195a:	4910      	ldr	r1, [pc, #64]	; (800199c <render_frame+0x21c>)
 800195c:	79ba      	ldrb	r2, [r7, #6]
 800195e:	54ca      	strb	r2, [r1, r3]
	for (uint8_t row = 1; row <= 11; row++) {
 8001960:	797b      	ldrb	r3, [r7, #5]
 8001962:	3301      	adds	r3, #1
 8001964:	717b      	strb	r3, [r7, #5]
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	2b0b      	cmp	r3, #11
 800196a:	f67f af13 	bls.w	8001794 <render_frame+0x14>
	}
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bdb0      	pop	{r4, r5, r7, pc}
 8001978:	00000000 	.word	0x00000000
 800197c:	40000000 	.word	0x40000000
 8001980:	2000032c 	.word	0x2000032c
 8001984:	20000000 	.word	0x20000000
 8001988:	20000010 	.word	0x20000010
 800198c:	20000001 	.word	0x20000001
 8001990:	20000004 	.word	0x20000004
 8001994:	200003aa 	.word	0x200003aa
 8001998:	20000314 	.word	0x20000314
 800199c:	20000320 	.word	0x20000320

080019a0 <game_main>:

void game_main(void){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	if (pause_game != 1){
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <game_main+0x1c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d005      	beq.n	80019b8 <game_main+0x18>
		auto_play();
 80019ac:	f000 fca4 	bl	80022f8 <auto_play>
		update_ball();
 80019b0:	f000 f876 	bl	8001aa0 <update_ball>
		calculate_blocks();
 80019b4:	f000 fc0e 	bl	80021d4 <calculate_blocks>
	}
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000068 	.word	0x20000068

080019c0 <update_paddle>:

void update_paddle(void){
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
	if(pointProperties[paddle_loc[0]][paddle_loc[1] + 2] == 3){
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <update_paddle+0xd8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <update_paddle+0xd8>)
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	1c9a      	adds	r2, r3, #2
 80019d0:	4932      	ldr	r1, [pc, #200]	; (8001a9c <update_paddle+0xdc>)
 80019d2:	4603      	mov	r3, r0
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4403      	add	r3, r0
 80019d8:	440b      	add	r3, r1
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d10e      	bne.n	8001a00 <update_paddle+0x40>
		pointProperties[paddle_loc[0]][paddle_loc[1] + 2] = 0;
 80019e2:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <update_paddle+0xd8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <update_paddle+0xd8>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	1c9a      	adds	r2, r3, #2
 80019ee:	492b      	ldr	r1, [pc, #172]	; (8001a9c <update_paddle+0xdc>)
 80019f0:	4603      	mov	r3, r0
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4403      	add	r3, r0
 80019f6:	440b      	add	r3, r1
 80019f8:	4413      	add	r3, r2
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e01c      	b.n	8001a3a <update_paddle+0x7a>
	}
	else if (pointProperties[paddle_loc[0]][paddle_loc[1] - 2] == 3){
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <update_paddle+0xd8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <update_paddle+0xd8>)
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	1e9a      	subs	r2, r3, #2
 8001a0c:	4923      	ldr	r1, [pc, #140]	; (8001a9c <update_paddle+0xdc>)
 8001a0e:	4603      	mov	r3, r0
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4403      	add	r3, r0
 8001a14:	440b      	add	r3, r1
 8001a16:	4413      	add	r3, r2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d10d      	bne.n	8001a3a <update_paddle+0x7a>
		pointProperties[paddle_loc[0]][paddle_loc[1] - 2] = 0;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <update_paddle+0xd8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <update_paddle+0xd8>)
 8001a26:	785b      	ldrb	r3, [r3, #1]
 8001a28:	1e9a      	subs	r2, r3, #2
 8001a2a:	491c      	ldr	r1, [pc, #112]	; (8001a9c <update_paddle+0xdc>)
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4403      	add	r3, r0
 8001a32:	440b      	add	r3, r1
 8001a34:	4413      	add	r3, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
	}
	pointProperties[paddle_loc[0]][paddle_loc[1]] = 3;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <update_paddle+0xd8>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <update_paddle+0xd8>)
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	4618      	mov	r0, r3
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <update_paddle+0xdc>)
 8001a48:	460b      	mov	r3, r1
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	4413      	add	r3, r2
 8001a50:	4403      	add	r3, r0
 8001a52:	2203      	movs	r2, #3
 8001a54:	701a      	strb	r2, [r3, #0]
	pointProperties[paddle_loc[0]][paddle_loc[1] - 1] = 3;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <update_paddle+0xd8>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <update_paddle+0xd8>)
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	490e      	ldr	r1, [pc, #56]	; (8001a9c <update_paddle+0xdc>)
 8001a64:	4603      	mov	r3, r0
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4403      	add	r3, r0
 8001a6a:	440b      	add	r3, r1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	2203      	movs	r2, #3
 8001a70:	701a      	strb	r2, [r3, #0]
	pointProperties[paddle_loc[0]][paddle_loc[1] + 1] = 3;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <update_paddle+0xd8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <update_paddle+0xd8>)
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	4907      	ldr	r1, [pc, #28]	; (8001a9c <update_paddle+0xdc>)
 8001a80:	4603      	mov	r3, r0
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4403      	add	r3, r0
 8001a86:	440b      	add	r3, r1
 8001a88:	4413      	add	r3, r2
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	701a      	strb	r2, [r3, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	200003a4 	.word	0x200003a4
 8001a9c:	2000032c 	.word	0x2000032c

08001aa0 <update_ball>:

void update_ball(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	PADDLE_PWM = PADDLE_PWM_INIT;
 8001aaa:	4b91      	ldr	r3, [pc, #580]	; (8001cf0 <update_ball+0x250>)
 8001aac:	2214      	movs	r2, #20
 8001aae:	701a      	strb	r2, [r3, #0]
	if(pointProperties[ball_loc[0]][ball_loc[1] + Vx] != 0){
 8001ab0:	4b90      	ldr	r3, [pc, #576]	; (8001cf4 <update_ball+0x254>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <update_ball+0x254>)
 8001ab8:	785b      	ldrb	r3, [r3, #1]
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b8e      	ldr	r3, [pc, #568]	; (8001cf8 <update_ball+0x258>)
 8001abe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac2:	441a      	add	r2, r3
 8001ac4:	498d      	ldr	r1, [pc, #564]	; (8001cfc <update_ball+0x25c>)
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4403      	add	r3, r0
 8001acc:	440b      	add	r3, r1
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d047      	beq.n	8001b66 <update_ball+0xc6>
		if (pointProperties[ball_loc[0]][ball_loc[1] + Vx] == 2){
 8001ad6:	4b87      	ldr	r3, [pc, #540]	; (8001cf4 <update_ball+0x254>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	4b85      	ldr	r3, [pc, #532]	; (8001cf4 <update_ball+0x254>)
 8001ade:	785b      	ldrb	r3, [r3, #1]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b85      	ldr	r3, [pc, #532]	; (8001cf8 <update_ball+0x258>)
 8001ae4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae8:	441a      	add	r2, r3
 8001aea:	4984      	ldr	r1, [pc, #528]	; (8001cfc <update_ball+0x25c>)
 8001aec:	4603      	mov	r3, r0
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4403      	add	r3, r0
 8001af2:	440b      	add	r3, r1
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d112      	bne.n	8001b22 <update_ball+0x82>
			pointProperties[ball_loc[0]][ball_loc[1] + Vx] = 0;  // Clear block
 8001afc:	4b7d      	ldr	r3, [pc, #500]	; (8001cf4 <update_ball+0x254>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <update_ball+0x254>)
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <update_ball+0x258>)
 8001b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0e:	441a      	add	r2, r3
 8001b10:	497a      	ldr	r1, [pc, #488]	; (8001cfc <update_ball+0x25c>)
 8001b12:	4603      	mov	r3, r0
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4403      	add	r3, r0
 8001b18:	440b      	add	r3, r1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e018      	b.n	8001b54 <update_ball+0xb4>
		}
		else if(pointProperties[ball_loc[0]][ball_loc[1] + Vx] == 3){
 8001b22:	4b74      	ldr	r3, [pc, #464]	; (8001cf4 <update_ball+0x254>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <update_ball+0x254>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b72      	ldr	r3, [pc, #456]	; (8001cf8 <update_ball+0x258>)
 8001b30:	f993 3000 	ldrsb.w	r3, [r3]
 8001b34:	441a      	add	r2, r3
 8001b36:	4971      	ldr	r1, [pc, #452]	; (8001cfc <update_ball+0x25c>)
 8001b38:	4603      	mov	r3, r0
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4403      	add	r3, r0
 8001b3e:	440b      	add	r3, r1
 8001b40:	4413      	add	r3, r2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d105      	bne.n	8001b54 <update_ball+0xb4>
			PADDLE_PWM = PADDLE_PWM_HIT;
 8001b48:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <update_ball+0x260>)
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <update_ball+0x250>)
 8001b4e:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	71fb      	strb	r3, [r7, #7]
		}
		Vx = -Vx;
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <update_ball+0x258>)
 8001b56:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	b25a      	sxtb	r2, r3
 8001b62:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <update_ball+0x258>)
 8001b64:	701a      	strb	r2, [r3, #0]
	}

	if (flag == 1){
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <update_ball+0xd0>
		path_change_joystick();
 8001b6c:	f000 fba6 	bl	80022bc <path_change_joystick>
	}

	flag = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	71fb      	strb	r3, [r7, #7]
	if(pointProperties[ball_loc[0] + Vy][ball_loc[1]] != 0){
 8001b74:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <update_ball+0x254>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <update_ball+0x264>)
 8001b7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b80:	441a      	add	r2, r3
 8001b82:	4b5c      	ldr	r3, [pc, #368]	; (8001cf4 <update_ball+0x254>)
 8001b84:	785b      	ldrb	r3, [r3, #1]
 8001b86:	4618      	mov	r0, r3
 8001b88:	495c      	ldr	r1, [pc, #368]	; (8001cfc <update_ball+0x25c>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	4403      	add	r3, r0
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80c6 	beq.w	8001d28 <update_ball+0x288>
		if (pointProperties[ball_loc[0] + Vy][ball_loc[1]] == 2){
 8001b9c:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <update_ball+0x254>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b58      	ldr	r3, [pc, #352]	; (8001d04 <update_ball+0x264>)
 8001ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba8:	441a      	add	r2, r3
 8001baa:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <update_ball+0x254>)
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4952      	ldr	r1, [pc, #328]	; (8001cfc <update_ball+0x25c>)
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	4403      	add	r3, r0
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d11b      	bne.n	8001bfa <update_ball+0x15a>
			pointProperties[ball_loc[0] + Vy][ball_loc[1]] = 0;  // Clear Block
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <update_ball+0x254>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <update_ball+0x264>)
 8001bca:	f993 3000 	ldrsb.w	r3, [r3]
 8001bce:	441a      	add	r2, r3
 8001bd0:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <update_ball+0x254>)
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4949      	ldr	r1, [pc, #292]	; (8001cfc <update_ball+0x25c>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	4403      	add	r3, r0
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
			Vy = -Vy;
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <update_ball+0x264>)
 8001be8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	425b      	negs	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	b25a      	sxtb	r2, r3
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <update_ball+0x264>)
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e10a      	b.n	8001e10 <update_ball+0x370>
		}
		else if (pointProperties[ball_loc[0] + Vy][ball_loc[1]] == 3) {
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <update_ball+0x254>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <update_ball+0x264>)
 8001c02:	f993 3000 	ldrsb.w	r3, [r3]
 8001c06:	441a      	add	r2, r3
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <update_ball+0x254>)
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	493b      	ldr	r1, [pc, #236]	; (8001cfc <update_ball+0x25c>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	4403      	add	r3, r0
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d10f      	bne.n	8001c40 <update_ball+0x1a0>
			PADDLE_PWM = PADDLE_PWM_HIT;
 8001c20:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <update_ball+0x260>)
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <update_ball+0x250>)
 8001c26:	701a      	strb	r2, [r3, #0]
			Vy = -Vy;
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <update_ball+0x264>)
 8001c2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	425b      	negs	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	b25a      	sxtb	r2, r3
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <update_ball+0x264>)
 8001c38:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	71fb      	strb	r3, [r7, #7]
 8001c3e:	e0e7      	b.n	8001e10 <update_ball+0x370>
		}
		else if (pointProperties[ball_loc[0] + Vy][ball_loc[1]] == 1) {
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <update_ball+0x254>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <update_ball+0x264>)
 8001c48:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4c:	441a      	add	r2, r3
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <update_ball+0x254>)
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	4618      	mov	r0, r3
 8001c54:	4929      	ldr	r1, [pc, #164]	; (8001cfc <update_ball+0x25c>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	4403      	add	r3, r0
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d109      	bne.n	8001c7a <update_ball+0x1da>
			Vy = -Vy;
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <update_ball+0x264>)
 8001c68:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	425b      	negs	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	b25a      	sxtb	r2, r3
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <update_ball+0x264>)
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e0ca      	b.n	8001e10 <update_ball+0x370>
		}
		else if (pointProperties[ball_loc[0] + Vy][ball_loc[1]] == 5) {
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <update_ball+0x254>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <update_ball+0x264>)
 8001c82:	f993 3000 	ldrsb.w	r3, [r3]
 8001c86:	441a      	add	r2, r3
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <update_ball+0x254>)
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	491b      	ldr	r1, [pc, #108]	; (8001cfc <update_ball+0x25c>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	4403      	add	r3, r0
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	f040 80b7 	bne.w	8001e10 <update_ball+0x370>
			pause_game = 1;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <update_ball+0x268>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
			Vy = 0; Vx = 0;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <update_ball+0x264>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <update_ball+0x258>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
			ball_blink_enable = 1;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <update_ball+0x26c>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
			PADDLE_PWM = PADDLE_PWM_FAIL;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <update_ball+0x270>)
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <update_ball+0x250>)
 8001cc0:	701a      	strb	r2, [r3, #0]
			fail_flag = 1;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <update_ball+0x274>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
			memset(MSG, '\0', sizeof(MSG));
 8001cc8:	2232      	movs	r2, #50	; 0x32
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4812      	ldr	r0, [pc, #72]	; (8001d18 <update_ball+0x278>)
 8001cce:	f004 fe25 	bl	800691c <memset>
			sprintf(MSG, "You LOOSE ! Score: %d\r\nPress Button to RESTART\r\n\r\n", score);
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <update_ball+0x27c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4911      	ldr	r1, [pc, #68]	; (8001d20 <update_ball+0x280>)
 8001cda:	480f      	ldr	r0, [pc, #60]	; (8001d18 <update_ball+0x278>)
 8001cdc:	f004 fdfe 	bl	80068dc <siprintf>
			HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8001ce0:	2364      	movs	r3, #100	; 0x64
 8001ce2:	2232      	movs	r2, #50	; 0x32
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <update_ball+0x278>)
 8001ce6:	480f      	ldr	r0, [pc, #60]	; (8001d24 <update_ball+0x284>)
 8001ce8:	f004 fa3c 	bl	8006164 <HAL_UART_Transmit>
 8001cec:	e090      	b.n	8001e10 <update_ball+0x370>
 8001cee:	bf00      	nop
 8001cf0:	20000001 	.word	0x20000001
 8001cf4:	200003a8 	.word	0x200003a8
 8001cf8:	200003af 	.word	0x200003af
 8001cfc:	2000032c 	.word	0x2000032c
 8001d00:	20000002 	.word	0x20000002
 8001d04:	200003b0 	.word	0x200003b0
 8001d08:	20000068 	.word	0x20000068
 8001d0c:	200003aa 	.word	0x200003aa
 8001d10:	20000003 	.word	0x20000003
 8001d14:	200003b1 	.word	0x200003b1
 8001d18:	200002dc 	.word	0x200002dc
 8001d1c:	200003ad 	.word	0x200003ad
 8001d20:	080080b8 	.word	0x080080b8
 8001d24:	20000290 	.word	0x20000290
		}

	}
	else if (pointProperties[ball_loc[0] + Vy][ball_loc[1] + Vx] != 0){
 8001d28:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <update_ball+0x414>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b62      	ldr	r3, [pc, #392]	; (8001eb8 <update_ball+0x418>)
 8001d30:	f993 3000 	ldrsb.w	r3, [r3]
 8001d34:	441a      	add	r2, r3
 8001d36:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <update_ball+0x414>)
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <update_ball+0x41c>)
 8001d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d42:	4419      	add	r1, r3
 8001d44:	485e      	ldr	r0, [pc, #376]	; (8001ec0 <update_ball+0x420>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4403      	add	r3, r0
 8001d4e:	440b      	add	r3, r1
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d05c      	beq.n	8001e10 <update_ball+0x370>
		if (pointProperties[ball_loc[0] + Vy][ball_loc[1] + Vx] == 2){
 8001d56:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <update_ball+0x414>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <update_ball+0x418>)
 8001d5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d62:	441a      	add	r2, r3
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <update_ball+0x414>)
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4b54      	ldr	r3, [pc, #336]	; (8001ebc <update_ball+0x41c>)
 8001d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d70:	4419      	add	r1, r3
 8001d72:	4853      	ldr	r0, [pc, #332]	; (8001ec0 <update_ball+0x420>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	4403      	add	r3, r0
 8001d7c:	440b      	add	r3, r1
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d116      	bne.n	8001db2 <update_ball+0x312>
			pointProperties[ball_loc[0] + Vy][ball_loc[1] + Vx] = 0;  // Clear Block
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <update_ball+0x414>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <update_ball+0x418>)
 8001d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d90:	441a      	add	r2, r3
 8001d92:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <update_ball+0x414>)
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <update_ball+0x41c>)
 8001d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9e:	4419      	add	r1, r3
 8001da0:	4847      	ldr	r0, [pc, #284]	; (8001ec0 <update_ball+0x420>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	4403      	add	r3, r0
 8001daa:	440b      	add	r3, r1
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e01c      	b.n	8001dec <update_ball+0x34c>
		}
		else if (pointProperties[ball_loc[0] + Vy][ball_loc[1] + Vx] == 3){
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <update_ball+0x414>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <update_ball+0x418>)
 8001dba:	f993 3000 	ldrsb.w	r3, [r3]
 8001dbe:	441a      	add	r2, r3
 8001dc0:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <update_ball+0x414>)
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <update_ball+0x41c>)
 8001dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dcc:	4419      	add	r1, r3
 8001dce:	483c      	ldr	r0, [pc, #240]	; (8001ec0 <update_ball+0x420>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4403      	add	r3, r0
 8001dd8:	440b      	add	r3, r1
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d105      	bne.n	8001dec <update_ball+0x34c>
			PADDLE_PWM = PADDLE_PWM_HIT;
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <update_ball+0x424>)
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <update_ball+0x428>)
 8001de6:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	71fb      	strb	r3, [r7, #7]
		}
		Vx = -Vx;
 8001dec:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <update_ball+0x41c>)
 8001dee:	f993 3000 	ldrsb.w	r3, [r3]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	425b      	negs	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	b25a      	sxtb	r2, r3
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <update_ball+0x41c>)
 8001dfc:	701a      	strb	r2, [r3, #0]
		Vy = -Vy;
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <update_ball+0x418>)
 8001e00:	f993 3000 	ldrsb.w	r3, [r3]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	425b      	negs	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	b25a      	sxtb	r2, r3
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <update_ball+0x418>)
 8001e0e:	701a      	strb	r2, [r3, #0]
	}

	if (flag == 1){
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <update_ball+0x37a>
		path_change_joystick();
 8001e16:	f000 fa51 	bl	80022bc <path_change_joystick>
	}

	// Path not available
	if (pointProperties[ball_loc[0] + Vy][ball_loc[1] + Vx] != 0){
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <update_ball+0x414>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <update_ball+0x418>)
 8001e22:	f993 3000 	ldrsb.w	r3, [r3]
 8001e26:	441a      	add	r2, r3
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <update_ball+0x414>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <update_ball+0x41c>)
 8001e30:	f993 3000 	ldrsb.w	r3, [r3]
 8001e34:	4419      	add	r1, r3
 8001e36:	4822      	ldr	r0, [pc, #136]	; (8001ec0 <update_ball+0x420>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4403      	add	r3, r0
 8001e40:	440b      	add	r3, r1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d130      	bne.n	8001eaa <update_ball+0x40a>
		return;
	}
	pointProperties[ball_loc[0]][ball_loc[1]] = 0;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <update_ball+0x414>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <update_ball+0x414>)
 8001e50:	785b      	ldrb	r3, [r3, #1]
 8001e52:	4618      	mov	r0, r3
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <update_ball+0x420>)
 8001e56:	460b      	mov	r3, r1
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4403      	add	r3, r0
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
	ball_loc[0] = ball_loc[0] + Vy;
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <update_ball+0x414>)
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <update_ball+0x418>)
 8001e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <update_ball+0x414>)
 8001e76:	701a      	strb	r2, [r3, #0]
	ball_loc[1] = ball_loc[1] + Vx;
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <update_ball+0x414>)
 8001e7a:	785a      	ldrb	r2, [r3, #1]
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <update_ball+0x41c>)
 8001e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <update_ball+0x414>)
 8001e8a:	705a      	strb	r2, [r3, #1]
	pointProperties[ball_loc[0]][ball_loc[1]] = 4;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <update_ball+0x414>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <update_ball+0x414>)
 8001e94:	785b      	ldrb	r3, [r3, #1]
 8001e96:	4618      	mov	r0, r3
 8001e98:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <update_ball+0x420>)
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4403      	add	r3, r0
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e000      	b.n	8001eac <update_ball+0x40c>
		return;
 8001eaa:	bf00      	nop
}
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200003a8 	.word	0x200003a8
 8001eb8:	200003b0 	.word	0x200003b0
 8001ebc:	200003af 	.word	0x200003af
 8001ec0:	2000032c 	.word	0x2000032c
 8001ec4:	20000002 	.word	0x20000002
 8001ec8:	20000001 	.word	0x20000001

08001ecc <user_input_joystick>:

void user_input_joystick(void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	if (VRX <= JOYSTICK_LEFT_THR){
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <user_input_joystick+0x148>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	f240 62d4 	movw	r2, #1748	; 0x6d4
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d814      	bhi.n	8001f06 <user_input_joystick+0x3a>
		if ((paddle_loc[1] > 2) && (pause_game != 1) && (auto_play_enable != 1)){
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <user_input_joystick+0x14c>)
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d92a      	bls.n	8001f3a <user_input_joystick+0x6e>
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <user_input_joystick+0x150>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d026      	beq.n	8001f3a <user_input_joystick+0x6e>
 8001eec:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <user_input_joystick+0x154>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d022      	beq.n	8001f3a <user_input_joystick+0x6e>
			paddle_loc[1]--;
 8001ef4:	4b48      	ldr	r3, [pc, #288]	; (8002018 <user_input_joystick+0x14c>)
 8001ef6:	785b      	ldrb	r3, [r3, #1]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b46      	ldr	r3, [pc, #280]	; (8002018 <user_input_joystick+0x14c>)
 8001efe:	705a      	strb	r2, [r3, #1]
			update_paddle();
 8001f00:	f7ff fd5e 	bl	80019c0 <update_paddle>
 8001f04:	e019      	b.n	8001f3a <user_input_joystick+0x6e>
		}
	}
	else if ((VRX >= JOYSTICK_RIGHT_THR) && (pause_game != 1) && (auto_play_enable != 1)){
 8001f06:	4b43      	ldr	r3, [pc, #268]	; (8002014 <user_input_joystick+0x148>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	f640 122b 	movw	r2, #2347	; 0x92b
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d913      	bls.n	8001f3a <user_input_joystick+0x6e>
 8001f12:	4b42      	ldr	r3, [pc, #264]	; (800201c <user_input_joystick+0x150>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d00f      	beq.n	8001f3a <user_input_joystick+0x6e>
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <user_input_joystick+0x154>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d00b      	beq.n	8001f3a <user_input_joystick+0x6e>
		if (paddle_loc[1] < 6){
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <user_input_joystick+0x14c>)
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d807      	bhi.n	8001f3a <user_input_joystick+0x6e>
			paddle_loc[1]++;
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <user_input_joystick+0x14c>)
 8001f2c:	785b      	ldrb	r3, [r3, #1]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b39      	ldr	r3, [pc, #228]	; (8002018 <user_input_joystick+0x14c>)
 8001f34:	705a      	strb	r2, [r3, #1]
			update_paddle();
 8001f36:	f7ff fd43 	bl	80019c0 <update_paddle>
		}
	}

	if (VRY <= JOYSTICK_UP_THR){
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <user_input_joystick+0x158>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f42:	d83a      	bhi.n	8001fba <user_input_joystick+0xee>
		main_CLK_autoreload--;
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <user_input_joystick+0x15c>)
 8001f46:	f993 3000 	ldrsb.w	r3, [r3]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	b25a      	sxtb	r2, r3
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <user_input_joystick+0x15c>)
 8001f54:	701a      	strb	r2, [r3, #0]
		if (main_CLK_autoreload > 0){
 8001f56:	4b34      	ldr	r3, [pc, #208]	; (8002028 <user_input_joystick+0x15c>)
 8001f58:	f993 3000 	ldrsb.w	r3, [r3]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	dd1c      	ble.n	8001f9a <user_input_joystick+0xce>
			bonus++;
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <user_input_joystick+0x160>)
 8001f62:	f993 3000 	ldrsb.w	r3, [r3]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	b25a      	sxtb	r2, r3
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <user_input_joystick+0x160>)
 8001f70:	701a      	strb	r2, [r3, #0]
			memset(MSG, '\0', sizeof(MSG));
 8001f72:	2232      	movs	r2, #50	; 0x32
 8001f74:	2100      	movs	r1, #0
 8001f76:	482e      	ldr	r0, [pc, #184]	; (8002030 <user_input_joystick+0x164>)
 8001f78:	f004 fcd0 	bl	800691c <memset>
			sprintf(MSG, "CLK Speed Increased, bonus = %d\r\n\r\n", bonus);
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <user_input_joystick+0x160>)
 8001f7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f82:	461a      	mov	r2, r3
 8001f84:	492b      	ldr	r1, [pc, #172]	; (8002034 <user_input_joystick+0x168>)
 8001f86:	482a      	ldr	r0, [pc, #168]	; (8002030 <user_input_joystick+0x164>)
 8001f88:	f004 fca8 	bl	80068dc <siprintf>
			HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8001f8c:	2364      	movs	r3, #100	; 0x64
 8001f8e:	2232      	movs	r2, #50	; 0x32
 8001f90:	4927      	ldr	r1, [pc, #156]	; (8002030 <user_input_joystick+0x164>)
 8001f92:	4829      	ldr	r0, [pc, #164]	; (8002038 <user_input_joystick+0x16c>)
 8001f94:	f004 f8e6 	bl	8006164 <HAL_UART_Transmit>
		bonus--;
		memset(MSG, '\0', sizeof(MSG));
		sprintf(MSG, "CLK Speed Decreased, bonus = %d\r\n\r\n", bonus);
		HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
	}
}
 8001f98:	e03a      	b.n	8002010 <user_input_joystick+0x144>
			memset(MSG, '\0', sizeof(MSG));
 8001f9a:	2232      	movs	r2, #50	; 0x32
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4824      	ldr	r0, [pc, #144]	; (8002030 <user_input_joystick+0x164>)
 8001fa0:	f004 fcbc 	bl	800691c <memset>
			sprintf(MSG, "MAX CLK Speed !!!\r\n\r\n");
 8001fa4:	4925      	ldr	r1, [pc, #148]	; (800203c <user_input_joystick+0x170>)
 8001fa6:	4822      	ldr	r0, [pc, #136]	; (8002030 <user_input_joystick+0x164>)
 8001fa8:	f004 fc98 	bl	80068dc <siprintf>
			HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8001fac:	2364      	movs	r3, #100	; 0x64
 8001fae:	2232      	movs	r2, #50	; 0x32
 8001fb0:	491f      	ldr	r1, [pc, #124]	; (8002030 <user_input_joystick+0x164>)
 8001fb2:	4821      	ldr	r0, [pc, #132]	; (8002038 <user_input_joystick+0x16c>)
 8001fb4:	f004 f8d6 	bl	8006164 <HAL_UART_Transmit>
}
 8001fb8:	e02a      	b.n	8002010 <user_input_joystick+0x144>
	else if (VRY >= JOYSTICK_DOWN_THR){
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <user_input_joystick+0x158>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	f640 620b 	movw	r2, #3595	; 0xe0b
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d924      	bls.n	8002010 <user_input_joystick+0x144>
		main_CLK_autoreload++;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <user_input_joystick+0x15c>)
 8001fc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	b25a      	sxtb	r2, r3
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <user_input_joystick+0x15c>)
 8001fd6:	701a      	strb	r2, [r3, #0]
		bonus--;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <user_input_joystick+0x160>)
 8001fda:	f993 3000 	ldrsb.w	r3, [r3]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	b25a      	sxtb	r2, r3
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <user_input_joystick+0x160>)
 8001fe8:	701a      	strb	r2, [r3, #0]
		memset(MSG, '\0', sizeof(MSG));
 8001fea:	2232      	movs	r2, #50	; 0x32
 8001fec:	2100      	movs	r1, #0
 8001fee:	4810      	ldr	r0, [pc, #64]	; (8002030 <user_input_joystick+0x164>)
 8001ff0:	f004 fc94 	bl	800691c <memset>
		sprintf(MSG, "CLK Speed Decreased, bonus = %d\r\n\r\n", bonus);
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <user_input_joystick+0x160>)
 8001ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4910      	ldr	r1, [pc, #64]	; (8002040 <user_input_joystick+0x174>)
 8001ffe:	480c      	ldr	r0, [pc, #48]	; (8002030 <user_input_joystick+0x164>)
 8002000:	f004 fc6c 	bl	80068dc <siprintf>
		HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8002004:	2364      	movs	r3, #100	; 0x64
 8002006:	2232      	movs	r2, #50	; 0x32
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <user_input_joystick+0x164>)
 800200a:	480b      	ldr	r0, [pc, #44]	; (8002038 <user_input_joystick+0x16c>)
 800200c:	f004 f8aa 	bl	8006164 <HAL_UART_Transmit>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000030e 	.word	0x2000030e
 8002018:	200003a4 	.word	0x200003a4
 800201c:	20000068 	.word	0x20000068
 8002020:	200003ab 	.word	0x200003ab
 8002024:	20000310 	.word	0x20000310
 8002028:	20000005 	.word	0x20000005
 800202c:	200003ae 	.word	0x200003ae
 8002030:	200002dc 	.word	0x200002dc
 8002034:	080080ec 	.word	0x080080ec
 8002038:	20000290 	.word	0x20000290
 800203c:	08008110 	.word	0x08008110
 8002040:	08008128 	.word	0x08008128

08002044 <user_input_pushbutton>:

void user_input_pushbutton(void){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	current_press_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8002048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204c:	4834      	ldr	r0, [pc, #208]	; (8002120 <user_input_pushbutton+0xdc>)
 800204e:	f002 f8d5 	bl	80041fc <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b33      	ldr	r3, [pc, #204]	; (8002124 <user_input_pushbutton+0xe0>)
 8002058:	701a      	strb	r2, [r3, #0]
	if ((prev_press_state == 0) && (current_press_state == 1)){
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <user_input_pushbutton+0xe4>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d157      	bne.n	8002112 <user_input_pushbutton+0xce>
 8002062:	4b30      	ldr	r3, [pc, #192]	; (8002124 <user_input_pushbutton+0xe0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d153      	bne.n	8002112 <user_input_pushbutton+0xce>
		if (disable_single_click == 1){
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <user_input_pushbutton+0xe8>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d103      	bne.n	800207a <user_input_pushbutton+0x36>
			disable_single_click = 0;
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <user_input_pushbutton+0xe8>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e04b      	b.n	8002112 <user_input_pushbutton+0xce>
		}
		else{
			if (fail_flag == 1){
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <user_input_pushbutton+0xec>)
 800207c:	f993 3000 	ldrsb.w	r3, [r3]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d10e      	bne.n	80020a2 <user_input_pushbutton+0x5e>
				initialise_game();
 8002084:	f7ff fabe 	bl	8001604 <initialise_game>
				pause_game = 1;
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <user_input_pushbutton+0xf0>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
				score = 0;
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <user_input_pushbutton+0xf4>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
				fail_flag = 0;
 8002094:	4b26      	ldr	r3, [pc, #152]	; (8002130 <user_input_pushbutton+0xec>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
				main_CLK_autoreload = 20;
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <user_input_pushbutton+0xf8>)
 800209c:	2214      	movs	r2, #20
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e030      	b.n	8002104 <user_input_pushbutton+0xc0>
			}
			else if (fail_flag == -1){
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <user_input_pushbutton+0xec>)
 80020a4:	f993 3000 	ldrsb.w	r3, [r3]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d120      	bne.n	80020f0 <user_input_pushbutton+0xac>
				initialise_game();
 80020ae:	f7ff faa9 	bl	8001604 <initialise_game>
				pause_game = 1;
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <user_input_pushbutton+0xf0>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
				fail_flag = 0;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <user_input_pushbutton+0xec>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
				main_CLK_autoreload = main_CLK_autoreload - 2;
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <user_input_pushbutton+0xf8>)
 80020c0:	f993 3000 	ldrsb.w	r3, [r3]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3b02      	subs	r3, #2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <user_input_pushbutton+0xf8>)
 80020ce:	701a      	strb	r2, [r3, #0]
				memset(MSG, '\0', sizeof(MSG));
 80020d0:	2232      	movs	r2, #50	; 0x32
 80020d2:	2100      	movs	r1, #0
 80020d4:	481a      	ldr	r0, [pc, #104]	; (8002140 <user_input_pushbutton+0xfc>)
 80020d6:	f004 fc21 	bl	800691c <memset>
				sprintf(MSG, "CLK Speed Increased\r\n\r\n");
 80020da:	491a      	ldr	r1, [pc, #104]	; (8002144 <user_input_pushbutton+0x100>)
 80020dc:	4818      	ldr	r0, [pc, #96]	; (8002140 <user_input_pushbutton+0xfc>)
 80020de:	f004 fbfd 	bl	80068dc <siprintf>
				HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80020e2:	2364      	movs	r3, #100	; 0x64
 80020e4:	2232      	movs	r2, #50	; 0x32
 80020e6:	4916      	ldr	r1, [pc, #88]	; (8002140 <user_input_pushbutton+0xfc>)
 80020e8:	4817      	ldr	r0, [pc, #92]	; (8002148 <user_input_pushbutton+0x104>)
 80020ea:	f004 f83b 	bl	8006164 <HAL_UART_Transmit>
 80020ee:	e009      	b.n	8002104 <user_input_pushbutton+0xc0>
			}
			else{
				pause_game = !pause_game;
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <user_input_pushbutton+0xf0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <user_input_pushbutton+0xf0>)
 8002102:	701a      	strb	r2, [r3, #0]
			}
			PADDLE_PWM = PADDLE_PWM_FAIL;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <user_input_pushbutton+0x108>)
 8002106:	781a      	ldrb	r2, [r3, #0]
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <user_input_pushbutton+0x10c>)
 800210a:	701a      	strb	r2, [r3, #0]
			breath_request = 1;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <user_input_pushbutton+0x110>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
		}
	}

	prev_press_state = current_press_state;
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <user_input_pushbutton+0xe0>)
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <user_input_pushbutton+0xe4>)
 8002118:	701a      	strb	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40020000 	.word	0x40020000
 8002124:	20000069 	.word	0x20000069
 8002128:	2000006a 	.word	0x2000006a
 800212c:	200003ac 	.word	0x200003ac
 8002130:	200003b1 	.word	0x200003b1
 8002134:	20000068 	.word	0x20000068
 8002138:	200003ad 	.word	0x200003ad
 800213c:	20000005 	.word	0x20000005
 8002140:	200002dc 	.word	0x200002dc
 8002144:	0800814c 	.word	0x0800814c
 8002148:	20000290 	.word	0x20000290
 800214c:	20000003 	.word	0x20000003
 8002150:	20000001 	.word	0x20000001
 8002154:	200003b2 	.word	0x200003b2

08002158 <random_initial_speed>:

int8_t random_initial_speed(void){
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
	uint8_t randomRaw = RNG % 2;
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <random_initial_speed+0x2c>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	71fb      	strb	r3, [r7, #7]
	if (randomRaw == 1){
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <random_initial_speed+0x1c>
		return 1;
 8002170:	2301      	movs	r3, #1
 8002172:	e001      	b.n	8002178 <random_initial_speed+0x20>
	}
	else{
		return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	20000312 	.word	0x20000312

08002188 <random_initial_pos>:

int8_t random_initial_pos(void){
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
	uint8_t randomRaw = RNG % 3;
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <random_initial_pos+0x44>)
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <random_initial_pos+0x48>)
 8002194:	fba3 1302 	umull	r1, r3, r3, r2
 8002198:	0859      	lsrs	r1, r3, #1
 800219a:	460b      	mov	r3, r1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	440b      	add	r3, r1
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	71fb      	strb	r3, [r7, #7]
	if (randomRaw == 0){
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <random_initial_pos+0x28>
		return 1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e006      	b.n	80021be <random_initial_pos+0x36>
	}
	else if(randomRaw == 1){
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <random_initial_pos+0x34>
		return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e000      	b.n	80021be <random_initial_pos+0x36>
	}
	else{
		return 0;
 80021bc:	2300      	movs	r3, #0
	}
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000312 	.word	0x20000312
 80021d0:	aaaaaaab 	.word	0xaaaaaaab

080021d4 <calculate_blocks>:

void calculate_blocks(void){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
	blocks_left = 0;
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <calculate_blocks+0xbc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= 3; i++){
 80021e0:	2301      	movs	r3, #1
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	e01f      	b.n	8002226 <calculate_blocks+0x52>
		for (uint8_t j = 1; j <= 7; j++){
 80021e6:	2301      	movs	r3, #1
 80021e8:	71bb      	strb	r3, [r7, #6]
 80021ea:	e016      	b.n	800221a <calculate_blocks+0x46>
			if (pointProperties[i][j] == 2){
 80021ec:	79fa      	ldrb	r2, [r7, #7]
 80021ee:	79b9      	ldrb	r1, [r7, #6]
 80021f0:	4828      	ldr	r0, [pc, #160]	; (8002294 <calculate_blocks+0xc0>)
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	4403      	add	r3, r0
 80021fa:	440b      	add	r3, r1
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d108      	bne.n	8002214 <calculate_blocks+0x40>
				blocks_left++;
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <calculate_blocks+0xbc>)
 8002204:	f993 3000 	ldrsb.w	r3, [r3]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3301      	adds	r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	b25a      	sxtb	r2, r3
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <calculate_blocks+0xbc>)
 8002212:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 1; j <= 7; j++){
 8002214:	79bb      	ldrb	r3, [r7, #6]
 8002216:	3301      	adds	r3, #1
 8002218:	71bb      	strb	r3, [r7, #6]
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d9e5      	bls.n	80021ec <calculate_blocks+0x18>
	for (uint8_t i = 1; i <= 3; i++){
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	3301      	adds	r3, #1
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d9dc      	bls.n	80021e6 <calculate_blocks+0x12>
			}
		}
	}
	// Win
	if (blocks_left == 0){
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <calculate_blocks+0xbc>)
 800222e:	f993 3000 	ldrsb.w	r3, [r3]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d127      	bne.n	8002286 <calculate_blocks+0xb2>
		pause_game = 1;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <calculate_blocks+0xc4>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
		Vx = 0; Vy = 0;
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <calculate_blocks+0xc8>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <calculate_blocks+0xcc>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
		fail_flag = -1;
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <calculate_blocks+0xd0>)
 800224a:	22ff      	movs	r2, #255	; 0xff
 800224c:	701a      	strb	r2, [r3, #0]
		score = score + bonus;
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <calculate_blocks+0xd4>)
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <calculate_blocks+0xd8>)
 8002254:	f993 3000 	ldrsb.w	r3, [r3]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4413      	add	r3, r2
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <calculate_blocks+0xd4>)
 8002260:	701a      	strb	r2, [r3, #0]
		memset(MSG, '\0', sizeof(MSG));
 8002262:	2232      	movs	r2, #50	; 0x32
 8002264:	2100      	movs	r1, #0
 8002266:	4812      	ldr	r0, [pc, #72]	; (80022b0 <calculate_blocks+0xdc>)
 8002268:	f004 fb58 	bl	800691c <memset>
		sprintf(MSG, "You WIN ! Score: %d\r\nPress Button to CONTINUE\r\n\r\n", score);
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <calculate_blocks+0xd4>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4910      	ldr	r1, [pc, #64]	; (80022b4 <calculate_blocks+0xe0>)
 8002274:	480e      	ldr	r0, [pc, #56]	; (80022b0 <calculate_blocks+0xdc>)
 8002276:	f004 fb31 	bl	80068dc <siprintf>
		HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 800227a:	2364      	movs	r3, #100	; 0x64
 800227c:	2232      	movs	r2, #50	; 0x32
 800227e:	490c      	ldr	r1, [pc, #48]	; (80022b0 <calculate_blocks+0xdc>)
 8002280:	480d      	ldr	r0, [pc, #52]	; (80022b8 <calculate_blocks+0xe4>)
 8002282:	f003 ff6f 	bl	8006164 <HAL_UART_Transmit>
	}
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000006d 	.word	0x2000006d
 8002294:	2000032c 	.word	0x2000032c
 8002298:	20000068 	.word	0x20000068
 800229c:	200003af 	.word	0x200003af
 80022a0:	200003b0 	.word	0x200003b0
 80022a4:	200003b1 	.word	0x200003b1
 80022a8:	200003ad 	.word	0x200003ad
 80022ac:	200003ae 	.word	0x200003ae
 80022b0:	200002dc 	.word	0x200002dc
 80022b4:	08008164 	.word	0x08008164
 80022b8:	20000290 	.word	0x20000290

080022bc <path_change_joystick>:

void path_change_joystick(void){
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
	if (VRX <= JOYSTICK_LEFT_THR) {
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <path_change_joystick+0x34>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f240 62d4 	movw	r2, #1748	; 0x6d4
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d803      	bhi.n	80022d4 <path_change_joystick+0x18>
		Vx = -1;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <path_change_joystick+0x38>)
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	701a      	strb	r2, [r3, #0]
	}
	else if (VRX >= JOYSTICK_RIGHT_THR){
		Vx = 1;
	}
}
 80022d2:	e008      	b.n	80022e6 <path_change_joystick+0x2a>
	else if (VRX >= JOYSTICK_RIGHT_THR){
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <path_change_joystick+0x34>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f640 122b 	movw	r2, #2347	; 0x92b
 80022dc:	4293      	cmp	r3, r2
 80022de:	d902      	bls.n	80022e6 <path_change_joystick+0x2a>
		Vx = 1;
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <path_change_joystick+0x38>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	2000030e 	.word	0x2000030e
 80022f4:	200003af 	.word	0x200003af

080022f8 <auto_play>:

void auto_play(void){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	if (auto_play_enable == 1){
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <auto_play+0x44>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d119      	bne.n	8002338 <auto_play+0x40>
		if(ball_loc[1] <= 2){
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <auto_play+0x48>)
 8002306:	785b      	ldrb	r3, [r3, #1]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d805      	bhi.n	8002318 <auto_play+0x20>
			paddle_loc[1] = 2;
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <auto_play+0x4c>)
 800230e:	2202      	movs	r2, #2
 8002310:	705a      	strb	r2, [r3, #1]
			update_paddle();
 8002312:	f7ff fb55 	bl	80019c0 <update_paddle>
		else{
			paddle_loc[1] = ball_loc[1];
			update_paddle();
		}
	}
}
 8002316:	e00f      	b.n	8002338 <auto_play+0x40>
		else if(ball_loc[1] >= 6){
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <auto_play+0x48>)
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d905      	bls.n	800232c <auto_play+0x34>
			paddle_loc[1] = 6;
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <auto_play+0x4c>)
 8002322:	2206      	movs	r2, #6
 8002324:	705a      	strb	r2, [r3, #1]
			update_paddle();
 8002326:	f7ff fb4b 	bl	80019c0 <update_paddle>
}
 800232a:	e005      	b.n	8002338 <auto_play+0x40>
			paddle_loc[1] = ball_loc[1];
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <auto_play+0x48>)
 800232e:	785a      	ldrb	r2, [r3, #1]
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <auto_play+0x4c>)
 8002332:	705a      	strb	r2, [r3, #1]
			update_paddle();
 8002334:	f7ff fb44 	bl	80019c0 <update_paddle>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200003ab 	.word	0x200003ab
 8002340:	200003a8 	.word	0x200003a8
 8002344:	200003a4 	.word	0x200003a4

08002348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002350:	e7fe      	b.n	8002350 <Error_Handler+0x8>
	...

08002354 <ISSI_write_reg>:

uint8_t rows[11] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x01, 0x03, 0x05, 0x07, 0x09};

uint8_t transfer_buffer[2];

void ISSI_write_reg(I2C_HandleTypeDef* handler, uint8_t reg, uint8_t data) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af02      	add	r7, sp, #8
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	4613      	mov	r3, r2
 8002362:	70bb      	strb	r3, [r7, #2]
	transfer_buffer[0] = reg;
 8002364:	4a08      	ldr	r2, [pc, #32]	; (8002388 <ISSI_write_reg+0x34>)
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	7013      	strb	r3, [r2, #0]
	transfer_buffer[1] = data;
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <ISSI_write_reg+0x34>)
 800236c:	78bb      	ldrb	r3, [r7, #2]
 800236e:	7053      	strb	r3, [r2, #1]

	HAL_I2C_Master_Transmit(handler, (ADDR << 1), transfer_buffer, 2, TIMEOUT);
 8002370:	2364      	movs	r3, #100	; 0x64
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2302      	movs	r3, #2
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <ISSI_write_reg+0x34>)
 8002378:	21ea      	movs	r1, #234	; 0xea
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f002 f8e6 	bl	800454c <HAL_I2C_Master_Transmit>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200003b4 	.word	0x200003b4

0800238c <ISSI_write_PWM_reg>:

void ISSI_write_PWM_reg(I2C_HandleTypeDef* handler, uint8_t start_reg, uint8_t data_buffer[8]){
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af04      	add	r7, sp, #16
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	460b      	mov	r3, r1
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(handler, (ADDR << 1), start_reg, I2C_MEMADD_SIZE_8BIT, data_buffer, 8, 1000);
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	b29a      	uxth	r2, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	2308      	movs	r3, #8
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2301      	movs	r3, #1
 80023ae:	21ea      	movs	r1, #234	; 0xea
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f002 f9c9 	bl	8004748 <HAL_I2C_Mem_Write>
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <ISSI_init>:

void ISSI_init(I2C_HandleTypeDef* handler){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	// Select Function Reg
	ISSI_write_reg(handler, COMMAND_REGISTER, BANK_FUNCTIONREG);
 80023c8:	220b      	movs	r2, #11
 80023ca:	21fd      	movs	r1, #253	; 0xfd
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffc1 	bl	8002354 <ISSI_write_reg>

	// Shutdown Screen
	ISSI_write_reg(handler, SHUTDOWN, 0x00);
 80023d2:	2200      	movs	r2, #0
 80023d4:	210a      	movs	r1, #10
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ffbc 	bl	8002354 <ISSI_write_reg>

	// Picture Mode
	ISSI_write_reg(handler, MODE_SELECT, 0x00);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ffb7 	bl	8002354 <ISSI_write_reg>

	// Set Fade in / out times
	ISSI_write_reg(handler, BREATH_CONTROL_1, (FADE_OUT_TIME << 4) + FADE_IN_TIME);
 80023e6:	2222      	movs	r2, #34	; 0x22
 80023e8:	2108      	movs	r1, #8
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffb2 	bl	8002354 <ISSI_write_reg>

	// Enable Breath and set Extinguish time
	ISSI_write_reg(handler, BREATH_CONTROL_2, (1 << 4) + EXTINGUISH_TIME);
 80023f0:	2211      	movs	r2, #17
 80023f2:	2109      	movs	r1, #9
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ffad 	bl	8002354 <ISSI_write_reg>

	// Disp frame 0
	ISSI_write_reg(handler, FRAME_SELECT, 0x00);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2101      	movs	r1, #1
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa8 	bl	8002354 <ISSI_write_reg>

	// Shut down audio sync
	ISSI_write_reg(handler, AUDIO_SYNC, 0x00);
 8002404:	2200      	movs	r2, #0
 8002406:	2106      	movs	r1, #6
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ffa3 	bl	8002354 <ISSI_write_reg>

	// Enable Blink
	ISSI_write_reg(handler, DISPLAY_OPTION, BLINK_PERIOD + 0x08); // + 0x08 to turn on
 800240e:	2209      	movs	r2, #9
 8002410:	2105      	movs	r1, #5
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff9e 	bl	8002354 <ISSI_write_reg>

	// Select bank 1
	ISSI_write_reg(handler, COMMAND_REGISTER, BANK_1);
 8002418:	2200      	movs	r2, #0
 800241a:	21fd      	movs	r1, #253	; 0xfd
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff99 	bl	8002354 <ISSI_write_reg>

	// Turn off all LEDs
	for (uint8_t i = 0; i <= 10; i++) {
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
 8002426:	e00a      	b.n	800243e <ISSI_init+0x7e>
		ISSI_write_reg(handler, rows[i], 0x00);
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <ISSI_init+0x100>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	2200      	movs	r2, #0
 8002430:	4619      	mov	r1, r3
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff8e 	bl	8002354 <ISSI_write_reg>
	for (uint8_t i = 0; i <= 10; i++) {
 8002438:	7dfb      	ldrb	r3, [r7, #23]
 800243a:	3301      	adds	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b0a      	cmp	r3, #10
 8002442:	d9f1      	bls.n	8002428 <ISSI_init+0x68>
	}

	// Turn off all Blinking
	for (uint8_t i = 0; i <= 10; i++) {
 8002444:	2300      	movs	r3, #0
 8002446:	75bb      	strb	r3, [r7, #22]
 8002448:	e00c      	b.n	8002464 <ISSI_init+0xa4>
		ISSI_write_reg(handler, rows[i] + 0x12, 0x00);
 800244a:	7dbb      	ldrb	r3, [r7, #22]
 800244c:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <ISSI_init+0x100>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	3312      	adds	r3, #18
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2200      	movs	r2, #0
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff7b 	bl	8002354 <ISSI_write_reg>
	for (uint8_t i = 0; i <= 10; i++) {
 800245e:	7dbb      	ldrb	r3, [r7, #22]
 8002460:	3301      	adds	r3, #1
 8002462:	75bb      	strb	r3, [r7, #22]
 8002464:	7dbb      	ldrb	r3, [r7, #22]
 8002466:	2b0a      	cmp	r3, #10
 8002468:	d9ef      	bls.n	800244a <ISSI_init+0x8a>
	}

	// Set all PWM to INIT_PWM
	for (uint8_t i = 0; i <= 10; i++) {
 800246a:	2300      	movs	r3, #0
 800246c:	757b      	strb	r3, [r7, #21]
 800246e:	e016      	b.n	800249e <ISSI_init+0xde>
		uint8_t data_buffer[8] = {INIT_PWM, INIT_PWM, INIT_PWM, INIT_PWM, INIT_PWM, INIT_PWM, INIT_PWM, INIT_PWM};
 8002470:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <ISSI_init+0x104>)
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800247a:	e883 0003 	stmia.w	r3, {r0, r1}
		ISSI_write_PWM_reg(handler, 0x24 + rows[i] * 0x08, data_buffer);
 800247e:	7d7b      	ldrb	r3, [r7, #21]
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <ISSI_init+0x100>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3324      	adds	r3, #36	; 0x24
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f107 020c 	add.w	r2, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff7a 	bl	800238c <ISSI_write_PWM_reg>
	for (uint8_t i = 0; i <= 10; i++) {
 8002498:	7d7b      	ldrb	r3, [r7, #21]
 800249a:	3301      	adds	r3, #1
 800249c:	757b      	strb	r3, [r7, #21]
 800249e:	7d7b      	ldrb	r3, [r7, #21]
 80024a0:	2b0a      	cmp	r3, #10
 80024a2:	d9e5      	bls.n	8002470 <ISSI_init+0xb0>
	}

	// Select Function Reg
	ISSI_write_reg(handler, COMMAND_REGISTER, BANK_FUNCTIONREG);
 80024a4:	220b      	movs	r2, #11
 80024a6:	21fd      	movs	r1, #253	; 0xfd
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff53 	bl	8002354 <ISSI_write_reg>

	// Disable Shutdown
	ISSI_write_reg(handler, SHUTDOWN, 0x01);
 80024ae:	2201      	movs	r2, #1
 80024b0:	210a      	movs	r1, #10
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff4e 	bl	8002354 <ISSI_write_reg>
}
 80024b8:	bf00      	nop
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000070 	.word	0x20000070
 80024c4:	08008198 	.word	0x08008198

080024c8 <ISSI_send_buffer>:

void ISSI_send_buffer(I2C_HandleTypeDef* handler, uint8_t frameBuffer[11]) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	// Select bank 1
	ISSI_write_reg(handler, COMMAND_REGISTER, BANK_1);
 80024d2:	2200      	movs	r2, #0
 80024d4:	21fd      	movs	r1, #253	; 0xfd
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff3c 	bl	8002354 <ISSI_write_reg>

	// Send buffer
	for (uint8_t i = 0; i <= 10; i++) {
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e00d      	b.n	80024fe <ISSI_send_buffer+0x36>
		ISSI_write_reg(handler, rows[i], frameBuffer[i]);
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <ISSI_send_buffer+0x48>)
 80024e6:	5cd1      	ldrb	r1, [r2, r3]
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff2e 	bl	8002354 <ISSI_write_reg>
	for (uint8_t i = 0; i <= 10; i++) {
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	3301      	adds	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b0a      	cmp	r3, #10
 8002502:	d9ee      	bls.n	80024e2 <ISSI_send_buffer+0x1a>
	}
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000070 	.word	0x20000070

08002514 <ISSI_send_buffer_PWM>:

void ISSI_send_buffer_PWM(I2C_HandleTypeDef* handler, uint8_t PWMBuffer[11][8]){
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
	// Select bank 1
	ISSI_write_reg(handler, COMMAND_REGISTER, BANK_1);
 800251e:	2200      	movs	r2, #0
 8002520:	21fd      	movs	r1, #253	; 0xfd
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ff16 	bl	8002354 <ISSI_write_reg>

	// Send buffer for a whole row
	for (uint8_t i = 0; i <= 10; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	e011      	b.n	8002552 <ISSI_send_buffer_PWM+0x3e>
		ISSI_write_PWM_reg(handler, 0x24 + rows[i] * 0x08, PWMBuffer[i]);
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <ISSI_send_buffer_PWM+0x50>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3324      	adds	r3, #36	; 0x24
 800253a:	b2d9      	uxtb	r1, r3
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	461a      	mov	r2, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ff20 	bl	800238c <ISSI_write_PWM_reg>
	for (uint8_t i = 0; i <= 10; i++) {
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	3301      	adds	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b0a      	cmp	r3, #10
 8002556:	d9ea      	bls.n	800252e <ISSI_send_buffer_PWM+0x1a>
	}
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000070 	.word	0x20000070

08002568 <ISSI_send_buffer_BLINK>:

void ISSI_send_buffer_BLINK(I2C_HandleTypeDef* handler, uint8_t blinkBuffer[11]){
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	// Select bank 1
	ISSI_write_reg(handler, COMMAND_REGISTER, BANK_1);
 8002572:	2200      	movs	r2, #0
 8002574:	21fd      	movs	r1, #253	; 0xfd
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff feec 	bl	8002354 <ISSI_write_reg>

	// Send buffer
	for (uint8_t i = 0; i <= 10; i++) {
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e00f      	b.n	80025a2 <ISSI_send_buffer_BLINK+0x3a>
		ISSI_write_reg(handler, rows[i] + 0x12, blinkBuffer[i]);
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <ISSI_send_buffer_BLINK+0x4c>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	3312      	adds	r3, #18
 800258a:	b2d9      	uxtb	r1, r3
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff fedc 	bl	8002354 <ISSI_write_reg>
	for (uint8_t i = 0; i <= 10; i++) {
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	3301      	adds	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b0a      	cmp	r3, #10
 80025a6:	d9ec      	bls.n	8002582 <ISSI_send_buffer_BLINK+0x1a>
	}
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000070 	.word	0x20000070

080025b8 <ISSI_set_frame>:
	ISSI_write_reg(handler, COMMAND_REGISTER, BANK_FUNCTIONREG);

	ISSI_write_reg(handler, BREATH_CONTROL_2, (enable << 4) + EXTINGUISH_TIME);
}

void ISSI_set_frame(I2C_HandleTypeDef* handler, uint8_t frame){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
	// Select Function Reg
	ISSI_write_reg(handler, COMMAND_REGISTER, BANK_FUNCTIONREG);
 80025c4:	220b      	movs	r2, #11
 80025c6:	21fd      	movs	r1, #253	; 0xfd
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fec3 	bl	8002354 <ISSI_write_reg>

	ISSI_write_reg(handler, FRAME_SELECT, frame);
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	461a      	mov	r2, r3
 80025d2:	2101      	movs	r1, #1
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff febd 	bl	8002354 <ISSI_write_reg>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_MspInit+0x4c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a0f      	ldr	r2, [pc, #60]	; (8002630 <HAL_MspInit+0x4c>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_MspInit+0x4c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_MspInit+0x4c>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_MspInit+0x4c>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_MspInit+0x4c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a40      	ldr	r2, [pc, #256]	; (8002754 <HAL_ADC_MspInit+0x120>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d179      	bne.n	800274a <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <HAL_ADC_MspInit+0x124>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a3e      	ldr	r2, [pc, #248]	; (8002758 <HAL_ADC_MspInit+0x124>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <HAL_ADC_MspInit+0x124>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_ADC_MspInit+0x124>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a37      	ldr	r2, [pc, #220]	; (8002758 <HAL_ADC_MspInit+0x124>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b35      	ldr	r3, [pc, #212]	; (8002758 <HAL_ADC_MspInit+0x124>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_ADC_MspInit+0x124>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a30      	ldr	r2, [pc, #192]	; (8002758 <HAL_ADC_MspInit+0x124>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <HAL_ADC_MspInit+0x124>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ae:	2303      	movs	r3, #3
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4827      	ldr	r0, [pc, #156]	; (800275c <HAL_ADC_MspInit+0x128>)
 80026be:	f001 fc19 	bl	8003ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026c2:	2301      	movs	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c6:	2303      	movs	r3, #3
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4822      	ldr	r0, [pc, #136]	; (8002760 <HAL_ADC_MspInit+0x12c>)
 80026d6:	f001 fc0d 	bl	8003ef4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <HAL_ADC_MspInit+0x130>)
 80026dc:	4a22      	ldr	r2, [pc, #136]	; (8002768 <HAL_ADC_MspInit+0x134>)
 80026de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_ADC_MspInit+0x130>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_ADC_MspInit+0x130>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_ADC_MspInit+0x130>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_ADC_MspInit+0x130>)
 80026f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <HAL_ADC_MspInit+0x130>)
 80026fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002700:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_ADC_MspInit+0x130>)
 8002704:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002708:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_ADC_MspInit+0x130>)
 800270c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002710:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_ADC_MspInit+0x130>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_ADC_MspInit+0x130>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800271e:	4811      	ldr	r0, [pc, #68]	; (8002764 <HAL_ADC_MspInit+0x130>)
 8002720:	f001 f878 	bl	8003814 <HAL_DMA_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800272a:	f7ff fe0d 	bl	8002348 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_ADC_MspInit+0x130>)
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
 8002734:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_ADC_MspInit+0x130>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2101      	movs	r1, #1
 800273e:	2012      	movs	r0, #18
 8002740:	f001 f831 	bl	80037a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002744:	2012      	movs	r0, #18
 8002746:	f001 f84a 	bl	80037de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800274a:	bf00      	nop
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012000 	.word	0x40012000
 8002758:	40023800 	.word	0x40023800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	2000014c 	.word	0x2000014c
 8002768:	40026410 	.word	0x40026410

0800276c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_I2C_MspInit+0x84>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12b      	bne.n	80027e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_I2C_MspInit+0x88>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_I2C_MspInit+0x88>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_I2C_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027aa:	23c0      	movs	r3, #192	; 0xc0
 80027ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ae:	2312      	movs	r3, #18
 80027b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b6:	2303      	movs	r3, #3
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ba:	2304      	movs	r3, #4
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <HAL_I2C_MspInit+0x8c>)
 80027c6:	f001 fb95 	bl	8003ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_I2C_MspInit+0x88>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <HAL_I2C_MspInit+0x88>)
 80027d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_I2C_MspInit+0x88>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	; 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40005400 	.word	0x40005400
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020400 	.word	0x40020400

080027fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d116      	bne.n	800283c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_TIM_Base_MspInit+0x80>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_TIM_Base_MspInit+0x80>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_TIM_Base_MspInit+0x80>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	201c      	movs	r0, #28
 8002830:	f000 ffb9 	bl	80037a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002834:	201c      	movs	r0, #28
 8002836:	f000 ffd2 	bl	80037de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800283a:	e01a      	b.n	8002872 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <HAL_TIM_Base_MspInit+0x84>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d115      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_TIM_Base_MspInit+0x80>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_TIM_Base_MspInit+0x80>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_TIM_Base_MspInit+0x80>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	201d      	movs	r0, #29
 8002868:	f000 ff9d 	bl	80037a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800286c:	201d      	movs	r0, #29
 800286e:	f000 ffb6 	bl	80037de <HAL_NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40000400 	.word	0x40000400

08002884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a19      	ldr	r2, [pc, #100]	; (8002908 <HAL_UART_MspInit+0x84>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d12b      	bne.n	80028fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_UART_MspInit+0x88>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a17      	ldr	r2, [pc, #92]	; (800290c <HAL_UART_MspInit+0x88>)
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_UART_MspInit+0x88>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_UART_MspInit+0x88>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <HAL_UART_MspInit+0x88>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_UART_MspInit+0x88>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028de:	230c      	movs	r3, #12
 80028e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ee:	2307      	movs	r3, #7
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <HAL_UART_MspInit+0x8c>)
 80028fa:	f001 fafb 	bl	8003ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40004400 	.word	0x40004400
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000

08002914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002918:	e7fe      	b.n	8002918 <NMI_Handler+0x4>

0800291a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <HardFault_Handler+0x4>

08002920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <MemManage_Handler+0x4>

08002926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292a:	e7fe      	b.n	800292a <BusFault_Handler+0x4>

0800292c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <UsageFault_Handler+0x4>

08002932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002960:	f000 f8f6 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <ADC_IRQHandler+0x10>)
 800296e:	f000 f976 	bl	8002c5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000104 	.word	0x20000104

0800297c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <TIM2_IRQHandler+0x10>)
 8002982:	f003 f817 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000200 	.word	0x20000200

08002990 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <TIM3_IRQHandler+0x10>)
 8002996:	f003 f80d 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000248 	.word	0x20000248

080029a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80029a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029ac:	f001 fc72 	bl	8004294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <DMA2_Stream0_IRQHandler+0x10>)
 80029ba:	f001 f831 	bl	8003a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000014c 	.word	0x2000014c

080029c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d0:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <_sbrk+0x5c>)
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <_sbrk+0x60>)
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <_sbrk+0x64>)
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <_sbrk+0x68>)
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <_sbrk+0x64>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f8:	f003 ff98 	bl	800692c <__errno>
 80029fc:	4603      	mov	r3, r0
 80029fe:	220c      	movs	r2, #12
 8002a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	e009      	b.n	8002a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <_sbrk+0x64>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <_sbrk+0x64>)
 8002a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20018000 	.word	0x20018000
 8002a28:	00000400 	.word	0x00000400
 8002a2c:	200003b8 	.word	0x200003b8
 8002a30:	20000508 	.word	0x20000508

08002a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <SystemInit+0x20>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <SystemInit+0x20>)
 8002a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <Reset_Handler>:
 8002a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a90 <LoopFillZerobss+0xe>
 8002a5c:	f7ff ffea 	bl	8002a34 <SystemInit>
 8002a60:	480c      	ldr	r0, [pc, #48]	; (8002a94 <LoopFillZerobss+0x12>)
 8002a62:	490d      	ldr	r1, [pc, #52]	; (8002a98 <LoopFillZerobss+0x16>)
 8002a64:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <LoopFillZerobss+0x1a>)
 8002a66:	2300      	movs	r3, #0
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:
 8002a6a:	58d4      	ldr	r4, [r2, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:
 8002a70:	18c4      	adds	r4, r0, r3
 8002a72:	428c      	cmp	r4, r1
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <LoopFillZerobss+0x1e>)
 8002a78:	4c0a      	ldr	r4, [pc, #40]	; (8002aa4 <LoopFillZerobss+0x22>)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:
 8002a82:	42a2      	cmp	r2, r4
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>
 8002a86:	f003 ff57 	bl	8006938 <__libc_init_array>
 8002a8a:	f7fe fa2f 	bl	8000eec <main>
 8002a8e:	4770      	bx	lr
 8002a90:	20018000 	.word	0x20018000
 8002a94:	20000000 	.word	0x20000000
 8002a98:	200000e8 	.word	0x200000e8
 8002a9c:	08008238 	.word	0x08008238
 8002aa0:	200000e8 	.word	0x200000e8
 8002aa4:	20000508 	.word	0x20000508

08002aa8 <DMA1_Stream0_IRQHandler>:
 8002aa8:	e7fe      	b.n	8002aa8 <DMA1_Stream0_IRQHandler>
	...

08002aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_Init+0x40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_Init+0x40>)
 8002ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <HAL_Init+0x40>)
 8002ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <HAL_Init+0x40>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f000 fe5b 	bl	8003790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f000 f808 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae0:	f7ff fd80 	bl	80025e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_InitTick+0x54>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0x58>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fe73 	bl	80037fa <HAL_SYSTICK_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00e      	b.n	8002b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d80a      	bhi.n	8002b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b24:	2200      	movs	r2, #0
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f000 fe3b 	bl	80037a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b30:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <HAL_InitTick+0x5c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	2000007c 	.word	0x2000007c
 8002b48:	20000084 	.word	0x20000084
 8002b4c:	20000080 	.word	0x20000080

08002b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_IncTick+0x20>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_IncTick+0x24>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_IncTick+0x24>)
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000084 	.word	0x20000084
 8002b74:	200003bc 	.word	0x200003bc

08002b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_GetTick+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	200003bc 	.word	0x200003bc

08002b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff ffee 	bl	8002b78 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d005      	beq.n	8002bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_Delay+0x44>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bb6:	bf00      	nop
 8002bb8:	f7ff ffde 	bl	8002b78 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8f7      	bhi.n	8002bb8 <HAL_Delay+0x28>
  {
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000084 	.word	0x20000084

08002bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e033      	b.n	8002c56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fd1c 	bl	8002634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c1e:	f023 0302 	bic.w	r3, r3, #2
 8002c22:	f043 0202 	orr.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fb58 	bl	80032e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
 8002c46:	e001      	b.n	8002c4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d049      	beq.n	8002d28 <HAL_ADC_IRQHandler+0xca>
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d046      	beq.n	8002d28 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d12b      	bne.n	8002d18 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d127      	bne.n	8002d18 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d119      	bne.n	8002d18 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0220 	bic.w	r2, r2, #32
 8002cf2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7fe f8bb 	bl	8000e94 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f06f 0212 	mvn.w	r2, #18
 8002d26:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d057      	beq.n	8002dee <HAL_ADC_IRQHandler+0x190>
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d054      	beq.n	8002dee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d139      	bne.n	8002dde <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d006      	beq.n	8002d86 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d12b      	bne.n	8002dde <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d124      	bne.n	8002dde <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11d      	bne.n	8002dde <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d119      	bne.n	8002dde <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fbfc 	bl	80035dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 020c 	mvn.w	r2, #12
 8002dec:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x1d6>
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d014      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10d      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f925 	bl	8003074 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f06f 0201 	mvn.w	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e42:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d015      	beq.n	8002e76 <HAL_ADC_IRQHandler+0x218>
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d012      	beq.n	8002e76 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f043 0202 	orr.w	r2, r3, #2
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0220 	mvn.w	r2, #32
 8002e64:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f90e 	bl	8003088 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0220 	mvn.w	r2, #32
 8002e74:	601a      	str	r2, [r3, #0]
  }
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Start_DMA+0x1e>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0ce      	b.n	800303c <HAL_ADC_Start_DMA+0x1bc>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d018      	beq.n	8002ee6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ec4:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_ADC_Start_DMA+0x1c4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5f      	ldr	r2, [pc, #380]	; (8003048 <HAL_ADC_Start_DMA+0x1c8>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9a      	lsrs	r2, r3, #18
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ed8:	e002      	b.n	8002ee0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f9      	bne.n	8002eda <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef4:	d107      	bne.n	8002f06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f04:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	f040 8086 	bne.w	8003022 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d106      	bne.n	8002f64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f023 0206 	bic.w	r2, r3, #6
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
 8002f62:	e002      	b.n	8002f6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f72:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_ADC_Start_DMA+0x1cc>)
 8002f74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	4a35      	ldr	r2, [pc, #212]	; (8003050 <HAL_ADC_Start_DMA+0x1d0>)
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	4a34      	ldr	r2, [pc, #208]	; (8003054 <HAL_ADC_Start_DMA+0x1d4>)
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	4a33      	ldr	r2, [pc, #204]	; (8003058 <HAL_ADC_Start_DMA+0x1d8>)
 8002f8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fa6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	334c      	adds	r3, #76	; 0x4c
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f000 fcd2 	bl	8003970 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d129      	bne.n	800303a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	e020      	b.n	800303a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_ADC_Start_DMA+0x1dc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d11b      	bne.n	800303a <HAL_ADC_Start_DMA+0x1ba>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d114      	bne.n	800303a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	e00b      	b.n	800303a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f043 0210 	orr.w	r2, r3, #16
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	2000007c 	.word	0x2000007c
 8003048:	431bde83 	.word	0x431bde83
 800304c:	40012300 	.word	0x40012300
 8003050:	080034d9 	.word	0x080034d9
 8003054:	08003593 	.word	0x08003593
 8003058:	080035af 	.word	0x080035af
 800305c:	40012000 	.word	0x40012000

08003060 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x1c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e105      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x228>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	d925      	bls.n	8003114 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68d9      	ldr	r1, [r3, #12]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	3b1e      	subs	r3, #30
 80030de:	2207      	movs	r2, #7
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43da      	mvns	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	400a      	ands	r2, r1
 80030ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68d9      	ldr	r1, [r3, #12]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4618      	mov	r0, r3
 8003100:	4603      	mov	r3, r0
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4403      	add	r3, r0
 8003106:	3b1e      	subs	r3, #30
 8003108:	409a      	lsls	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	e022      	b.n	800315a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6919      	ldr	r1, [r3, #16]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	2207      	movs	r2, #7
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	400a      	ands	r2, r1
 8003136:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6919      	ldr	r1, [r3, #16]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	4618      	mov	r0, r3
 800314a:	4603      	mov	r3, r0
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4403      	add	r3, r0
 8003150:	409a      	lsls	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b06      	cmp	r3, #6
 8003160:	d824      	bhi.n	80031ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3b05      	subs	r3, #5
 8003174:	221f      	movs	r2, #31
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	400a      	ands	r2, r1
 8003182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	4618      	mov	r0, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	3b05      	subs	r3, #5
 800319e:	fa00 f203 	lsl.w	r2, r0, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34
 80031aa:	e04c      	b.n	8003246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d824      	bhi.n	80031fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	3b23      	subs	r3, #35	; 0x23
 80031c6:	221f      	movs	r2, #31
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43da      	mvns	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	400a      	ands	r2, r1
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b23      	subs	r3, #35	; 0x23
 80031f0:	fa00 f203 	lsl.w	r2, r0, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
 80031fc:	e023      	b.n	8003246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3b41      	subs	r3, #65	; 0x41
 8003210:	221f      	movs	r2, #31
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	400a      	ands	r2, r1
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b41      	subs	r3, #65	; 0x41
 800323a:	fa00 f203 	lsl.w	r2, r0, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_ADC_ConfigChannel+0x234>)
 8003248:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <HAL_ADC_ConfigChannel+0x238>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d109      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1cc>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b12      	cmp	r3, #18
 800325a:	d105      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_ADC_ConfigChannel+0x238>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d123      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x21e>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b10      	cmp	r3, #16
 8003278:	d003      	beq.n	8003282 <HAL_ADC_ConfigChannel+0x1e6>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b11      	cmp	r3, #17
 8003280:	d11b      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b10      	cmp	r3, #16
 8003294:	d111      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_ADC_ConfigChannel+0x23c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_ADC_ConfigChannel+0x240>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	0c9a      	lsrs	r2, r3, #18
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032ac:	e002      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f9      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40012300 	.word	0x40012300
 80032d4:	40012000 	.word	0x40012000
 80032d8:	2000007c 	.word	0x2000007c
 80032dc:	431bde83 	.word	0x431bde83

080032e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e8:	4b79      	ldr	r3, [pc, #484]	; (80034d0 <ADC_Init+0x1f0>)
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	021a      	lsls	r2, r3, #8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <ADC_Init+0x1f4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d022      	beq.n	80033be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	e00f      	b.n	80033de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0202 	bic.w	r2, r2, #2
 80033ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7e1b      	ldrb	r3, [r3, #24]
 80033f8:	005a      	lsls	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01b      	beq.n	8003444 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800342a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	3b01      	subs	r3, #1
 8003438:	035a      	lsls	r2, r3, #13
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	e007      	b.n	8003454 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003452:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	3b01      	subs	r3, #1
 8003470:	051a      	lsls	r2, r3, #20
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6899      	ldr	r1, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003496:	025a      	lsls	r2, r3, #9
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6899      	ldr	r1, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	029a      	lsls	r2, r3, #10
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012300 	.word	0x40012300
 80034d4:	0f000001 	.word	0x0f000001

080034d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d13c      	bne.n	800356c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d12b      	bne.n	8003564 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003510:	2b00      	cmp	r3, #0
 8003512:	d127      	bne.n	8003564 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800352c:	2b00      	cmp	r3, #0
 800352e:	d119      	bne.n	8003564 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0220 	bic.w	r2, r2, #32
 800353e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f7fd fc95 	bl	8000e94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800356a:	e00e      	b.n	800358a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff fd85 	bl	8003088 <HAL_ADC_ErrorCallback>
}
 800357e:	e004      	b.n	800358a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff fd5d 	bl	8003060 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f043 0204 	orr.w	r2, r3, #4
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff fd5a 	bl	8003088 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800360c:	4013      	ands	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800361c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003622:	4a04      	ldr	r2, [pc, #16]	; (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	60d3      	str	r3, [r2, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <__NVIC_GetPriorityGrouping+0x18>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	f003 0307 	and.w	r3, r3, #7
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db0b      	blt.n	800367e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4907      	ldr	r1, [pc, #28]	; (800368c <__NVIC_EnableIRQ+0x38>)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2001      	movs	r0, #1
 8003676:	fa00 f202 	lsl.w	r2, r0, r2
 800367a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000e100 	.word	0xe000e100

08003690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	db0a      	blt.n	80036ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	490c      	ldr	r1, [pc, #48]	; (80036dc <__NVIC_SetPriority+0x4c>)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	0112      	lsls	r2, r2, #4
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	440b      	add	r3, r1
 80036b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b8:	e00a      	b.n	80036d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4908      	ldr	r1, [pc, #32]	; (80036e0 <__NVIC_SetPriority+0x50>)
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3b04      	subs	r3, #4
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	440b      	add	r3, r1
 80036ce:	761a      	strb	r2, [r3, #24]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000e100 	.word	0xe000e100
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f1c3 0307 	rsb	r3, r3, #7
 80036fe:	2b04      	cmp	r3, #4
 8003700:	bf28      	it	cs
 8003702:	2304      	movcs	r3, #4
 8003704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3304      	adds	r3, #4
 800370a:	2b06      	cmp	r3, #6
 800370c:	d902      	bls.n	8003714 <NVIC_EncodePriority+0x30>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3b03      	subs	r3, #3
 8003712:	e000      	b.n	8003716 <NVIC_EncodePriority+0x32>
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	f04f 32ff 	mov.w	r2, #4294967295
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	401a      	ands	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800372c:	f04f 31ff 	mov.w	r1, #4294967295
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	43d9      	mvns	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	4313      	orrs	r3, r2
         );
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3b01      	subs	r3, #1
 8003758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800375c:	d301      	bcc.n	8003762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800375e:	2301      	movs	r3, #1
 8003760:	e00f      	b.n	8003782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003762:	4a0a      	ldr	r2, [pc, #40]	; (800378c <SysTick_Config+0x40>)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3b01      	subs	r3, #1
 8003768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800376a:	210f      	movs	r1, #15
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	f7ff ff8e 	bl	8003690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <SysTick_Config+0x40>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <SysTick_Config+0x40>)
 800377c:	2207      	movs	r2, #7
 800377e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	e000e010 	.word	0xe000e010

08003790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff ff29 	bl	80035f0 <__NVIC_SetPriorityGrouping>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	4603      	mov	r3, r0
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037b8:	f7ff ff3e 	bl	8003638 <__NVIC_GetPriorityGrouping>
 80037bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	6978      	ldr	r0, [r7, #20]
 80037c4:	f7ff ff8e 	bl	80036e4 <NVIC_EncodePriority>
 80037c8:	4602      	mov	r2, r0
 80037ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff5d 	bl	8003690 <__NVIC_SetPriority>
}
 80037d6:	bf00      	nop
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff31 	bl	8003654 <__NVIC_EnableIRQ>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff ffa2 	bl	800374c <SysTick_Config>
 8003808:	4603      	mov	r3, r0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7ff f9aa 	bl	8002b78 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e099      	b.n	8003964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003850:	e00f      	b.n	8003872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003852:	f7ff f991 	bl	8002b78 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b05      	cmp	r3, #5
 800385e:	d908      	bls.n	8003872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2203      	movs	r2, #3
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e078      	b.n	8003964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e8      	bne.n	8003852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4b38      	ldr	r3, [pc, #224]	; (800396c <HAL_DMA_Init+0x158>)
 800388c:	4013      	ands	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800389e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d107      	bne.n	80038dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	4313      	orrs	r3, r2
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0307 	bic.w	r3, r3, #7
 80038f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	2b04      	cmp	r3, #4
 8003904:	d117      	bne.n	8003936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa6f 	bl	8003dfc <DMA_CheckFifoParam>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003932:	2301      	movs	r3, #1
 8003934:	e016      	b.n	8003964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fa26 	bl	8003d90 <DMA_CalcBaseAndBitshift>
 8003944:	4603      	mov	r3, r0
 8003946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394c:	223f      	movs	r2, #63	; 0x3f
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	f010803f 	.word	0xf010803f

08003970 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_DMA_Start_IT+0x26>
 8003992:	2302      	movs	r3, #2
 8003994:	e040      	b.n	8003a18 <HAL_DMA_Start_IT+0xa8>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d12f      	bne.n	8003a0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f9b8 	bl	8003d34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	223f      	movs	r2, #63	; 0x3f
 80039ca:	409a      	lsls	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0216 	orr.w	r2, r2, #22
 80039de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0208 	orr.w	r2, r2, #8
 80039f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e005      	b.n	8003a16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a2c:	4b8e      	ldr	r3, [pc, #568]	; (8003c68 <HAL_DMA_IRQHandler+0x248>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a8e      	ldr	r2, [pc, #568]	; (8003c6c <HAL_DMA_IRQHandler+0x24c>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0a9b      	lsrs	r3, r3, #10
 8003a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01a      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d013      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	2208      	movs	r2, #8
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	2201      	movs	r2, #1
 8003a92:	409a      	lsls	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d012      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	2201      	movs	r2, #1
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f043 0204 	orr.w	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2210      	movs	r2, #16
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d043      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d03c      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d108      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d024      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
 8003b4e:	e01f      	b.n	8003b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01b      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
 8003b60:	e016      	b.n	8003b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0208 	bic.w	r2, r2, #8
 8003b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	2220      	movs	r2, #32
 8003b96:	409a      	lsls	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 808f 	beq.w	8003cc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8087 	beq.w	8003cc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d136      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0216 	bic.w	r2, r2, #22
 8003bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_DMA_IRQHandler+0x1da>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0208 	bic.w	r2, r2, #8
 8003c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	223f      	movs	r2, #63	; 0x3f
 8003c10:	409a      	lsls	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d07e      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
        }
        return;
 8003c36:	e079      	b.n	8003d2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01d      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10d      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d031      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
 8003c64:	e02c      	b.n	8003cc0 <HAL_DMA_IRQHandler+0x2a0>
 8003c66:	bf00      	nop
 8003c68:	2000007c 	.word	0x2000007c
 8003c6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d023      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
 8003c80:	e01e      	b.n	8003cc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0210 	bic.w	r2, r2, #16
 8003c9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d032      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d022      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2205      	movs	r2, #5
 8003cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d307      	bcc.n	8003d08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f2      	bne.n	8003cec <HAL_DMA_IRQHandler+0x2cc>
 8003d06:	e000      	b.n	8003d0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	4798      	blx	r3
 8003d2a:	e000      	b.n	8003d2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d2c:	bf00      	nop
    }
  }
}
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d108      	bne.n	8003d74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d72:	e007      	b.n	8003d84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3b10      	subs	r3, #16
 8003da0:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <DMA_CalcBaseAndBitshift+0x64>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003daa:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <DMA_CalcBaseAndBitshift+0x68>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d909      	bls.n	8003dd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	659a      	str	r2, [r3, #88]	; 0x58
 8003dd0:	e007      	b.n	8003de2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	aaaaaaab 	.word	0xaaaaaaab
 8003df8:	080081b8 	.word	0x080081b8

08003dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11f      	bne.n	8003e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d856      	bhi.n	8003eca <DMA_CheckFifoParam+0xce>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <DMA_CheckFifoParam+0x28>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e47 	.word	0x08003e47
 8003e2c:	08003e35 	.word	0x08003e35
 8003e30:	08003ecb 	.word	0x08003ecb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d046      	beq.n	8003ece <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e44:	e043      	b.n	8003ece <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e4e:	d140      	bne.n	8003ed2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e54:	e03d      	b.n	8003ed2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	d121      	bne.n	8003ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d837      	bhi.n	8003ed6 <DMA_CheckFifoParam+0xda>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <DMA_CheckFifoParam+0x70>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e83 	.word	0x08003e83
 8003e74:	08003e7d 	.word	0x08003e7d
 8003e78:	08003e95 	.word	0x08003e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e80:	e030      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d025      	beq.n	8003eda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e92:	e022      	b.n	8003eda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e9c:	d11f      	bne.n	8003ede <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ea2:	e01c      	b.n	8003ede <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d903      	bls.n	8003eb2 <DMA_CheckFifoParam+0xb6>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d003      	beq.n	8003eb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eb0:	e018      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb6:	e015      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec8:	e00b      	b.n	8003ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e00a      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e008      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e006      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e004      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003eda:	bf00      	nop
 8003edc:	e002      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ee2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop

08003ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b089      	sub	sp, #36	; 0x24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e159      	b.n	80041c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f10:	2201      	movs	r2, #1
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	f040 8148 	bne.w	80041be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d005      	beq.n	8003f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d130      	bne.n	8003fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	2203      	movs	r2, #3
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 0201 	and.w	r2, r3, #1
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d017      	beq.n	8003fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d123      	bne.n	8004038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	08da      	lsrs	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3208      	adds	r2, #8
 8003ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	220f      	movs	r2, #15
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	08da      	lsrs	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3208      	adds	r2, #8
 8004032:	69b9      	ldr	r1, [r7, #24]
 8004034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	2203      	movs	r2, #3
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0203 	and.w	r2, r3, #3
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a2 	beq.w	80041be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_GPIO_Init+0x2e8>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	4a56      	ldr	r2, [pc, #344]	; (80041dc <HAL_GPIO_Init+0x2e8>)
 8004084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004088:	6453      	str	r3, [r2, #68]	; 0x44
 800408a:	4b54      	ldr	r3, [pc, #336]	; (80041dc <HAL_GPIO_Init+0x2e8>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004096:	4a52      	ldr	r2, [pc, #328]	; (80041e0 <HAL_GPIO_Init+0x2ec>)
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	3302      	adds	r3, #2
 800409e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	220f      	movs	r2, #15
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a49      	ldr	r2, [pc, #292]	; (80041e4 <HAL_GPIO_Init+0x2f0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d019      	beq.n	80040f6 <HAL_GPIO_Init+0x202>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a48      	ldr	r2, [pc, #288]	; (80041e8 <HAL_GPIO_Init+0x2f4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_GPIO_Init+0x1fe>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a47      	ldr	r2, [pc, #284]	; (80041ec <HAL_GPIO_Init+0x2f8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00d      	beq.n	80040ee <HAL_GPIO_Init+0x1fa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a46      	ldr	r2, [pc, #280]	; (80041f0 <HAL_GPIO_Init+0x2fc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <HAL_GPIO_Init+0x1f6>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a45      	ldr	r2, [pc, #276]	; (80041f4 <HAL_GPIO_Init+0x300>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_GPIO_Init+0x1f2>
 80040e2:	2304      	movs	r3, #4
 80040e4:	e008      	b.n	80040f8 <HAL_GPIO_Init+0x204>
 80040e6:	2307      	movs	r3, #7
 80040e8:	e006      	b.n	80040f8 <HAL_GPIO_Init+0x204>
 80040ea:	2303      	movs	r3, #3
 80040ec:	e004      	b.n	80040f8 <HAL_GPIO_Init+0x204>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e002      	b.n	80040f8 <HAL_GPIO_Init+0x204>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_GPIO_Init+0x204>
 80040f6:	2300      	movs	r3, #0
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	f002 0203 	and.w	r2, r2, #3
 80040fe:	0092      	lsls	r2, r2, #2
 8004100:	4093      	lsls	r3, r2
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004108:	4935      	ldr	r1, [pc, #212]	; (80041e0 <HAL_GPIO_Init+0x2ec>)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	3302      	adds	r3, #2
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004116:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <HAL_GPIO_Init+0x304>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800413a:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <HAL_GPIO_Init+0x304>)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004140:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <HAL_GPIO_Init+0x304>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004164:	4a24      	ldr	r2, [pc, #144]	; (80041f8 <HAL_GPIO_Init+0x304>)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800416a:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <HAL_GPIO_Init+0x304>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800418e:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <HAL_GPIO_Init+0x304>)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004194:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <HAL_GPIO_Init+0x304>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	43db      	mvns	r3, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b8:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <HAL_GPIO_Init+0x304>)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3301      	adds	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b0f      	cmp	r3, #15
 80041c8:	f67f aea2 	bls.w	8003f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3724      	adds	r7, #36	; 0x24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40013800 	.word	0x40013800
 80041e4:	40020000 	.word	0x40020000
 80041e8:	40020400 	.word	0x40020400
 80041ec:	40020800 	.word	0x40020800
 80041f0:	40020c00 	.word	0x40020c00
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40013c00 	.word	0x40013c00

080041fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	887b      	ldrh	r3, [r7, #2]
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e001      	b.n	800421e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
 8004238:	4613      	mov	r3, r2
 800423a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800423c:	787b      	ldrb	r3, [r7, #1]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004248:	e003      	b.n	8004252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800424a:	887b      	ldrh	r3, [r7, #2]
 800424c:	041a      	lsls	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	619a      	str	r2, [r3, #24]
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004270:	887a      	ldrh	r2, [r7, #2]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4013      	ands	r3, r2
 8004276:	041a      	lsls	r2, r3, #16
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	43d9      	mvns	r1, r3
 800427c:	887b      	ldrh	r3, [r7, #2]
 800427e:	400b      	ands	r3, r1
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	619a      	str	r2, [r3, #24]
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042aa:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd f978 	bl	80015a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40013c00 	.word	0x40013c00

080042c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e12b      	b.n	800452e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fe fa3e 	bl	800276c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0201 	bic.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004328:	f001 fa6a 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 800432c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4a81      	ldr	r2, [pc, #516]	; (8004538 <HAL_I2C_Init+0x274>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d807      	bhi.n	8004348 <HAL_I2C_Init+0x84>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a80      	ldr	r2, [pc, #512]	; (800453c <HAL_I2C_Init+0x278>)
 800433c:	4293      	cmp	r3, r2
 800433e:	bf94      	ite	ls
 8004340:	2301      	movls	r3, #1
 8004342:	2300      	movhi	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e006      	b.n	8004356 <HAL_I2C_Init+0x92>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a7d      	ldr	r2, [pc, #500]	; (8004540 <HAL_I2C_Init+0x27c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	bf94      	ite	ls
 8004350:	2301      	movls	r3, #1
 8004352:	2300      	movhi	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0e7      	b.n	800452e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_I2C_Init+0x280>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	0c9b      	lsrs	r3, r3, #18
 8004368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4a6a      	ldr	r2, [pc, #424]	; (8004538 <HAL_I2C_Init+0x274>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d802      	bhi.n	8004398 <HAL_I2C_Init+0xd4>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	3301      	adds	r3, #1
 8004396:	e009      	b.n	80043ac <HAL_I2C_Init+0xe8>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	4a69      	ldr	r2, [pc, #420]	; (8004548 <HAL_I2C_Init+0x284>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	3301      	adds	r3, #1
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	495c      	ldr	r1, [pc, #368]	; (8004538 <HAL_I2C_Init+0x274>)
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d819      	bhi.n	8004400 <HAL_I2C_Init+0x13c>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1e59      	subs	r1, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043da:	1c59      	adds	r1, r3, #1
 80043dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043e0:	400b      	ands	r3, r1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_I2C_Init+0x138>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1e59      	subs	r1, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fa:	e051      	b.n	80044a0 <HAL_I2C_Init+0x1dc>
 80043fc:	2304      	movs	r3, #4
 80043fe:	e04f      	b.n	80044a0 <HAL_I2C_Init+0x1dc>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d111      	bne.n	800442c <HAL_I2C_Init+0x168>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1e58      	subs	r0, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	440b      	add	r3, r1
 8004416:	fbb0 f3f3 	udiv	r3, r0, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e012      	b.n	8004452 <HAL_I2C_Init+0x18e>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e58      	subs	r0, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	0099      	lsls	r1, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Init+0x196>
 8004456:	2301      	movs	r3, #1
 8004458:	e022      	b.n	80044a0 <HAL_I2C_Init+0x1dc>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10e      	bne.n	8004480 <HAL_I2C_Init+0x1bc>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1e58      	subs	r0, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6859      	ldr	r1, [r3, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	440b      	add	r3, r1
 8004470:	fbb0 f3f3 	udiv	r3, r0, r3
 8004474:	3301      	adds	r3, #1
 8004476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447e:	e00f      	b.n	80044a0 <HAL_I2C_Init+0x1dc>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1e58      	subs	r0, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	0099      	lsls	r1, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	fbb0 f3f3 	udiv	r3, r0, r3
 8004496:	3301      	adds	r3, #1
 8004498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	6809      	ldr	r1, [r1, #0]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6911      	ldr	r1, [r2, #16]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68d2      	ldr	r2, [r2, #12]
 80044da:	4311      	orrs	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	000186a0 	.word	0x000186a0
 800453c:	001e847f 	.word	0x001e847f
 8004540:	003d08ff 	.word	0x003d08ff
 8004544:	431bde83 	.word	0x431bde83
 8004548:	10624dd3 	.word	0x10624dd3

0800454c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	461a      	mov	r2, r3
 8004558:	460b      	mov	r3, r1
 800455a:	817b      	strh	r3, [r7, #10]
 800455c:	4613      	mov	r3, r2
 800455e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004560:	f7fe fb0a 	bl	8002b78 <HAL_GetTick>
 8004564:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b20      	cmp	r3, #32
 8004570:	f040 80e0 	bne.w	8004734 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2319      	movs	r3, #25
 800457a:	2201      	movs	r2, #1
 800457c:	4970      	ldr	r1, [pc, #448]	; (8004740 <HAL_I2C_Master_Transmit+0x1f4>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 faf4 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
 800458c:	e0d3      	b.n	8004736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_I2C_Master_Transmit+0x50>
 8004598:	2302      	movs	r3, #2
 800459a:	e0cc      	b.n	8004736 <HAL_I2C_Master_Transmit+0x1ea>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d007      	beq.n	80045c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2221      	movs	r2, #33	; 0x21
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2210      	movs	r2, #16
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	893a      	ldrh	r2, [r7, #8]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a50      	ldr	r2, [pc, #320]	; (8004744 <HAL_I2C_Master_Transmit+0x1f8>)
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004604:	8979      	ldrh	r1, [r7, #10]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f996 	bl	800493c <I2C_MasterRequestWrite>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e08d      	b.n	8004736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004630:	e066      	b.n	8004700 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	6a39      	ldr	r1, [r7, #32]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fbb2 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b04      	cmp	r3, #4
 8004648:	d107      	bne.n	800465a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06b      	b.n	8004736 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b04      	cmp	r3, #4
 800469a:	d11b      	bne.n	80046d4 <HAL_I2C_Master_Transmit+0x188>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	6a39      	ldr	r1, [r7, #32]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fba9 	bl	8004e30 <I2C_WaitOnBTFFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d107      	bne.n	80046fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e01a      	b.n	8004736 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d194      	bne.n	8004632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	00100002 	.word	0x00100002
 8004744:	ffff0000 	.word	0xffff0000

08004748 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	4608      	mov	r0, r1
 8004752:	4611      	mov	r1, r2
 8004754:	461a      	mov	r2, r3
 8004756:	4603      	mov	r3, r0
 8004758:	817b      	strh	r3, [r7, #10]
 800475a:	460b      	mov	r3, r1
 800475c:	813b      	strh	r3, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004762:	f7fe fa09 	bl	8002b78 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	f040 80d9 	bne.w	8004928 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2319      	movs	r3, #25
 800477c:	2201      	movs	r2, #1
 800477e:	496d      	ldr	r1, [pc, #436]	; (8004934 <HAL_I2C_Mem_Write+0x1ec>)
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f9f3 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
 800478e:	e0cc      	b.n	800492a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_I2C_Mem_Write+0x56>
 800479a:	2302      	movs	r3, #2
 800479c:	e0c5      	b.n	800492a <HAL_I2C_Mem_Write+0x1e2>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d007      	beq.n	80047c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2221      	movs	r2, #33	; 0x21
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a4d      	ldr	r2, [pc, #308]	; (8004938 <HAL_I2C_Mem_Write+0x1f0>)
 8004804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004806:	88f8      	ldrh	r0, [r7, #6]
 8004808:	893a      	ldrh	r2, [r7, #8]
 800480a:	8979      	ldrh	r1, [r7, #10]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4603      	mov	r3, r0
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f912 	bl	8004a40 <I2C_RequestMemoryWrite>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d052      	beq.n	80048c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e081      	b.n	800492a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fab8 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b04      	cmp	r3, #4
 800483c:	d107      	bne.n	800484e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e06b      	b.n	800492a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d11b      	bne.n	80048c8 <HAL_I2C_Mem_Write+0x180>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d017      	beq.n	80048c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1aa      	bne.n	8004826 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 faab 	bl	8004e30 <I2C_WaitOnBTFFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00d      	beq.n	80048fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d107      	bne.n	80048f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e016      	b.n	800492a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	00100002 	.word	0x00100002
 8004938:	ffff0000 	.word	0xffff0000

0800493c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	460b      	mov	r3, r1
 800494a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d006      	beq.n	8004966 <I2C_MasterRequestWrite+0x2a>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d003      	beq.n	8004966 <I2C_MasterRequestWrite+0x2a>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004964:	d108      	bne.n	8004978 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e00b      	b.n	8004990 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	2b12      	cmp	r3, #18
 800497e:	d107      	bne.n	8004990 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f8e5 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b6:	d103      	bne.n	80049c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e035      	b.n	8004a30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049cc:	d108      	bne.n	80049e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ce:	897b      	ldrh	r3, [r7, #10]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049dc:	611a      	str	r2, [r3, #16]
 80049de:	e01b      	b.n	8004a18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049e0:	897b      	ldrh	r3, [r7, #10]
 80049e2:	11db      	asrs	r3, r3, #7
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0306 	and.w	r3, r3, #6
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f063 030f 	orn	r3, r3, #15
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	490e      	ldr	r1, [pc, #56]	; (8004a38 <I2C_MasterRequestWrite+0xfc>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f92e 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e010      	b.n	8004a30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a0e:	897b      	ldrh	r3, [r7, #10]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4907      	ldr	r1, [pc, #28]	; (8004a3c <I2C_MasterRequestWrite+0x100>)
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f91e 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	00010008 	.word	0x00010008
 8004a3c:	00010002 	.word	0x00010002

08004a40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	817b      	strh	r3, [r7, #10]
 8004a52:	460b      	mov	r3, r1
 8004a54:	813b      	strh	r3, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f878 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00d      	beq.n	8004a9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a90:	d103      	bne.n	8004a9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e05f      	b.n	8004b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a9e:	897b      	ldrh	r3, [r7, #10]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	6a3a      	ldr	r2, [r7, #32]
 8004ab2:	492d      	ldr	r1, [pc, #180]	; (8004b68 <I2C_RequestMemoryWrite+0x128>)
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f8d3 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e04c      	b.n	8004b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	6a39      	ldr	r1, [r7, #32]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f95e 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d107      	bne.n	8004b02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e02b      	b.n	8004b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d105      	bne.n	8004b18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0c:	893b      	ldrh	r3, [r7, #8]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	611a      	str	r2, [r3, #16]
 8004b16:	e021      	b.n	8004b5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	6a39      	ldr	r1, [r7, #32]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f938 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d107      	bne.n	8004b4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e005      	b.n	8004b5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b52:	893b      	ldrh	r3, [r7, #8]
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	00010002 	.word	0x00010002

08004b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b7c:	e048      	b.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d044      	beq.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fd fff7 	bl	8002b78 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d139      	bne.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10d      	bne.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	43da      	mvns	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	e00c      	b.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	43da      	mvns	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d116      	bne.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f043 0220 	orr.w	r2, r3, #32
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e023      	b.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10d      	bne.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	43da      	mvns	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	e00c      	b.n	8004c50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d093      	beq.n	8004b7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6e:	e071      	b.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7e:	d123      	bne.n	8004cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f043 0204 	orr.w	r2, r3, #4
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e067      	b.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d041      	beq.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd0:	f7fd ff52 	bl	8002b78 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d136      	bne.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10c      	bne.n	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	e00b      	b.n	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	43da      	mvns	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e021      	b.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	0c1b      	lsrs	r3, r3, #16
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10c      	bne.n	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	43da      	mvns	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e00b      	b.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	43da      	mvns	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf14      	ite	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	2300      	moveq	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f47f af6d 	bne.w	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dac:	e034      	b.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f886 	bl	8004ec0 <I2C_IsAcknowledgeFailed>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e034      	b.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d028      	beq.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fd fed7 	bl	8002b78 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11d      	bne.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b80      	cmp	r3, #128	; 0x80
 8004de8:	d016      	beq.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e007      	b.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d1c3      	bne.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e3c:	e034      	b.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f83e 	bl	8004ec0 <I2C_IsAcknowledgeFailed>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e034      	b.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d028      	beq.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fd fe8f 	bl	8002b78 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11d      	bne.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d016      	beq.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e007      	b.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d1c3      	bne.n	8004e3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed6:	d11b      	bne.n	8004f10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ee0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	f043 0204 	orr.w	r2, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e267      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d075      	beq.n	800502a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f3e:	4b88      	ldr	r3, [pc, #544]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d00c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f4a:	4b85      	ldr	r3, [pc, #532]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d112      	bne.n	8004f7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f56:	4b82      	ldr	r3, [pc, #520]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f62:	d10b      	bne.n	8004f7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f64:	4b7e      	ldr	r3, [pc, #504]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d05b      	beq.n	8005028 <HAL_RCC_OscConfig+0x108>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d157      	bne.n	8005028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e242      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f84:	d106      	bne.n	8004f94 <HAL_RCC_OscConfig+0x74>
 8004f86:	4b76      	ldr	r3, [pc, #472]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a75      	ldr	r2, [pc, #468]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e01d      	b.n	8004fd0 <HAL_RCC_OscConfig+0xb0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x98>
 8004f9e:	4b70      	ldr	r3, [pc, #448]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6f      	ldr	r2, [pc, #444]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6c      	ldr	r2, [pc, #432]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e00b      	b.n	8004fd0 <HAL_RCC_OscConfig+0xb0>
 8004fb8:	4b69      	ldr	r3, [pc, #420]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a68      	ldr	r2, [pc, #416]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b66      	ldr	r3, [pc, #408]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a65      	ldr	r2, [pc, #404]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d013      	beq.n	8005000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fd fdce 	bl	8002b78 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fd fdca 	bl	8002b78 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e207      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	4b5b      	ldr	r3, [pc, #364]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0xc0>
 8004ffe:	e014      	b.n	800502a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fd fdba 	bl	8002b78 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005008:	f7fd fdb6 	bl	8002b78 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e1f3      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	4b51      	ldr	r3, [pc, #324]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0xe8>
 8005026:	e000      	b.n	800502a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d063      	beq.n	80050fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005036:	4b4a      	ldr	r3, [pc, #296]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800504a:	2b08      	cmp	r3, #8
 800504c:	d11c      	bne.n	8005088 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504e:	4b44      	ldr	r3, [pc, #272]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d116      	bne.n	8005088 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505a:	4b41      	ldr	r3, [pc, #260]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_RCC_OscConfig+0x152>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d001      	beq.n	8005072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e1c7      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005072:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4937      	ldr	r1, [pc, #220]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8005082:	4313      	orrs	r3, r2
 8005084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005086:	e03a      	b.n	80050fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005090:	4b34      	ldr	r3, [pc, #208]	; (8005164 <HAL_RCC_OscConfig+0x244>)
 8005092:	2201      	movs	r2, #1
 8005094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005096:	f7fd fd6f 	bl	8002b78 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800509e:	f7fd fd6b 	bl	8002b78 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e1a8      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b0:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050bc:	4b28      	ldr	r3, [pc, #160]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4925      	ldr	r1, [pc, #148]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]
 80050d0:	e015      	b.n	80050fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <HAL_RCC_OscConfig+0x244>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fd fd4e 	bl	8002b78 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e0:	f7fd fd4a 	bl	8002b78 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e187      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f2:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d036      	beq.n	8005178 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <HAL_RCC_OscConfig+0x248>)
 8005114:	2201      	movs	r2, #1
 8005116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fd fd2e 	bl	8002b78 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005120:	f7fd fd2a 	bl	8002b78 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e167      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_OscConfig+0x240>)
 8005134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCC_OscConfig+0x200>
 800513e:	e01b      	b.n	8005178 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_OscConfig+0x248>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005146:	f7fd fd17 	bl	8002b78 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800514c:	e00e      	b.n	800516c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800514e:	f7fd fd13 	bl	8002b78 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d907      	bls.n	800516c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e150      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
 8005160:	40023800 	.word	0x40023800
 8005164:	42470000 	.word	0x42470000
 8005168:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	4b88      	ldr	r3, [pc, #544]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1ea      	bne.n	800514e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 8097 	beq.w	80052b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800518a:	4b81      	ldr	r3, [pc, #516]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10f      	bne.n	80051b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	4b7d      	ldr	r3, [pc, #500]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	4a7c      	ldr	r2, [pc, #496]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6413      	str	r3, [r2, #64]	; 0x40
 80051a6:	4b7a      	ldr	r3, [pc, #488]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b2:	2301      	movs	r3, #1
 80051b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b6:	4b77      	ldr	r3, [pc, #476]	; (8005394 <HAL_RCC_OscConfig+0x474>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d118      	bne.n	80051f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051c2:	4b74      	ldr	r3, [pc, #464]	; (8005394 <HAL_RCC_OscConfig+0x474>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a73      	ldr	r2, [pc, #460]	; (8005394 <HAL_RCC_OscConfig+0x474>)
 80051c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ce:	f7fd fcd3 	bl	8002b78 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d6:	f7fd fccf 	bl	8002b78 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e10c      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	4b6a      	ldr	r3, [pc, #424]	; (8005394 <HAL_RCC_OscConfig+0x474>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d106      	bne.n	800520a <HAL_RCC_OscConfig+0x2ea>
 80051fc:	4b64      	ldr	r3, [pc, #400]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	4a63      	ldr	r2, [pc, #396]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6713      	str	r3, [r2, #112]	; 0x70
 8005208:	e01c      	b.n	8005244 <HAL_RCC_OscConfig+0x324>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b05      	cmp	r3, #5
 8005210:	d10c      	bne.n	800522c <HAL_RCC_OscConfig+0x30c>
 8005212:	4b5f      	ldr	r3, [pc, #380]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005216:	4a5e      	ldr	r2, [pc, #376]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	6713      	str	r3, [r2, #112]	; 0x70
 800521e:	4b5c      	ldr	r3, [pc, #368]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	4a5b      	ldr	r2, [pc, #364]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	6713      	str	r3, [r2, #112]	; 0x70
 800522a:	e00b      	b.n	8005244 <HAL_RCC_OscConfig+0x324>
 800522c:	4b58      	ldr	r3, [pc, #352]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a57      	ldr	r2, [pc, #348]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	4b55      	ldr	r3, [pc, #340]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a54      	ldr	r2, [pc, #336]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 800523e:	f023 0304 	bic.w	r3, r3, #4
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d015      	beq.n	8005278 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd fc94 	bl	8002b78 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005252:	e00a      	b.n	800526a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005254:	f7fd fc90 	bl	8002b78 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e0cb      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526a:	4b49      	ldr	r3, [pc, #292]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ee      	beq.n	8005254 <HAL_RCC_OscConfig+0x334>
 8005276:	e014      	b.n	80052a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005278:	f7fd fc7e 	bl	8002b78 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527e:	e00a      	b.n	8005296 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005280:	f7fd fc7a 	bl	8002b78 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	; 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e0b5      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005296:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1ee      	bne.n	8005280 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d105      	bne.n	80052b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a8:	4b39      	ldr	r3, [pc, #228]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	4a38      	ldr	r2, [pc, #224]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 80052ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80a1 	beq.w	8005400 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052be:	4b34      	ldr	r3, [pc, #208]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d05c      	beq.n	8005384 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d141      	bne.n	8005356 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d2:	4b31      	ldr	r3, [pc, #196]	; (8005398 <HAL_RCC_OscConfig+0x478>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d8:	f7fd fc4e 	bl	8002b78 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fd fc4a 	bl	8002b78 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e087      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	4b27      	ldr	r3, [pc, #156]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	019b      	lsls	r3, r3, #6
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	3b01      	subs	r3, #1
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	061b      	lsls	r3, r3, #24
 8005322:	491b      	ldr	r1, [pc, #108]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005324:	4313      	orrs	r3, r2
 8005326:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <HAL_RCC_OscConfig+0x478>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532e:	f7fd fc23 	bl	8002b78 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005336:	f7fd fc1f 	bl	8002b78 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e05c      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005348:	4b11      	ldr	r3, [pc, #68]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x416>
 8005354:	e054      	b.n	8005400 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <HAL_RCC_OscConfig+0x478>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fd fc0c 	bl	8002b78 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005364:	f7fd fc08 	bl	8002b78 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e045      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCC_OscConfig+0x470>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x444>
 8005382:	e03d      	b.n	8005400 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d107      	bne.n	800539c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e038      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
 8005390:	40023800 	.word	0x40023800
 8005394:	40007000 	.word	0x40007000
 8005398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800539c:	4b1b      	ldr	r3, [pc, #108]	; (800540c <HAL_RCC_OscConfig+0x4ec>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d028      	beq.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d121      	bne.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d11a      	bne.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053cc:	4013      	ands	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d111      	bne.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	3b01      	subs	r3, #1
 80053e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800

08005410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0cc      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d90c      	bls.n	800544c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b65      	ldr	r3, [pc, #404]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0b8      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005464:	4b59      	ldr	r3, [pc, #356]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4a58      	ldr	r2, [pc, #352]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800546e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800547c:	4b53      	ldr	r3, [pc, #332]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4a52      	ldr	r2, [pc, #328]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b50      	ldr	r3, [pc, #320]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	494d      	ldr	r1, [pc, #308]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d044      	beq.n	8005530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d107      	bne.n	80054be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b47      	ldr	r3, [pc, #284]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d119      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d003      	beq.n	80054ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ce:	4b3f      	ldr	r3, [pc, #252]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e06f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054de:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e067      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ee:	4b37      	ldr	r3, [pc, #220]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f023 0203 	bic.w	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4934      	ldr	r1, [pc, #208]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005500:	f7fd fb3a 	bl	8002b78 <HAL_GetTick>
 8005504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005506:	e00a      	b.n	800551e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005508:	f7fd fb36 	bl	8002b78 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	; 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e04f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	4b2b      	ldr	r3, [pc, #172]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 020c 	and.w	r2, r3, #12
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	429a      	cmp	r2, r3
 800552e:	d1eb      	bne.n	8005508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d20c      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b20      	ldr	r3, [pc, #128]	; (80055c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e032      	b.n	80055be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005564:	4b19      	ldr	r3, [pc, #100]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4916      	ldr	r1, [pc, #88]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	490e      	ldr	r1, [pc, #56]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005596:	f000 f821 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 800559a:	4602      	mov	r2, r0
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	490a      	ldr	r1, [pc, #40]	; (80055d0 <HAL_RCC_ClockConfig+0x1c0>)
 80055a8:	5ccb      	ldrb	r3, [r1, r3]
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055b2:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd fa9a 	bl	8002af0 <HAL_InitTick>

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40023c00 	.word	0x40023c00
 80055cc:	40023800 	.word	0x40023800
 80055d0:	080081a0 	.word	0x080081a0
 80055d4:	2000007c 	.word	0x2000007c
 80055d8:	20000080 	.word	0x20000080

080055dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b094      	sub	sp, #80	; 0x50
 80055e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	647b      	str	r3, [r7, #68]	; 0x44
 80055e8:	2300      	movs	r3, #0
 80055ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ec:	2300      	movs	r3, #0
 80055ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f4:	4b79      	ldr	r3, [pc, #484]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d00d      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x40>
 8005600:	2b08      	cmp	r3, #8
 8005602:	f200 80e1 	bhi.w	80057c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x34>
 800560a:	2b04      	cmp	r3, #4
 800560c:	d003      	beq.n	8005616 <HAL_RCC_GetSysClockFreq+0x3a>
 800560e:	e0db      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005610:	4b73      	ldr	r3, [pc, #460]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005612:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005614:	e0db      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005616:	4b73      	ldr	r3, [pc, #460]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800561a:	e0d8      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800561c:	4b6f      	ldr	r3, [pc, #444]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005626:	4b6d      	ldr	r3, [pc, #436]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d063      	beq.n	80056fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005632:	4b6a      	ldr	r3, [pc, #424]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	2200      	movs	r2, #0
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
 800563c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	633b      	str	r3, [r7, #48]	; 0x30
 8005646:	2300      	movs	r3, #0
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
 800564a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	0159      	lsls	r1, r3, #5
 800565c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005660:	0150      	lsls	r0, r2, #5
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4621      	mov	r1, r4
 8005668:	1a51      	subs	r1, r2, r1
 800566a:	6139      	str	r1, [r7, #16]
 800566c:	4629      	mov	r1, r5
 800566e:	eb63 0301 	sbc.w	r3, r3, r1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005680:	4659      	mov	r1, fp
 8005682:	018b      	lsls	r3, r1, #6
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800568a:	4651      	mov	r1, sl
 800568c:	018a      	lsls	r2, r1, #6
 800568e:	4651      	mov	r1, sl
 8005690:	ebb2 0801 	subs.w	r8, r2, r1
 8005694:	4659      	mov	r1, fp
 8005696:	eb63 0901 	sbc.w	r9, r3, r1
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ae:	4690      	mov	r8, r2
 80056b0:	4699      	mov	r9, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	eb18 0303 	adds.w	r3, r8, r3
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	462b      	mov	r3, r5
 80056bc:	eb49 0303 	adc.w	r3, r9, r3
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ce:	4629      	mov	r1, r5
 80056d0:	024b      	lsls	r3, r1, #9
 80056d2:	4621      	mov	r1, r4
 80056d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056d8:	4621      	mov	r1, r4
 80056da:	024a      	lsls	r2, r1, #9
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e2:	2200      	movs	r2, #0
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056ec:	f7fb fa54 	bl	8000b98 <__aeabi_uldivmod>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4613      	mov	r3, r2
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f8:	e058      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fa:	4b38      	ldr	r3, [pc, #224]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	099b      	lsrs	r3, r3, #6
 8005700:	2200      	movs	r2, #0
 8005702:	4618      	mov	r0, r3
 8005704:	4611      	mov	r1, r2
 8005706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800570a:	623b      	str	r3, [r7, #32]
 800570c:	2300      	movs	r3, #0
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	f04f 0000 	mov.w	r0, #0
 800571c:	f04f 0100 	mov.w	r1, #0
 8005720:	0159      	lsls	r1, r3, #5
 8005722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005726:	0150      	lsls	r0, r2, #5
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4641      	mov	r1, r8
 800572e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005732:	4649      	mov	r1, r9
 8005734:	eb63 0b01 	sbc.w	fp, r3, r1
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800574c:	ebb2 040a 	subs.w	r4, r2, sl
 8005750:	eb63 050b 	sbc.w	r5, r3, fp
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	00eb      	lsls	r3, r5, #3
 800575e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005762:	00e2      	lsls	r2, r4, #3
 8005764:	4614      	mov	r4, r2
 8005766:	461d      	mov	r5, r3
 8005768:	4643      	mov	r3, r8
 800576a:	18e3      	adds	r3, r4, r3
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	464b      	mov	r3, r9
 8005770:	eb45 0303 	adc.w	r3, r5, r3
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005782:	4629      	mov	r1, r5
 8005784:	028b      	lsls	r3, r1, #10
 8005786:	4621      	mov	r1, r4
 8005788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800578c:	4621      	mov	r1, r4
 800578e:	028a      	lsls	r2, r1, #10
 8005790:	4610      	mov	r0, r2
 8005792:	4619      	mov	r1, r3
 8005794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005796:	2200      	movs	r2, #0
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	61fa      	str	r2, [r7, #28]
 800579c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a0:	f7fb f9fa 	bl	8000b98 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_RCC_GetSysClockFreq+0x200>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	3301      	adds	r3, #1
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057c6:	e002      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3750      	adds	r7, #80	; 0x50
 80057d4:	46bd      	mov	sp, r7
 80057d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800
 80057e0:	00f42400 	.word	0x00f42400
 80057e4:	007a1200 	.word	0x007a1200

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	2000007c 	.word	0x2000007c

08005800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005804:	f7ff fff0 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0a9b      	lsrs	r3, r3, #10
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4903      	ldr	r1, [pc, #12]	; (8005824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	080081b0 	.word	0x080081b0

08005828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800582c:	f7ff ffdc 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005830:	4602      	mov	r2, r0
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	0b5b      	lsrs	r3, r3, #13
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4903      	ldr	r1, [pc, #12]	; (800584c <HAL_RCC_GetPCLK2Freq+0x24>)
 800583e:	5ccb      	ldrb	r3, [r1, r3]
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40023800 	.word	0x40023800
 800584c:	080081b0 	.word	0x080081b0

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e041      	b.n	80058e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc ffc0 	bl	80027fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 fa70 	bl	8005d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d001      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e044      	b.n	8005992 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d018      	beq.n	800595c <HAL_TIM_Base_Start_IT+0x6c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d013      	beq.n	800595c <HAL_TIM_Base_Start_IT+0x6c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1a      	ldr	r2, [pc, #104]	; (80059a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00e      	beq.n	800595c <HAL_TIM_Base_Start_IT+0x6c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d009      	beq.n	800595c <HAL_TIM_Base_Start_IT+0x6c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a17      	ldr	r2, [pc, #92]	; (80059ac <HAL_TIM_Base_Start_IT+0xbc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_TIM_Base_Start_IT+0x6c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d111      	bne.n	8005980 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b06      	cmp	r3, #6
 800596c:	d010      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	e007      	b.n	8005990 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000

080059b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d020      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01b      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0202 	mvn.w	r2, #2
 80059e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f999 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f98b 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f99c 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d020      	beq.n	8005a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01b      	beq.n	8005a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0204 	mvn.w	r2, #4
 8005a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f973 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f965 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f976 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d020      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01b      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0208 	mvn.w	r2, #8
 8005a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2204      	movs	r2, #4
 8005a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f94d 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005a9c:	e005      	b.n	8005aaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f93f 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f950 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d020      	beq.n	8005afc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01b      	beq.n	8005afc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0210 	mvn.w	r2, #16
 8005acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f927 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005ae8:	e005      	b.n	8005af6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f919 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f92a 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00c      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0201 	mvn.w	r2, #1
 8005b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fb fcc0 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00c      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fab6 	bl	80060b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f8fb 	bl	8005d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0220 	mvn.w	r2, #32
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa88 	bl	800609c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e0b4      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x186>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be8:	d03e      	beq.n	8005c68 <HAL_TIM_ConfigClockSource+0xd4>
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	f200 8087 	bhi.w	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf6:	f000 8086 	beq.w	8005d06 <HAL_TIM_ConfigClockSource+0x172>
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d87f      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c00:	2b70      	cmp	r3, #112	; 0x70
 8005c02:	d01a      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0xa6>
 8005c04:	2b70      	cmp	r3, #112	; 0x70
 8005c06:	d87b      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c08:	2b60      	cmp	r3, #96	; 0x60
 8005c0a:	d050      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x11a>
 8005c0c:	2b60      	cmp	r3, #96	; 0x60
 8005c0e:	d877      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c10:	2b50      	cmp	r3, #80	; 0x50
 8005c12:	d03c      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0xfa>
 8005c14:	2b50      	cmp	r3, #80	; 0x50
 8005c16:	d873      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d058      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x13a>
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d86f      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c20:	2b30      	cmp	r3, #48	; 0x30
 8005c22:	d064      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d86b      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d060      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d867      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d05c      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d05a      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x15a>
 8005c38:	e062      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c4a:	f000 f999 	bl	8005f80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	609a      	str	r2, [r3, #8]
      break;
 8005c66:	e04f      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c78:	f000 f982 	bl	8005f80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c8a:	609a      	str	r2, [r3, #8]
      break;
 8005c8c:	e03c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f000 f8f6 	bl	8005e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2150      	movs	r1, #80	; 0x50
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f94f 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 8005cac:	e02c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f000 f915 	bl	8005eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2160      	movs	r1, #96	; 0x60
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f93f 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 8005ccc:	e01c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 f8d6 	bl	8005e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2140      	movs	r1, #64	; 0x40
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f92f 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 8005cec:	e00c      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f000 f926 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 8005cfe:	e003      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      break;
 8005d04:	e000      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3a      	ldr	r2, [pc, #232]	; (8005e70 <TIM_Base_SetConfig+0xfc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00f      	beq.n	8005dac <TIM_Base_SetConfig+0x38>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d00b      	beq.n	8005dac <TIM_Base_SetConfig+0x38>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a37      	ldr	r2, [pc, #220]	; (8005e74 <TIM_Base_SetConfig+0x100>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d007      	beq.n	8005dac <TIM_Base_SetConfig+0x38>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a36      	ldr	r2, [pc, #216]	; (8005e78 <TIM_Base_SetConfig+0x104>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_Base_SetConfig+0x38>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a35      	ldr	r2, [pc, #212]	; (8005e7c <TIM_Base_SetConfig+0x108>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d108      	bne.n	8005dbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <TIM_Base_SetConfig+0xfc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01b      	beq.n	8005dfe <TIM_Base_SetConfig+0x8a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dcc:	d017      	beq.n	8005dfe <TIM_Base_SetConfig+0x8a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <TIM_Base_SetConfig+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <TIM_Base_SetConfig+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <TIM_Base_SetConfig+0x104>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00f      	beq.n	8005dfe <TIM_Base_SetConfig+0x8a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <TIM_Base_SetConfig+0x108>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00b      	beq.n	8005dfe <TIM_Base_SetConfig+0x8a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <TIM_Base_SetConfig+0x10c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d007      	beq.n	8005dfe <TIM_Base_SetConfig+0x8a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a24      	ldr	r2, [pc, #144]	; (8005e84 <TIM_Base_SetConfig+0x110>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_Base_SetConfig+0x8a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a23      	ldr	r2, [pc, #140]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d108      	bne.n	8005e10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a0e      	ldr	r2, [pc, #56]	; (8005e70 <TIM_Base_SetConfig+0xfc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d103      	bne.n	8005e44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d105      	bne.n	8005e62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f023 0201 	bic.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	611a      	str	r2, [r3, #16]
  }
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800
 8005e7c:	40000c00 	.word	0x40000c00
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800

08005e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0201 	bic.w	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 030a 	bic.w	r3, r3, #10
 8005ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f023 0210 	bic.w	r2, r3, #16
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	031b      	lsls	r3, r3, #12
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f043 0307 	orr.w	r3, r3, #7
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	609a      	str	r2, [r3, #8]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	021a      	lsls	r2, r3, #8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e050      	b.n	800607a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d018      	beq.n	800604e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d013      	beq.n	800604e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00e      	beq.n	800604e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a16      	ldr	r2, [pc, #88]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d009      	beq.n	800604e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a13      	ldr	r2, [pc, #76]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10c      	bne.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	4313      	orrs	r3, r2
 800605e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40010000 	.word	0x40010000
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800
 8006094:	40000c00 	.word	0x40000c00
 8006098:	40014000 	.word	0x40014000

0800609c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e042      	b.n	800615c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fc fbca 	bl	8002884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2224      	movs	r2, #36	; 0x24
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f973 	bl	80063f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800611c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695a      	ldr	r2, [r3, #20]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800612c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800613c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b20      	cmp	r3, #32
 8006182:	d175      	bne.n	8006270 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_UART_Transmit+0x2c>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e06e      	b.n	8006272 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2221      	movs	r2, #33	; 0x21
 800619e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a2:	f7fc fce9 	bl	8002b78 <HAL_GetTick>
 80061a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	88fa      	ldrh	r2, [r7, #6]
 80061ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061bc:	d108      	bne.n	80061d0 <HAL_UART_Transmit+0x6c>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	e003      	b.n	80061d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061d8:	e02e      	b.n	8006238 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f848 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e03a      	b.n	8006272 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	3302      	adds	r3, #2
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	e007      	b.n	800622a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	3301      	adds	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1cb      	bne.n	80061da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2200      	movs	r2, #0
 800624a:	2140      	movs	r1, #64	; 0x40
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f814 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d005      	beq.n	8006264 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e006      	b.n	8006272 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e000      	b.n	8006272 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	e03b      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d037      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006294:	f7fc fc70 	bl	8002b78 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <UART_WaitOnFlagUntilTimeout+0x30>
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e03a      	b.n	8006324 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d023      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b80      	cmp	r3, #128	; 0x80
 80062c0:	d020      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d01d      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d116      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f81d 	bl	800632c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2208      	movs	r2, #8
 80062f6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e00f      	b.n	8006324 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4013      	ands	r3, r2
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	429a      	cmp	r2, r3
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	429a      	cmp	r2, r3
 8006320:	d0b4      	beq.n	800628c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b095      	sub	sp, #84	; 0x54
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800634a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006354:	643a      	str	r2, [r7, #64]	; 0x40
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800635a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3314      	adds	r3, #20
 800636e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	61fb      	str	r3, [r7, #28]
   return(result);
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f023 0301 	bic.w	r3, r3, #1
 800637e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3314      	adds	r3, #20
 8006386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006388:	62fa      	str	r2, [r7, #44]	; 0x2c
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800638e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e5      	bne.n	8006368 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d119      	bne.n	80063d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f023 0310 	bic.w	r3, r3, #16
 80063ba:	647b      	str	r3, [r7, #68]	; 0x44
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c4:	61ba      	str	r2, [r7, #24]
 80063c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6979      	ldr	r1, [r7, #20]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	613b      	str	r3, [r7, #16]
   return(result);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063e6:	bf00      	nop
 80063e8:	3754      	adds	r7, #84	; 0x54
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f8:	b0c0      	sub	sp, #256	; 0x100
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	68d9      	ldr	r1, [r3, #12]
 8006412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	ea40 0301 	orr.w	r3, r0, r1
 800641c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800641e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	431a      	orrs	r2, r3
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	431a      	orrs	r2, r3
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800644c:	f021 010c 	bic.w	r1, r1, #12
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800645a:	430b      	orrs	r3, r1
 800645c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800646a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646e:	6999      	ldr	r1, [r3, #24]
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	ea40 0301 	orr.w	r3, r0, r1
 800647a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4b8f      	ldr	r3, [pc, #572]	; (80066c0 <UART_SetConfig+0x2cc>)
 8006484:	429a      	cmp	r2, r3
 8006486:	d005      	beq.n	8006494 <UART_SetConfig+0xa0>
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4b8d      	ldr	r3, [pc, #564]	; (80066c4 <UART_SetConfig+0x2d0>)
 8006490:	429a      	cmp	r2, r3
 8006492:	d104      	bne.n	800649e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006494:	f7ff f9c8 	bl	8005828 <HAL_RCC_GetPCLK2Freq>
 8006498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800649c:	e003      	b.n	80064a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800649e:	f7ff f9af 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 80064a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b0:	f040 810c 	bne.w	80066cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064c6:	4622      	mov	r2, r4
 80064c8:	462b      	mov	r3, r5
 80064ca:	1891      	adds	r1, r2, r2
 80064cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80064ce:	415b      	adcs	r3, r3
 80064d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064d6:	4621      	mov	r1, r4
 80064d8:	eb12 0801 	adds.w	r8, r2, r1
 80064dc:	4629      	mov	r1, r5
 80064de:	eb43 0901 	adc.w	r9, r3, r1
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064f6:	4690      	mov	r8, r2
 80064f8:	4699      	mov	r9, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	eb18 0303 	adds.w	r3, r8, r3
 8006500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006504:	462b      	mov	r3, r5
 8006506:	eb49 0303 	adc.w	r3, r9, r3
 800650a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800651a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800651e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006522:	460b      	mov	r3, r1
 8006524:	18db      	adds	r3, r3, r3
 8006526:	653b      	str	r3, [r7, #80]	; 0x50
 8006528:	4613      	mov	r3, r2
 800652a:	eb42 0303 	adc.w	r3, r2, r3
 800652e:	657b      	str	r3, [r7, #84]	; 0x54
 8006530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006538:	f7fa fb2e 	bl	8000b98 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4b61      	ldr	r3, [pc, #388]	; (80066c8 <UART_SetConfig+0x2d4>)
 8006542:	fba3 2302 	umull	r2, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	011c      	lsls	r4, r3, #4
 800654a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006554:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006558:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	1891      	adds	r1, r2, r2
 8006562:	64b9      	str	r1, [r7, #72]	; 0x48
 8006564:	415b      	adcs	r3, r3
 8006566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800656c:	4641      	mov	r1, r8
 800656e:	eb12 0a01 	adds.w	sl, r2, r1
 8006572:	4649      	mov	r1, r9
 8006574:	eb43 0b01 	adc.w	fp, r3, r1
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006584:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800658c:	4692      	mov	sl, r2
 800658e:	469b      	mov	fp, r3
 8006590:	4643      	mov	r3, r8
 8006592:	eb1a 0303 	adds.w	r3, sl, r3
 8006596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800659a:	464b      	mov	r3, r9
 800659c:	eb4b 0303 	adc.w	r3, fp, r3
 80065a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065b8:	460b      	mov	r3, r1
 80065ba:	18db      	adds	r3, r3, r3
 80065bc:	643b      	str	r3, [r7, #64]	; 0x40
 80065be:	4613      	mov	r3, r2
 80065c0:	eb42 0303 	adc.w	r3, r2, r3
 80065c4:	647b      	str	r3, [r7, #68]	; 0x44
 80065c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065ce:	f7fa fae3 	bl	8000b98 <__aeabi_uldivmod>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4611      	mov	r1, r2
 80065d8:	4b3b      	ldr	r3, [pc, #236]	; (80066c8 <UART_SetConfig+0x2d4>)
 80065da:	fba3 2301 	umull	r2, r3, r3, r1
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	2264      	movs	r2, #100	; 0x64
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
 80065e6:	1acb      	subs	r3, r1, r3
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065ee:	4b36      	ldr	r3, [pc, #216]	; (80066c8 <UART_SetConfig+0x2d4>)
 80065f0:	fba3 2302 	umull	r2, r3, r3, r2
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065fc:	441c      	add	r4, r3
 80065fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006602:	2200      	movs	r2, #0
 8006604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006608:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800660c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006610:	4642      	mov	r2, r8
 8006612:	464b      	mov	r3, r9
 8006614:	1891      	adds	r1, r2, r2
 8006616:	63b9      	str	r1, [r7, #56]	; 0x38
 8006618:	415b      	adcs	r3, r3
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800661c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006620:	4641      	mov	r1, r8
 8006622:	1851      	adds	r1, r2, r1
 8006624:	6339      	str	r1, [r7, #48]	; 0x30
 8006626:	4649      	mov	r1, r9
 8006628:	414b      	adcs	r3, r1
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006638:	4659      	mov	r1, fp
 800663a:	00cb      	lsls	r3, r1, #3
 800663c:	4651      	mov	r1, sl
 800663e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006642:	4651      	mov	r1, sl
 8006644:	00ca      	lsls	r2, r1, #3
 8006646:	4610      	mov	r0, r2
 8006648:	4619      	mov	r1, r3
 800664a:	4603      	mov	r3, r0
 800664c:	4642      	mov	r2, r8
 800664e:	189b      	adds	r3, r3, r2
 8006650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006654:	464b      	mov	r3, r9
 8006656:	460a      	mov	r2, r1
 8006658:	eb42 0303 	adc.w	r3, r2, r3
 800665c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800666c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006674:	460b      	mov	r3, r1
 8006676:	18db      	adds	r3, r3, r3
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28
 800667a:	4613      	mov	r3, r2
 800667c:	eb42 0303 	adc.w	r3, r2, r3
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006686:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800668a:	f7fa fa85 	bl	8000b98 <__aeabi_uldivmod>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <UART_SetConfig+0x2d4>)
 8006694:	fba3 1302 	umull	r1, r3, r3, r2
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	2164      	movs	r1, #100	; 0x64
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	3332      	adds	r3, #50	; 0x32
 80066a6:	4a08      	ldr	r2, [pc, #32]	; (80066c8 <UART_SetConfig+0x2d4>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	f003 0207 	and.w	r2, r3, #7
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4422      	add	r2, r4
 80066ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066bc:	e106      	b.n	80068cc <UART_SetConfig+0x4d8>
 80066be:	bf00      	nop
 80066c0:	40011000 	.word	0x40011000
 80066c4:	40011400 	.word	0x40011400
 80066c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066de:	4642      	mov	r2, r8
 80066e0:	464b      	mov	r3, r9
 80066e2:	1891      	adds	r1, r2, r2
 80066e4:	6239      	str	r1, [r7, #32]
 80066e6:	415b      	adcs	r3, r3
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066ee:	4641      	mov	r1, r8
 80066f0:	1854      	adds	r4, r2, r1
 80066f2:	4649      	mov	r1, r9
 80066f4:	eb43 0501 	adc.w	r5, r3, r1
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	00eb      	lsls	r3, r5, #3
 8006702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006706:	00e2      	lsls	r2, r4, #3
 8006708:	4614      	mov	r4, r2
 800670a:	461d      	mov	r5, r3
 800670c:	4643      	mov	r3, r8
 800670e:	18e3      	adds	r3, r4, r3
 8006710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006714:	464b      	mov	r3, r9
 8006716:	eb45 0303 	adc.w	r3, r5, r3
 800671a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800672a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800673a:	4629      	mov	r1, r5
 800673c:	008b      	lsls	r3, r1, #2
 800673e:	4621      	mov	r1, r4
 8006740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006744:	4621      	mov	r1, r4
 8006746:	008a      	lsls	r2, r1, #2
 8006748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800674c:	f7fa fa24 	bl	8000b98 <__aeabi_uldivmod>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4b60      	ldr	r3, [pc, #384]	; (80068d8 <UART_SetConfig+0x4e4>)
 8006756:	fba3 2302 	umull	r2, r3, r3, r2
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	011c      	lsls	r4, r3, #4
 800675e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006762:	2200      	movs	r2, #0
 8006764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006768:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800676c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	1891      	adds	r1, r2, r2
 8006776:	61b9      	str	r1, [r7, #24]
 8006778:	415b      	adcs	r3, r3
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006780:	4641      	mov	r1, r8
 8006782:	1851      	adds	r1, r2, r1
 8006784:	6139      	str	r1, [r7, #16]
 8006786:	4649      	mov	r1, r9
 8006788:	414b      	adcs	r3, r1
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006798:	4659      	mov	r1, fp
 800679a:	00cb      	lsls	r3, r1, #3
 800679c:	4651      	mov	r1, sl
 800679e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067a2:	4651      	mov	r1, sl
 80067a4:	00ca      	lsls	r2, r1, #3
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	4642      	mov	r2, r8
 80067ae:	189b      	adds	r3, r3, r2
 80067b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067b4:	464b      	mov	r3, r9
 80067b6:	460a      	mov	r2, r1
 80067b8:	eb42 0303 	adc.w	r3, r2, r3
 80067bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80067ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067d8:	4649      	mov	r1, r9
 80067da:	008b      	lsls	r3, r1, #2
 80067dc:	4641      	mov	r1, r8
 80067de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067e2:	4641      	mov	r1, r8
 80067e4:	008a      	lsls	r2, r1, #2
 80067e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067ea:	f7fa f9d5 	bl	8000b98 <__aeabi_uldivmod>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4611      	mov	r1, r2
 80067f4:	4b38      	ldr	r3, [pc, #224]	; (80068d8 <UART_SetConfig+0x4e4>)
 80067f6:	fba3 2301 	umull	r2, r3, r3, r1
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	2264      	movs	r2, #100	; 0x64
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	1acb      	subs	r3, r1, r3
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	3332      	adds	r3, #50	; 0x32
 8006808:	4a33      	ldr	r2, [pc, #204]	; (80068d8 <UART_SetConfig+0x4e4>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006814:	441c      	add	r4, r3
 8006816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681a:	2200      	movs	r2, #0
 800681c:	673b      	str	r3, [r7, #112]	; 0x70
 800681e:	677a      	str	r2, [r7, #116]	; 0x74
 8006820:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	1891      	adds	r1, r2, r2
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	415b      	adcs	r3, r3
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006834:	4641      	mov	r1, r8
 8006836:	1851      	adds	r1, r2, r1
 8006838:	6039      	str	r1, [r7, #0]
 800683a:	4649      	mov	r1, r9
 800683c:	414b      	adcs	r3, r1
 800683e:	607b      	str	r3, [r7, #4]
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800684c:	4659      	mov	r1, fp
 800684e:	00cb      	lsls	r3, r1, #3
 8006850:	4651      	mov	r1, sl
 8006852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006856:	4651      	mov	r1, sl
 8006858:	00ca      	lsls	r2, r1, #3
 800685a:	4610      	mov	r0, r2
 800685c:	4619      	mov	r1, r3
 800685e:	4603      	mov	r3, r0
 8006860:	4642      	mov	r2, r8
 8006862:	189b      	adds	r3, r3, r2
 8006864:	66bb      	str	r3, [r7, #104]	; 0x68
 8006866:	464b      	mov	r3, r9
 8006868:	460a      	mov	r2, r1
 800686a:	eb42 0303 	adc.w	r3, r2, r3
 800686e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	663b      	str	r3, [r7, #96]	; 0x60
 800687a:	667a      	str	r2, [r7, #100]	; 0x64
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006888:	4649      	mov	r1, r9
 800688a:	008b      	lsls	r3, r1, #2
 800688c:	4641      	mov	r1, r8
 800688e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006892:	4641      	mov	r1, r8
 8006894:	008a      	lsls	r2, r1, #2
 8006896:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800689a:	f7fa f97d 	bl	8000b98 <__aeabi_uldivmod>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <UART_SetConfig+0x4e4>)
 80068a4:	fba3 1302 	umull	r1, r3, r3, r2
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	2164      	movs	r1, #100	; 0x64
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	3332      	adds	r3, #50	; 0x32
 80068b6:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <UART_SetConfig+0x4e4>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	f003 020f 	and.w	r2, r3, #15
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4422      	add	r2, r4
 80068ca:	609a      	str	r2, [r3, #8]
}
 80068cc:	bf00      	nop
 80068ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068d2:	46bd      	mov	sp, r7
 80068d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068d8:	51eb851f 	.word	0x51eb851f

080068dc <siprintf>:
 80068dc:	b40e      	push	{r1, r2, r3}
 80068de:	b500      	push	{lr}
 80068e0:	b09c      	sub	sp, #112	; 0x70
 80068e2:	ab1d      	add	r3, sp, #116	; 0x74
 80068e4:	9002      	str	r0, [sp, #8]
 80068e6:	9006      	str	r0, [sp, #24]
 80068e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068ec:	4809      	ldr	r0, [pc, #36]	; (8006914 <siprintf+0x38>)
 80068ee:	9107      	str	r1, [sp, #28]
 80068f0:	9104      	str	r1, [sp, #16]
 80068f2:	4909      	ldr	r1, [pc, #36]	; (8006918 <siprintf+0x3c>)
 80068f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f8:	9105      	str	r1, [sp, #20]
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	a902      	add	r1, sp, #8
 8006900:	f000 f992 	bl	8006c28 <_svfiprintf_r>
 8006904:	9b02      	ldr	r3, [sp, #8]
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	b01c      	add	sp, #112	; 0x70
 800690c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006910:	b003      	add	sp, #12
 8006912:	4770      	bx	lr
 8006914:	200000d4 	.word	0x200000d4
 8006918:	ffff0208 	.word	0xffff0208

0800691c <memset>:
 800691c:	4402      	add	r2, r0
 800691e:	4603      	mov	r3, r0
 8006920:	4293      	cmp	r3, r2
 8006922:	d100      	bne.n	8006926 <memset+0xa>
 8006924:	4770      	bx	lr
 8006926:	f803 1b01 	strb.w	r1, [r3], #1
 800692a:	e7f9      	b.n	8006920 <memset+0x4>

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	200000d4 	.word	0x200000d4

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	; (8006970 <__libc_init_array+0x38>)
 800693c:	4c0d      	ldr	r4, [pc, #52]	; (8006974 <__libc_init_array+0x3c>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	2600      	movs	r6, #0
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	; (8006978 <__libc_init_array+0x40>)
 800694a:	4c0c      	ldr	r4, [pc, #48]	; (800697c <__libc_init_array+0x44>)
 800694c:	f001 fba4 	bl	8008098 <_init>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	2600      	movs	r6, #0
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	08008230 	.word	0x08008230
 8006974:	08008230 	.word	0x08008230
 8006978:	08008230 	.word	0x08008230
 800697c:	08008234 	.word	0x08008234

08006980 <__retarget_lock_acquire_recursive>:
 8006980:	4770      	bx	lr

08006982 <__retarget_lock_release_recursive>:
 8006982:	4770      	bx	lr

08006984 <_free_r>:
 8006984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006986:	2900      	cmp	r1, #0
 8006988:	d044      	beq.n	8006a14 <_free_r+0x90>
 800698a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800698e:	9001      	str	r0, [sp, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f1a1 0404 	sub.w	r4, r1, #4
 8006996:	bfb8      	it	lt
 8006998:	18e4      	addlt	r4, r4, r3
 800699a:	f000 f8df 	bl	8006b5c <__malloc_lock>
 800699e:	4a1e      	ldr	r2, [pc, #120]	; (8006a18 <_free_r+0x94>)
 80069a0:	9801      	ldr	r0, [sp, #4]
 80069a2:	6813      	ldr	r3, [r2, #0]
 80069a4:	b933      	cbnz	r3, 80069b4 <_free_r+0x30>
 80069a6:	6063      	str	r3, [r4, #4]
 80069a8:	6014      	str	r4, [r2, #0]
 80069aa:	b003      	add	sp, #12
 80069ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b0:	f000 b8da 	b.w	8006b68 <__malloc_unlock>
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	d908      	bls.n	80069ca <_free_r+0x46>
 80069b8:	6825      	ldr	r5, [r4, #0]
 80069ba:	1961      	adds	r1, r4, r5
 80069bc:	428b      	cmp	r3, r1
 80069be:	bf01      	itttt	eq
 80069c0:	6819      	ldreq	r1, [r3, #0]
 80069c2:	685b      	ldreq	r3, [r3, #4]
 80069c4:	1949      	addeq	r1, r1, r5
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	e7ed      	b.n	80069a6 <_free_r+0x22>
 80069ca:	461a      	mov	r2, r3
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b10b      	cbz	r3, 80069d4 <_free_r+0x50>
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	d9fa      	bls.n	80069ca <_free_r+0x46>
 80069d4:	6811      	ldr	r1, [r2, #0]
 80069d6:	1855      	adds	r5, r2, r1
 80069d8:	42a5      	cmp	r5, r4
 80069da:	d10b      	bne.n	80069f4 <_free_r+0x70>
 80069dc:	6824      	ldr	r4, [r4, #0]
 80069de:	4421      	add	r1, r4
 80069e0:	1854      	adds	r4, r2, r1
 80069e2:	42a3      	cmp	r3, r4
 80069e4:	6011      	str	r1, [r2, #0]
 80069e6:	d1e0      	bne.n	80069aa <_free_r+0x26>
 80069e8:	681c      	ldr	r4, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	6053      	str	r3, [r2, #4]
 80069ee:	440c      	add	r4, r1
 80069f0:	6014      	str	r4, [r2, #0]
 80069f2:	e7da      	b.n	80069aa <_free_r+0x26>
 80069f4:	d902      	bls.n	80069fc <_free_r+0x78>
 80069f6:	230c      	movs	r3, #12
 80069f8:	6003      	str	r3, [r0, #0]
 80069fa:	e7d6      	b.n	80069aa <_free_r+0x26>
 80069fc:	6825      	ldr	r5, [r4, #0]
 80069fe:	1961      	adds	r1, r4, r5
 8006a00:	428b      	cmp	r3, r1
 8006a02:	bf04      	itt	eq
 8006a04:	6819      	ldreq	r1, [r3, #0]
 8006a06:	685b      	ldreq	r3, [r3, #4]
 8006a08:	6063      	str	r3, [r4, #4]
 8006a0a:	bf04      	itt	eq
 8006a0c:	1949      	addeq	r1, r1, r5
 8006a0e:	6021      	streq	r1, [r4, #0]
 8006a10:	6054      	str	r4, [r2, #4]
 8006a12:	e7ca      	b.n	80069aa <_free_r+0x26>
 8006a14:	b003      	add	sp, #12
 8006a16:	bd30      	pop	{r4, r5, pc}
 8006a18:	20000500 	.word	0x20000500

08006a1c <sbrk_aligned>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	4e0e      	ldr	r6, [pc, #56]	; (8006a58 <sbrk_aligned+0x3c>)
 8006a20:	460c      	mov	r4, r1
 8006a22:	6831      	ldr	r1, [r6, #0]
 8006a24:	4605      	mov	r5, r0
 8006a26:	b911      	cbnz	r1, 8006a2e <sbrk_aligned+0x12>
 8006a28:	f000 fba6 	bl	8007178 <_sbrk_r>
 8006a2c:	6030      	str	r0, [r6, #0]
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4628      	mov	r0, r5
 8006a32:	f000 fba1 	bl	8007178 <_sbrk_r>
 8006a36:	1c43      	adds	r3, r0, #1
 8006a38:	d00a      	beq.n	8006a50 <sbrk_aligned+0x34>
 8006a3a:	1cc4      	adds	r4, r0, #3
 8006a3c:	f024 0403 	bic.w	r4, r4, #3
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d007      	beq.n	8006a54 <sbrk_aligned+0x38>
 8006a44:	1a21      	subs	r1, r4, r0
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 fb96 	bl	8007178 <_sbrk_r>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d101      	bne.n	8006a54 <sbrk_aligned+0x38>
 8006a50:	f04f 34ff 	mov.w	r4, #4294967295
 8006a54:	4620      	mov	r0, r4
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	20000504 	.word	0x20000504

08006a5c <_malloc_r>:
 8006a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a60:	1ccd      	adds	r5, r1, #3
 8006a62:	f025 0503 	bic.w	r5, r5, #3
 8006a66:	3508      	adds	r5, #8
 8006a68:	2d0c      	cmp	r5, #12
 8006a6a:	bf38      	it	cc
 8006a6c:	250c      	movcc	r5, #12
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	4607      	mov	r7, r0
 8006a72:	db01      	blt.n	8006a78 <_malloc_r+0x1c>
 8006a74:	42a9      	cmp	r1, r5
 8006a76:	d905      	bls.n	8006a84 <_malloc_r+0x28>
 8006a78:	230c      	movs	r3, #12
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b58 <_malloc_r+0xfc>
 8006a88:	f000 f868 	bl	8006b5c <__malloc_lock>
 8006a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a90:	461c      	mov	r4, r3
 8006a92:	bb5c      	cbnz	r4, 8006aec <_malloc_r+0x90>
 8006a94:	4629      	mov	r1, r5
 8006a96:	4638      	mov	r0, r7
 8006a98:	f7ff ffc0 	bl	8006a1c <sbrk_aligned>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	d155      	bne.n	8006b4e <_malloc_r+0xf2>
 8006aa2:	f8d8 4000 	ldr.w	r4, [r8]
 8006aa6:	4626      	mov	r6, r4
 8006aa8:	2e00      	cmp	r6, #0
 8006aaa:	d145      	bne.n	8006b38 <_malloc_r+0xdc>
 8006aac:	2c00      	cmp	r4, #0
 8006aae:	d048      	beq.n	8006b42 <_malloc_r+0xe6>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	eb04 0903 	add.w	r9, r4, r3
 8006aba:	f000 fb5d 	bl	8007178 <_sbrk_r>
 8006abe:	4581      	cmp	r9, r0
 8006ac0:	d13f      	bne.n	8006b42 <_malloc_r+0xe6>
 8006ac2:	6821      	ldr	r1, [r4, #0]
 8006ac4:	1a6d      	subs	r5, r5, r1
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7ff ffa7 	bl	8006a1c <sbrk_aligned>
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d037      	beq.n	8006b42 <_malloc_r+0xe6>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	442b      	add	r3, r5
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d038      	beq.n	8006b52 <_malloc_r+0xf6>
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	42a2      	cmp	r2, r4
 8006ae4:	d12b      	bne.n	8006b3e <_malloc_r+0xe2>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	e00f      	b.n	8006b0c <_malloc_r+0xb0>
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	1b52      	subs	r2, r2, r5
 8006af0:	d41f      	bmi.n	8006b32 <_malloc_r+0xd6>
 8006af2:	2a0b      	cmp	r2, #11
 8006af4:	d917      	bls.n	8006b26 <_malloc_r+0xca>
 8006af6:	1961      	adds	r1, r4, r5
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	6025      	str	r5, [r4, #0]
 8006afc:	bf18      	it	ne
 8006afe:	6059      	strne	r1, [r3, #4]
 8006b00:	6863      	ldr	r3, [r4, #4]
 8006b02:	bf08      	it	eq
 8006b04:	f8c8 1000 	streq.w	r1, [r8]
 8006b08:	5162      	str	r2, [r4, r5]
 8006b0a:	604b      	str	r3, [r1, #4]
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f104 060b 	add.w	r6, r4, #11
 8006b12:	f000 f829 	bl	8006b68 <__malloc_unlock>
 8006b16:	f026 0607 	bic.w	r6, r6, #7
 8006b1a:	1d23      	adds	r3, r4, #4
 8006b1c:	1af2      	subs	r2, r6, r3
 8006b1e:	d0ae      	beq.n	8006a7e <_malloc_r+0x22>
 8006b20:	1b9b      	subs	r3, r3, r6
 8006b22:	50a3      	str	r3, [r4, r2]
 8006b24:	e7ab      	b.n	8006a7e <_malloc_r+0x22>
 8006b26:	42a3      	cmp	r3, r4
 8006b28:	6862      	ldr	r2, [r4, #4]
 8006b2a:	d1dd      	bne.n	8006ae8 <_malloc_r+0x8c>
 8006b2c:	f8c8 2000 	str.w	r2, [r8]
 8006b30:	e7ec      	b.n	8006b0c <_malloc_r+0xb0>
 8006b32:	4623      	mov	r3, r4
 8006b34:	6864      	ldr	r4, [r4, #4]
 8006b36:	e7ac      	b.n	8006a92 <_malloc_r+0x36>
 8006b38:	4634      	mov	r4, r6
 8006b3a:	6876      	ldr	r6, [r6, #4]
 8006b3c:	e7b4      	b.n	8006aa8 <_malloc_r+0x4c>
 8006b3e:	4613      	mov	r3, r2
 8006b40:	e7cc      	b.n	8006adc <_malloc_r+0x80>
 8006b42:	230c      	movs	r3, #12
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	4638      	mov	r0, r7
 8006b48:	f000 f80e 	bl	8006b68 <__malloc_unlock>
 8006b4c:	e797      	b.n	8006a7e <_malloc_r+0x22>
 8006b4e:	6025      	str	r5, [r4, #0]
 8006b50:	e7dc      	b.n	8006b0c <_malloc_r+0xb0>
 8006b52:	605b      	str	r3, [r3, #4]
 8006b54:	deff      	udf	#255	; 0xff
 8006b56:	bf00      	nop
 8006b58:	20000500 	.word	0x20000500

08006b5c <__malloc_lock>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__malloc_lock+0x8>)
 8006b5e:	f7ff bf0f 	b.w	8006980 <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	200004fc 	.word	0x200004fc

08006b68 <__malloc_unlock>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__malloc_unlock+0x8>)
 8006b6a:	f7ff bf0a 	b.w	8006982 <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	200004fc 	.word	0x200004fc

08006b74 <__ssputs_r>:
 8006b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b78:	688e      	ldr	r6, [r1, #8]
 8006b7a:	461f      	mov	r7, r3
 8006b7c:	42be      	cmp	r6, r7
 8006b7e:	680b      	ldr	r3, [r1, #0]
 8006b80:	4682      	mov	sl, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	4690      	mov	r8, r2
 8006b86:	d82c      	bhi.n	8006be2 <__ssputs_r+0x6e>
 8006b88:	898a      	ldrh	r2, [r1, #12]
 8006b8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b8e:	d026      	beq.n	8006bde <__ssputs_r+0x6a>
 8006b90:	6965      	ldr	r5, [r4, #20]
 8006b92:	6909      	ldr	r1, [r1, #16]
 8006b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b98:	eba3 0901 	sub.w	r9, r3, r1
 8006b9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ba0:	1c7b      	adds	r3, r7, #1
 8006ba2:	444b      	add	r3, r9
 8006ba4:	106d      	asrs	r5, r5, #1
 8006ba6:	429d      	cmp	r5, r3
 8006ba8:	bf38      	it	cc
 8006baa:	461d      	movcc	r5, r3
 8006bac:	0553      	lsls	r3, r2, #21
 8006bae:	d527      	bpl.n	8006c00 <__ssputs_r+0x8c>
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f7ff ff53 	bl	8006a5c <_malloc_r>
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	b360      	cbz	r0, 8006c14 <__ssputs_r+0xa0>
 8006bba:	6921      	ldr	r1, [r4, #16]
 8006bbc:	464a      	mov	r2, r9
 8006bbe:	f000 faeb 	bl	8007198 <memcpy>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	6126      	str	r6, [r4, #16]
 8006bd0:	6165      	str	r5, [r4, #20]
 8006bd2:	444e      	add	r6, r9
 8006bd4:	eba5 0509 	sub.w	r5, r5, r9
 8006bd8:	6026      	str	r6, [r4, #0]
 8006bda:	60a5      	str	r5, [r4, #8]
 8006bdc:	463e      	mov	r6, r7
 8006bde:	42be      	cmp	r6, r7
 8006be0:	d900      	bls.n	8006be4 <__ssputs_r+0x70>
 8006be2:	463e      	mov	r6, r7
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	4632      	mov	r2, r6
 8006be8:	4641      	mov	r1, r8
 8006bea:	f000 faab 	bl	8007144 <memmove>
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	1b9b      	subs	r3, r3, r6
 8006bf2:	60a3      	str	r3, [r4, #8]
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	4433      	add	r3, r6
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c00:	462a      	mov	r2, r5
 8006c02:	f000 fad7 	bl	80071b4 <_realloc_r>
 8006c06:	4606      	mov	r6, r0
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d1e0      	bne.n	8006bce <__ssputs_r+0x5a>
 8006c0c:	6921      	ldr	r1, [r4, #16]
 8006c0e:	4650      	mov	r0, sl
 8006c10:	f7ff feb8 	bl	8006984 <_free_r>
 8006c14:	230c      	movs	r3, #12
 8006c16:	f8ca 3000 	str.w	r3, [sl]
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295
 8006c26:	e7e9      	b.n	8006bfc <__ssputs_r+0x88>

08006c28 <_svfiprintf_r>:
 8006c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	4698      	mov	r8, r3
 8006c2e:	898b      	ldrh	r3, [r1, #12]
 8006c30:	061b      	lsls	r3, r3, #24
 8006c32:	b09d      	sub	sp, #116	; 0x74
 8006c34:	4607      	mov	r7, r0
 8006c36:	460d      	mov	r5, r1
 8006c38:	4614      	mov	r4, r2
 8006c3a:	d50e      	bpl.n	8006c5a <_svfiprintf_r+0x32>
 8006c3c:	690b      	ldr	r3, [r1, #16]
 8006c3e:	b963      	cbnz	r3, 8006c5a <_svfiprintf_r+0x32>
 8006c40:	2140      	movs	r1, #64	; 0x40
 8006c42:	f7ff ff0b 	bl	8006a5c <_malloc_r>
 8006c46:	6028      	str	r0, [r5, #0]
 8006c48:	6128      	str	r0, [r5, #16]
 8006c4a:	b920      	cbnz	r0, 8006c56 <_svfiprintf_r+0x2e>
 8006c4c:	230c      	movs	r3, #12
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295
 8006c54:	e0d0      	b.n	8006df8 <_svfiprintf_r+0x1d0>
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	616b      	str	r3, [r5, #20]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c5e:	2320      	movs	r3, #32
 8006c60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c68:	2330      	movs	r3, #48	; 0x30
 8006c6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e10 <_svfiprintf_r+0x1e8>
 8006c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c72:	f04f 0901 	mov.w	r9, #1
 8006c76:	4623      	mov	r3, r4
 8006c78:	469a      	mov	sl, r3
 8006c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c7e:	b10a      	cbz	r2, 8006c84 <_svfiprintf_r+0x5c>
 8006c80:	2a25      	cmp	r2, #37	; 0x25
 8006c82:	d1f9      	bne.n	8006c78 <_svfiprintf_r+0x50>
 8006c84:	ebba 0b04 	subs.w	fp, sl, r4
 8006c88:	d00b      	beq.n	8006ca2 <_svfiprintf_r+0x7a>
 8006c8a:	465b      	mov	r3, fp
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4638      	mov	r0, r7
 8006c92:	f7ff ff6f 	bl	8006b74 <__ssputs_r>
 8006c96:	3001      	adds	r0, #1
 8006c98:	f000 80a9 	beq.w	8006dee <_svfiprintf_r+0x1c6>
 8006c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c9e:	445a      	add	r2, fp
 8006ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80a1 	beq.w	8006dee <_svfiprintf_r+0x1c6>
 8006cac:	2300      	movs	r3, #0
 8006cae:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb6:	f10a 0a01 	add.w	sl, sl, #1
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	9307      	str	r3, [sp, #28]
 8006cbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc4:	4654      	mov	r4, sl
 8006cc6:	2205      	movs	r2, #5
 8006cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ccc:	4850      	ldr	r0, [pc, #320]	; (8006e10 <_svfiprintf_r+0x1e8>)
 8006cce:	f7f9 fa87 	bl	80001e0 <memchr>
 8006cd2:	9a04      	ldr	r2, [sp, #16]
 8006cd4:	b9d8      	cbnz	r0, 8006d0e <_svfiprintf_r+0xe6>
 8006cd6:	06d0      	lsls	r0, r2, #27
 8006cd8:	bf44      	itt	mi
 8006cda:	2320      	movmi	r3, #32
 8006cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce0:	0711      	lsls	r1, r2, #28
 8006ce2:	bf44      	itt	mi
 8006ce4:	232b      	movmi	r3, #43	; 0x2b
 8006ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cea:	f89a 3000 	ldrb.w	r3, [sl]
 8006cee:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf0:	d015      	beq.n	8006d1e <_svfiprintf_r+0xf6>
 8006cf2:	9a07      	ldr	r2, [sp, #28]
 8006cf4:	4654      	mov	r4, sl
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f04f 0c0a 	mov.w	ip, #10
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d02:	3b30      	subs	r3, #48	; 0x30
 8006d04:	2b09      	cmp	r3, #9
 8006d06:	d94d      	bls.n	8006da4 <_svfiprintf_r+0x17c>
 8006d08:	b1b0      	cbz	r0, 8006d38 <_svfiprintf_r+0x110>
 8006d0a:	9207      	str	r2, [sp, #28]
 8006d0c:	e014      	b.n	8006d38 <_svfiprintf_r+0x110>
 8006d0e:	eba0 0308 	sub.w	r3, r0, r8
 8006d12:	fa09 f303 	lsl.w	r3, r9, r3
 8006d16:	4313      	orrs	r3, r2
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	46a2      	mov	sl, r4
 8006d1c:	e7d2      	b.n	8006cc4 <_svfiprintf_r+0x9c>
 8006d1e:	9b03      	ldr	r3, [sp, #12]
 8006d20:	1d19      	adds	r1, r3, #4
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	9103      	str	r1, [sp, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	bfbb      	ittet	lt
 8006d2a:	425b      	neglt	r3, r3
 8006d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d30:	9307      	strge	r3, [sp, #28]
 8006d32:	9307      	strlt	r3, [sp, #28]
 8006d34:	bfb8      	it	lt
 8006d36:	9204      	strlt	r2, [sp, #16]
 8006d38:	7823      	ldrb	r3, [r4, #0]
 8006d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d3c:	d10c      	bne.n	8006d58 <_svfiprintf_r+0x130>
 8006d3e:	7863      	ldrb	r3, [r4, #1]
 8006d40:	2b2a      	cmp	r3, #42	; 0x2a
 8006d42:	d134      	bne.n	8006dae <_svfiprintf_r+0x186>
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	1d1a      	adds	r2, r3, #4
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	9203      	str	r2, [sp, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bfb8      	it	lt
 8006d50:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d54:	3402      	adds	r4, #2
 8006d56:	9305      	str	r3, [sp, #20]
 8006d58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e20 <_svfiprintf_r+0x1f8>
 8006d5c:	7821      	ldrb	r1, [r4, #0]
 8006d5e:	2203      	movs	r2, #3
 8006d60:	4650      	mov	r0, sl
 8006d62:	f7f9 fa3d 	bl	80001e0 <memchr>
 8006d66:	b138      	cbz	r0, 8006d78 <_svfiprintf_r+0x150>
 8006d68:	9b04      	ldr	r3, [sp, #16]
 8006d6a:	eba0 000a 	sub.w	r0, r0, sl
 8006d6e:	2240      	movs	r2, #64	; 0x40
 8006d70:	4082      	lsls	r2, r0
 8006d72:	4313      	orrs	r3, r2
 8006d74:	3401      	adds	r4, #1
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7c:	4825      	ldr	r0, [pc, #148]	; (8006e14 <_svfiprintf_r+0x1ec>)
 8006d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d82:	2206      	movs	r2, #6
 8006d84:	f7f9 fa2c 	bl	80001e0 <memchr>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d038      	beq.n	8006dfe <_svfiprintf_r+0x1d6>
 8006d8c:	4b22      	ldr	r3, [pc, #136]	; (8006e18 <_svfiprintf_r+0x1f0>)
 8006d8e:	bb1b      	cbnz	r3, 8006dd8 <_svfiprintf_r+0x1b0>
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	3307      	adds	r3, #7
 8006d94:	f023 0307 	bic.w	r3, r3, #7
 8006d98:	3308      	adds	r3, #8
 8006d9a:	9303      	str	r3, [sp, #12]
 8006d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9e:	4433      	add	r3, r6
 8006da0:	9309      	str	r3, [sp, #36]	; 0x24
 8006da2:	e768      	b.n	8006c76 <_svfiprintf_r+0x4e>
 8006da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006da8:	460c      	mov	r4, r1
 8006daa:	2001      	movs	r0, #1
 8006dac:	e7a6      	b.n	8006cfc <_svfiprintf_r+0xd4>
 8006dae:	2300      	movs	r3, #0
 8006db0:	3401      	adds	r4, #1
 8006db2:	9305      	str	r3, [sp, #20]
 8006db4:	4619      	mov	r1, r3
 8006db6:	f04f 0c0a 	mov.w	ip, #10
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc0:	3a30      	subs	r2, #48	; 0x30
 8006dc2:	2a09      	cmp	r2, #9
 8006dc4:	d903      	bls.n	8006dce <_svfiprintf_r+0x1a6>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0c6      	beq.n	8006d58 <_svfiprintf_r+0x130>
 8006dca:	9105      	str	r1, [sp, #20]
 8006dcc:	e7c4      	b.n	8006d58 <_svfiprintf_r+0x130>
 8006dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e7f0      	b.n	8006dba <_svfiprintf_r+0x192>
 8006dd8:	ab03      	add	r3, sp, #12
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	462a      	mov	r2, r5
 8006dde:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <_svfiprintf_r+0x1f4>)
 8006de0:	a904      	add	r1, sp, #16
 8006de2:	4638      	mov	r0, r7
 8006de4:	f3af 8000 	nop.w
 8006de8:	1c42      	adds	r2, r0, #1
 8006dea:	4606      	mov	r6, r0
 8006dec:	d1d6      	bne.n	8006d9c <_svfiprintf_r+0x174>
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	065b      	lsls	r3, r3, #25
 8006df2:	f53f af2d 	bmi.w	8006c50 <_svfiprintf_r+0x28>
 8006df6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006df8:	b01d      	add	sp, #116	; 0x74
 8006dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfe:	ab03      	add	r3, sp, #12
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	462a      	mov	r2, r5
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <_svfiprintf_r+0x1f4>)
 8006e06:	a904      	add	r1, sp, #16
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f000 f879 	bl	8006f00 <_printf_i>
 8006e0e:	e7eb      	b.n	8006de8 <_svfiprintf_r+0x1c0>
 8006e10:	080081c0 	.word	0x080081c0
 8006e14:	080081ca 	.word	0x080081ca
 8006e18:	00000000 	.word	0x00000000
 8006e1c:	08006b75 	.word	0x08006b75
 8006e20:	080081c6 	.word	0x080081c6

08006e24 <_printf_common>:
 8006e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	4616      	mov	r6, r2
 8006e2a:	4699      	mov	r9, r3
 8006e2c:	688a      	ldr	r2, [r1, #8]
 8006e2e:	690b      	ldr	r3, [r1, #16]
 8006e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e34:	4293      	cmp	r3, r2
 8006e36:	bfb8      	it	lt
 8006e38:	4613      	movlt	r3, r2
 8006e3a:	6033      	str	r3, [r6, #0]
 8006e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e40:	4607      	mov	r7, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b10a      	cbz	r2, 8006e4a <_printf_common+0x26>
 8006e46:	3301      	adds	r3, #1
 8006e48:	6033      	str	r3, [r6, #0]
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	0699      	lsls	r1, r3, #26
 8006e4e:	bf42      	ittt	mi
 8006e50:	6833      	ldrmi	r3, [r6, #0]
 8006e52:	3302      	addmi	r3, #2
 8006e54:	6033      	strmi	r3, [r6, #0]
 8006e56:	6825      	ldr	r5, [r4, #0]
 8006e58:	f015 0506 	ands.w	r5, r5, #6
 8006e5c:	d106      	bne.n	8006e6c <_printf_common+0x48>
 8006e5e:	f104 0a19 	add.w	sl, r4, #25
 8006e62:	68e3      	ldr	r3, [r4, #12]
 8006e64:	6832      	ldr	r2, [r6, #0]
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	42ab      	cmp	r3, r5
 8006e6a:	dc26      	bgt.n	8006eba <_printf_common+0x96>
 8006e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e70:	1e13      	subs	r3, r2, #0
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	bf18      	it	ne
 8006e76:	2301      	movne	r3, #1
 8006e78:	0692      	lsls	r2, r2, #26
 8006e7a:	d42b      	bmi.n	8006ed4 <_printf_common+0xb0>
 8006e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e80:	4649      	mov	r1, r9
 8006e82:	4638      	mov	r0, r7
 8006e84:	47c0      	blx	r8
 8006e86:	3001      	adds	r0, #1
 8006e88:	d01e      	beq.n	8006ec8 <_printf_common+0xa4>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	6922      	ldr	r2, [r4, #16]
 8006e8e:	f003 0306 	and.w	r3, r3, #6
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	bf02      	ittt	eq
 8006e96:	68e5      	ldreq	r5, [r4, #12]
 8006e98:	6833      	ldreq	r3, [r6, #0]
 8006e9a:	1aed      	subeq	r5, r5, r3
 8006e9c:	68a3      	ldr	r3, [r4, #8]
 8006e9e:	bf0c      	ite	eq
 8006ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ea4:	2500      	movne	r5, #0
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	bfc4      	itt	gt
 8006eaa:	1a9b      	subgt	r3, r3, r2
 8006eac:	18ed      	addgt	r5, r5, r3
 8006eae:	2600      	movs	r6, #0
 8006eb0:	341a      	adds	r4, #26
 8006eb2:	42b5      	cmp	r5, r6
 8006eb4:	d11a      	bne.n	8006eec <_printf_common+0xc8>
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	e008      	b.n	8006ecc <_printf_common+0xa8>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4652      	mov	r2, sl
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	47c0      	blx	r8
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d103      	bne.n	8006ed0 <_printf_common+0xac>
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	e7c6      	b.n	8006e62 <_printf_common+0x3e>
 8006ed4:	18e1      	adds	r1, r4, r3
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	2030      	movs	r0, #48	; 0x30
 8006eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ede:	4422      	add	r2, r4
 8006ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ee8:	3302      	adds	r3, #2
 8006eea:	e7c7      	b.n	8006e7c <_printf_common+0x58>
 8006eec:	2301      	movs	r3, #1
 8006eee:	4622      	mov	r2, r4
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	47c0      	blx	r8
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d0e6      	beq.n	8006ec8 <_printf_common+0xa4>
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7d9      	b.n	8006eb2 <_printf_common+0x8e>
	...

08006f00 <_printf_i>:
 8006f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	7e0f      	ldrb	r7, [r1, #24]
 8006f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f08:	2f78      	cmp	r7, #120	; 0x78
 8006f0a:	4691      	mov	r9, r2
 8006f0c:	4680      	mov	r8, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	469a      	mov	sl, r3
 8006f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f16:	d807      	bhi.n	8006f28 <_printf_i+0x28>
 8006f18:	2f62      	cmp	r7, #98	; 0x62
 8006f1a:	d80a      	bhi.n	8006f32 <_printf_i+0x32>
 8006f1c:	2f00      	cmp	r7, #0
 8006f1e:	f000 80d4 	beq.w	80070ca <_printf_i+0x1ca>
 8006f22:	2f58      	cmp	r7, #88	; 0x58
 8006f24:	f000 80c0 	beq.w	80070a8 <_printf_i+0x1a8>
 8006f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f30:	e03a      	b.n	8006fa8 <_printf_i+0xa8>
 8006f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f36:	2b15      	cmp	r3, #21
 8006f38:	d8f6      	bhi.n	8006f28 <_printf_i+0x28>
 8006f3a:	a101      	add	r1, pc, #4	; (adr r1, 8006f40 <_printf_i+0x40>)
 8006f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f40:	08006f99 	.word	0x08006f99
 8006f44:	08006fad 	.word	0x08006fad
 8006f48:	08006f29 	.word	0x08006f29
 8006f4c:	08006f29 	.word	0x08006f29
 8006f50:	08006f29 	.word	0x08006f29
 8006f54:	08006f29 	.word	0x08006f29
 8006f58:	08006fad 	.word	0x08006fad
 8006f5c:	08006f29 	.word	0x08006f29
 8006f60:	08006f29 	.word	0x08006f29
 8006f64:	08006f29 	.word	0x08006f29
 8006f68:	08006f29 	.word	0x08006f29
 8006f6c:	080070b1 	.word	0x080070b1
 8006f70:	08006fd9 	.word	0x08006fd9
 8006f74:	0800706b 	.word	0x0800706b
 8006f78:	08006f29 	.word	0x08006f29
 8006f7c:	08006f29 	.word	0x08006f29
 8006f80:	080070d3 	.word	0x080070d3
 8006f84:	08006f29 	.word	0x08006f29
 8006f88:	08006fd9 	.word	0x08006fd9
 8006f8c:	08006f29 	.word	0x08006f29
 8006f90:	08006f29 	.word	0x08006f29
 8006f94:	08007073 	.word	0x08007073
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	1d1a      	adds	r2, r3, #4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	602a      	str	r2, [r5, #0]
 8006fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e09f      	b.n	80070ec <_printf_i+0x1ec>
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	0607      	lsls	r7, r0, #24
 8006fb2:	f103 0104 	add.w	r1, r3, #4
 8006fb6:	6029      	str	r1, [r5, #0]
 8006fb8:	d501      	bpl.n	8006fbe <_printf_i+0xbe>
 8006fba:	681e      	ldr	r6, [r3, #0]
 8006fbc:	e003      	b.n	8006fc6 <_printf_i+0xc6>
 8006fbe:	0646      	lsls	r6, r0, #25
 8006fc0:	d5fb      	bpl.n	8006fba <_printf_i+0xba>
 8006fc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	da03      	bge.n	8006fd2 <_printf_i+0xd2>
 8006fca:	232d      	movs	r3, #45	; 0x2d
 8006fcc:	4276      	negs	r6, r6
 8006fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd2:	485a      	ldr	r0, [pc, #360]	; (800713c <_printf_i+0x23c>)
 8006fd4:	230a      	movs	r3, #10
 8006fd6:	e012      	b.n	8006ffe <_printf_i+0xfe>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	6820      	ldr	r0, [r4, #0]
 8006fdc:	1d19      	adds	r1, r3, #4
 8006fde:	6029      	str	r1, [r5, #0]
 8006fe0:	0605      	lsls	r5, r0, #24
 8006fe2:	d501      	bpl.n	8006fe8 <_printf_i+0xe8>
 8006fe4:	681e      	ldr	r6, [r3, #0]
 8006fe6:	e002      	b.n	8006fee <_printf_i+0xee>
 8006fe8:	0641      	lsls	r1, r0, #25
 8006fea:	d5fb      	bpl.n	8006fe4 <_printf_i+0xe4>
 8006fec:	881e      	ldrh	r6, [r3, #0]
 8006fee:	4853      	ldr	r0, [pc, #332]	; (800713c <_printf_i+0x23c>)
 8006ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ff2:	bf0c      	ite	eq
 8006ff4:	2308      	moveq	r3, #8
 8006ff6:	230a      	movne	r3, #10
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ffe:	6865      	ldr	r5, [r4, #4]
 8007000:	60a5      	str	r5, [r4, #8]
 8007002:	2d00      	cmp	r5, #0
 8007004:	bfa2      	ittt	ge
 8007006:	6821      	ldrge	r1, [r4, #0]
 8007008:	f021 0104 	bicge.w	r1, r1, #4
 800700c:	6021      	strge	r1, [r4, #0]
 800700e:	b90e      	cbnz	r6, 8007014 <_printf_i+0x114>
 8007010:	2d00      	cmp	r5, #0
 8007012:	d04b      	beq.n	80070ac <_printf_i+0x1ac>
 8007014:	4615      	mov	r5, r2
 8007016:	fbb6 f1f3 	udiv	r1, r6, r3
 800701a:	fb03 6711 	mls	r7, r3, r1, r6
 800701e:	5dc7      	ldrb	r7, [r0, r7]
 8007020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007024:	4637      	mov	r7, r6
 8007026:	42bb      	cmp	r3, r7
 8007028:	460e      	mov	r6, r1
 800702a:	d9f4      	bls.n	8007016 <_printf_i+0x116>
 800702c:	2b08      	cmp	r3, #8
 800702e:	d10b      	bne.n	8007048 <_printf_i+0x148>
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	07de      	lsls	r6, r3, #31
 8007034:	d508      	bpl.n	8007048 <_printf_i+0x148>
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	6861      	ldr	r1, [r4, #4]
 800703a:	4299      	cmp	r1, r3
 800703c:	bfde      	ittt	le
 800703e:	2330      	movle	r3, #48	; 0x30
 8007040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007048:	1b52      	subs	r2, r2, r5
 800704a:	6122      	str	r2, [r4, #16]
 800704c:	f8cd a000 	str.w	sl, [sp]
 8007050:	464b      	mov	r3, r9
 8007052:	aa03      	add	r2, sp, #12
 8007054:	4621      	mov	r1, r4
 8007056:	4640      	mov	r0, r8
 8007058:	f7ff fee4 	bl	8006e24 <_printf_common>
 800705c:	3001      	adds	r0, #1
 800705e:	d14a      	bne.n	80070f6 <_printf_i+0x1f6>
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	b004      	add	sp, #16
 8007066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	f043 0320 	orr.w	r3, r3, #32
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	4833      	ldr	r0, [pc, #204]	; (8007140 <_printf_i+0x240>)
 8007074:	2778      	movs	r7, #120	; 0x78
 8007076:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	6829      	ldr	r1, [r5, #0]
 800707e:	061f      	lsls	r7, r3, #24
 8007080:	f851 6b04 	ldr.w	r6, [r1], #4
 8007084:	d402      	bmi.n	800708c <_printf_i+0x18c>
 8007086:	065f      	lsls	r7, r3, #25
 8007088:	bf48      	it	mi
 800708a:	b2b6      	uxthmi	r6, r6
 800708c:	07df      	lsls	r7, r3, #31
 800708e:	bf48      	it	mi
 8007090:	f043 0320 	orrmi.w	r3, r3, #32
 8007094:	6029      	str	r1, [r5, #0]
 8007096:	bf48      	it	mi
 8007098:	6023      	strmi	r3, [r4, #0]
 800709a:	b91e      	cbnz	r6, 80070a4 <_printf_i+0x1a4>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	f023 0320 	bic.w	r3, r3, #32
 80070a2:	6023      	str	r3, [r4, #0]
 80070a4:	2310      	movs	r3, #16
 80070a6:	e7a7      	b.n	8006ff8 <_printf_i+0xf8>
 80070a8:	4824      	ldr	r0, [pc, #144]	; (800713c <_printf_i+0x23c>)
 80070aa:	e7e4      	b.n	8007076 <_printf_i+0x176>
 80070ac:	4615      	mov	r5, r2
 80070ae:	e7bd      	b.n	800702c <_printf_i+0x12c>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	6826      	ldr	r6, [r4, #0]
 80070b4:	6961      	ldr	r1, [r4, #20]
 80070b6:	1d18      	adds	r0, r3, #4
 80070b8:	6028      	str	r0, [r5, #0]
 80070ba:	0635      	lsls	r5, r6, #24
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	d501      	bpl.n	80070c4 <_printf_i+0x1c4>
 80070c0:	6019      	str	r1, [r3, #0]
 80070c2:	e002      	b.n	80070ca <_printf_i+0x1ca>
 80070c4:	0670      	lsls	r0, r6, #25
 80070c6:	d5fb      	bpl.n	80070c0 <_printf_i+0x1c0>
 80070c8:	8019      	strh	r1, [r3, #0]
 80070ca:	2300      	movs	r3, #0
 80070cc:	6123      	str	r3, [r4, #16]
 80070ce:	4615      	mov	r5, r2
 80070d0:	e7bc      	b.n	800704c <_printf_i+0x14c>
 80070d2:	682b      	ldr	r3, [r5, #0]
 80070d4:	1d1a      	adds	r2, r3, #4
 80070d6:	602a      	str	r2, [r5, #0]
 80070d8:	681d      	ldr	r5, [r3, #0]
 80070da:	6862      	ldr	r2, [r4, #4]
 80070dc:	2100      	movs	r1, #0
 80070de:	4628      	mov	r0, r5
 80070e0:	f7f9 f87e 	bl	80001e0 <memchr>
 80070e4:	b108      	cbz	r0, 80070ea <_printf_i+0x1ea>
 80070e6:	1b40      	subs	r0, r0, r5
 80070e8:	6060      	str	r0, [r4, #4]
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	2300      	movs	r3, #0
 80070f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f4:	e7aa      	b.n	800704c <_printf_i+0x14c>
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	462a      	mov	r2, r5
 80070fa:	4649      	mov	r1, r9
 80070fc:	4640      	mov	r0, r8
 80070fe:	47d0      	blx	sl
 8007100:	3001      	adds	r0, #1
 8007102:	d0ad      	beq.n	8007060 <_printf_i+0x160>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	079b      	lsls	r3, r3, #30
 8007108:	d413      	bmi.n	8007132 <_printf_i+0x232>
 800710a:	68e0      	ldr	r0, [r4, #12]
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	4298      	cmp	r0, r3
 8007110:	bfb8      	it	lt
 8007112:	4618      	movlt	r0, r3
 8007114:	e7a6      	b.n	8007064 <_printf_i+0x164>
 8007116:	2301      	movs	r3, #1
 8007118:	4632      	mov	r2, r6
 800711a:	4649      	mov	r1, r9
 800711c:	4640      	mov	r0, r8
 800711e:	47d0      	blx	sl
 8007120:	3001      	adds	r0, #1
 8007122:	d09d      	beq.n	8007060 <_printf_i+0x160>
 8007124:	3501      	adds	r5, #1
 8007126:	68e3      	ldr	r3, [r4, #12]
 8007128:	9903      	ldr	r1, [sp, #12]
 800712a:	1a5b      	subs	r3, r3, r1
 800712c:	42ab      	cmp	r3, r5
 800712e:	dcf2      	bgt.n	8007116 <_printf_i+0x216>
 8007130:	e7eb      	b.n	800710a <_printf_i+0x20a>
 8007132:	2500      	movs	r5, #0
 8007134:	f104 0619 	add.w	r6, r4, #25
 8007138:	e7f5      	b.n	8007126 <_printf_i+0x226>
 800713a:	bf00      	nop
 800713c:	080081d1 	.word	0x080081d1
 8007140:	080081e2 	.word	0x080081e2

08007144 <memmove>:
 8007144:	4288      	cmp	r0, r1
 8007146:	b510      	push	{r4, lr}
 8007148:	eb01 0402 	add.w	r4, r1, r2
 800714c:	d902      	bls.n	8007154 <memmove+0x10>
 800714e:	4284      	cmp	r4, r0
 8007150:	4623      	mov	r3, r4
 8007152:	d807      	bhi.n	8007164 <memmove+0x20>
 8007154:	1e43      	subs	r3, r0, #1
 8007156:	42a1      	cmp	r1, r4
 8007158:	d008      	beq.n	800716c <memmove+0x28>
 800715a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800715e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007162:	e7f8      	b.n	8007156 <memmove+0x12>
 8007164:	4402      	add	r2, r0
 8007166:	4601      	mov	r1, r0
 8007168:	428a      	cmp	r2, r1
 800716a:	d100      	bne.n	800716e <memmove+0x2a>
 800716c:	bd10      	pop	{r4, pc}
 800716e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007176:	e7f7      	b.n	8007168 <memmove+0x24>

08007178 <_sbrk_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4d06      	ldr	r5, [pc, #24]	; (8007194 <_sbrk_r+0x1c>)
 800717c:	2300      	movs	r3, #0
 800717e:	4604      	mov	r4, r0
 8007180:	4608      	mov	r0, r1
 8007182:	602b      	str	r3, [r5, #0]
 8007184:	f7fb fc20 	bl	80029c8 <_sbrk>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	d102      	bne.n	8007192 <_sbrk_r+0x1a>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	b103      	cbz	r3, 8007192 <_sbrk_r+0x1a>
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	bd38      	pop	{r3, r4, r5, pc}
 8007194:	200004f8 	.word	0x200004f8

08007198 <memcpy>:
 8007198:	440a      	add	r2, r1
 800719a:	4291      	cmp	r1, r2
 800719c:	f100 33ff 	add.w	r3, r0, #4294967295
 80071a0:	d100      	bne.n	80071a4 <memcpy+0xc>
 80071a2:	4770      	bx	lr
 80071a4:	b510      	push	{r4, lr}
 80071a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ae:	4291      	cmp	r1, r2
 80071b0:	d1f9      	bne.n	80071a6 <memcpy+0xe>
 80071b2:	bd10      	pop	{r4, pc}

080071b4 <_realloc_r>:
 80071b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b8:	4680      	mov	r8, r0
 80071ba:	4614      	mov	r4, r2
 80071bc:	460e      	mov	r6, r1
 80071be:	b921      	cbnz	r1, 80071ca <_realloc_r+0x16>
 80071c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	4611      	mov	r1, r2
 80071c6:	f7ff bc49 	b.w	8006a5c <_malloc_r>
 80071ca:	b92a      	cbnz	r2, 80071d8 <_realloc_r+0x24>
 80071cc:	f7ff fbda 	bl	8006984 <_free_r>
 80071d0:	4625      	mov	r5, r4
 80071d2:	4628      	mov	r0, r5
 80071d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d8:	f000 f81b 	bl	8007212 <_malloc_usable_size_r>
 80071dc:	4284      	cmp	r4, r0
 80071de:	4607      	mov	r7, r0
 80071e0:	d802      	bhi.n	80071e8 <_realloc_r+0x34>
 80071e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071e6:	d812      	bhi.n	800720e <_realloc_r+0x5a>
 80071e8:	4621      	mov	r1, r4
 80071ea:	4640      	mov	r0, r8
 80071ec:	f7ff fc36 	bl	8006a5c <_malloc_r>
 80071f0:	4605      	mov	r5, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d0ed      	beq.n	80071d2 <_realloc_r+0x1e>
 80071f6:	42bc      	cmp	r4, r7
 80071f8:	4622      	mov	r2, r4
 80071fa:	4631      	mov	r1, r6
 80071fc:	bf28      	it	cs
 80071fe:	463a      	movcs	r2, r7
 8007200:	f7ff ffca 	bl	8007198 <memcpy>
 8007204:	4631      	mov	r1, r6
 8007206:	4640      	mov	r0, r8
 8007208:	f7ff fbbc 	bl	8006984 <_free_r>
 800720c:	e7e1      	b.n	80071d2 <_realloc_r+0x1e>
 800720e:	4635      	mov	r5, r6
 8007210:	e7df      	b.n	80071d2 <_realloc_r+0x1e>

08007212 <_malloc_usable_size_r>:
 8007212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007216:	1f18      	subs	r0, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfbc      	itt	lt
 800721c:	580b      	ldrlt	r3, [r1, r0]
 800721e:	18c0      	addlt	r0, r0, r3
 8007220:	4770      	bx	lr
	...

08007224 <pow>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	ed2d 8b02 	vpush	{d8}
 800722a:	eeb0 8a40 	vmov.f32	s16, s0
 800722e:	eef0 8a60 	vmov.f32	s17, s1
 8007232:	ec55 4b11 	vmov	r4, r5, d1
 8007236:	f000 f873 	bl	8007320 <__ieee754_pow>
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	4620      	mov	r0, r4
 8007240:	4629      	mov	r1, r5
 8007242:	ec57 6b10 	vmov	r6, r7, d0
 8007246:	f7f9 fc71 	bl	8000b2c <__aeabi_dcmpun>
 800724a:	2800      	cmp	r0, #0
 800724c:	d13b      	bne.n	80072c6 <pow+0xa2>
 800724e:	ec51 0b18 	vmov	r0, r1, d8
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	f7f9 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800725a:	b1b8      	cbz	r0, 800728c <pow+0x68>
 800725c:	2200      	movs	r2, #0
 800725e:	2300      	movs	r3, #0
 8007260:	4620      	mov	r0, r4
 8007262:	4629      	mov	r1, r5
 8007264:	f7f9 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8007268:	2800      	cmp	r0, #0
 800726a:	d146      	bne.n	80072fa <pow+0xd6>
 800726c:	ec45 4b10 	vmov	d0, r4, r5
 8007270:	f000 f848 	bl	8007304 <finite>
 8007274:	b338      	cbz	r0, 80072c6 <pow+0xa2>
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	4620      	mov	r0, r4
 800727c:	4629      	mov	r1, r5
 800727e:	f7f9 fc2d 	bl	8000adc <__aeabi_dcmplt>
 8007282:	b300      	cbz	r0, 80072c6 <pow+0xa2>
 8007284:	f7ff fb52 	bl	800692c <__errno>
 8007288:	2322      	movs	r3, #34	; 0x22
 800728a:	e01b      	b.n	80072c4 <pow+0xa0>
 800728c:	ec47 6b10 	vmov	d0, r6, r7
 8007290:	f000 f838 	bl	8007304 <finite>
 8007294:	b9e0      	cbnz	r0, 80072d0 <pow+0xac>
 8007296:	eeb0 0a48 	vmov.f32	s0, s16
 800729a:	eef0 0a68 	vmov.f32	s1, s17
 800729e:	f000 f831 	bl	8007304 <finite>
 80072a2:	b1a8      	cbz	r0, 80072d0 <pow+0xac>
 80072a4:	ec45 4b10 	vmov	d0, r4, r5
 80072a8:	f000 f82c 	bl	8007304 <finite>
 80072ac:	b180      	cbz	r0, 80072d0 <pow+0xac>
 80072ae:	4632      	mov	r2, r6
 80072b0:	463b      	mov	r3, r7
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	f7f9 fc39 	bl	8000b2c <__aeabi_dcmpun>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d0e2      	beq.n	8007284 <pow+0x60>
 80072be:	f7ff fb35 	bl	800692c <__errno>
 80072c2:	2321      	movs	r3, #33	; 0x21
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	ecbd 8b02 	vpop	{d8}
 80072ca:	ec47 6b10 	vmov	d0, r6, r7
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	2200      	movs	r2, #0
 80072d2:	2300      	movs	r3, #0
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f9 fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d0f2      	beq.n	80072c6 <pow+0xa2>
 80072e0:	eeb0 0a48 	vmov.f32	s0, s16
 80072e4:	eef0 0a68 	vmov.f32	s1, s17
 80072e8:	f000 f80c 	bl	8007304 <finite>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0ea      	beq.n	80072c6 <pow+0xa2>
 80072f0:	ec45 4b10 	vmov	d0, r4, r5
 80072f4:	f000 f806 	bl	8007304 <finite>
 80072f8:	e7c3      	b.n	8007282 <pow+0x5e>
 80072fa:	4f01      	ldr	r7, [pc, #4]	; (8007300 <pow+0xdc>)
 80072fc:	2600      	movs	r6, #0
 80072fe:	e7e2      	b.n	80072c6 <pow+0xa2>
 8007300:	3ff00000 	.word	0x3ff00000

08007304 <finite>:
 8007304:	b082      	sub	sp, #8
 8007306:	ed8d 0b00 	vstr	d0, [sp]
 800730a:	9801      	ldr	r0, [sp, #4]
 800730c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007310:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007314:	0fc0      	lsrs	r0, r0, #31
 8007316:	b002      	add	sp, #8
 8007318:	4770      	bx	lr
 800731a:	0000      	movs	r0, r0
 800731c:	0000      	movs	r0, r0
	...

08007320 <__ieee754_pow>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	ed2d 8b06 	vpush	{d8-d10}
 8007328:	b089      	sub	sp, #36	; 0x24
 800732a:	ed8d 1b00 	vstr	d1, [sp]
 800732e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007332:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007336:	ea58 0102 	orrs.w	r1, r8, r2
 800733a:	ec57 6b10 	vmov	r6, r7, d0
 800733e:	d115      	bne.n	800736c <__ieee754_pow+0x4c>
 8007340:	19b3      	adds	r3, r6, r6
 8007342:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007346:	4152      	adcs	r2, r2
 8007348:	4299      	cmp	r1, r3
 800734a:	4b89      	ldr	r3, [pc, #548]	; (8007570 <__ieee754_pow+0x250>)
 800734c:	4193      	sbcs	r3, r2
 800734e:	f080 84d1 	bcs.w	8007cf4 <__ieee754_pow+0x9d4>
 8007352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	f7f8 ff97 	bl	800028c <__adddf3>
 800735e:	ec41 0b10 	vmov	d0, r0, r1
 8007362:	b009      	add	sp, #36	; 0x24
 8007364:	ecbd 8b06 	vpop	{d8-d10}
 8007368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736c:	4b81      	ldr	r3, [pc, #516]	; (8007574 <__ieee754_pow+0x254>)
 800736e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007372:	429c      	cmp	r4, r3
 8007374:	ee10 aa10 	vmov	sl, s0
 8007378:	463d      	mov	r5, r7
 800737a:	dc06      	bgt.n	800738a <__ieee754_pow+0x6a>
 800737c:	d101      	bne.n	8007382 <__ieee754_pow+0x62>
 800737e:	2e00      	cmp	r6, #0
 8007380:	d1e7      	bne.n	8007352 <__ieee754_pow+0x32>
 8007382:	4598      	cmp	r8, r3
 8007384:	dc01      	bgt.n	800738a <__ieee754_pow+0x6a>
 8007386:	d10f      	bne.n	80073a8 <__ieee754_pow+0x88>
 8007388:	b172      	cbz	r2, 80073a8 <__ieee754_pow+0x88>
 800738a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800738e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007392:	ea55 050a 	orrs.w	r5, r5, sl
 8007396:	d1dc      	bne.n	8007352 <__ieee754_pow+0x32>
 8007398:	e9dd 3200 	ldrd	r3, r2, [sp]
 800739c:	18db      	adds	r3, r3, r3
 800739e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80073a2:	4152      	adcs	r2, r2
 80073a4:	429d      	cmp	r5, r3
 80073a6:	e7d0      	b.n	800734a <__ieee754_pow+0x2a>
 80073a8:	2d00      	cmp	r5, #0
 80073aa:	da3b      	bge.n	8007424 <__ieee754_pow+0x104>
 80073ac:	4b72      	ldr	r3, [pc, #456]	; (8007578 <__ieee754_pow+0x258>)
 80073ae:	4598      	cmp	r8, r3
 80073b0:	dc51      	bgt.n	8007456 <__ieee754_pow+0x136>
 80073b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80073b6:	4598      	cmp	r8, r3
 80073b8:	f340 84ab 	ble.w	8007d12 <__ieee754_pow+0x9f2>
 80073bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80073c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80073c4:	2b14      	cmp	r3, #20
 80073c6:	dd0f      	ble.n	80073e8 <__ieee754_pow+0xc8>
 80073c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80073cc:	fa22 f103 	lsr.w	r1, r2, r3
 80073d0:	fa01 f303 	lsl.w	r3, r1, r3
 80073d4:	4293      	cmp	r3, r2
 80073d6:	f040 849c 	bne.w	8007d12 <__ieee754_pow+0x9f2>
 80073da:	f001 0101 	and.w	r1, r1, #1
 80073de:	f1c1 0302 	rsb	r3, r1, #2
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	b182      	cbz	r2, 8007408 <__ieee754_pow+0xe8>
 80073e6:	e05f      	b.n	80074a8 <__ieee754_pow+0x188>
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	d15b      	bne.n	80074a4 <__ieee754_pow+0x184>
 80073ec:	f1c3 0314 	rsb	r3, r3, #20
 80073f0:	fa48 f103 	asr.w	r1, r8, r3
 80073f4:	fa01 f303 	lsl.w	r3, r1, r3
 80073f8:	4543      	cmp	r3, r8
 80073fa:	f040 8487 	bne.w	8007d0c <__ieee754_pow+0x9ec>
 80073fe:	f001 0101 	and.w	r1, r1, #1
 8007402:	f1c1 0302 	rsb	r3, r1, #2
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	4b5c      	ldr	r3, [pc, #368]	; (800757c <__ieee754_pow+0x25c>)
 800740a:	4598      	cmp	r8, r3
 800740c:	d132      	bne.n	8007474 <__ieee754_pow+0x154>
 800740e:	f1b9 0f00 	cmp.w	r9, #0
 8007412:	f280 8477 	bge.w	8007d04 <__ieee754_pow+0x9e4>
 8007416:	4959      	ldr	r1, [pc, #356]	; (800757c <__ieee754_pow+0x25c>)
 8007418:	4632      	mov	r2, r6
 800741a:	463b      	mov	r3, r7
 800741c:	2000      	movs	r0, #0
 800741e:	f7f9 fa15 	bl	800084c <__aeabi_ddiv>
 8007422:	e79c      	b.n	800735e <__ieee754_pow+0x3e>
 8007424:	2300      	movs	r3, #0
 8007426:	9304      	str	r3, [sp, #16]
 8007428:	2a00      	cmp	r2, #0
 800742a:	d13d      	bne.n	80074a8 <__ieee754_pow+0x188>
 800742c:	4b51      	ldr	r3, [pc, #324]	; (8007574 <__ieee754_pow+0x254>)
 800742e:	4598      	cmp	r8, r3
 8007430:	d1ea      	bne.n	8007408 <__ieee754_pow+0xe8>
 8007432:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007436:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800743a:	ea53 030a 	orrs.w	r3, r3, sl
 800743e:	f000 8459 	beq.w	8007cf4 <__ieee754_pow+0x9d4>
 8007442:	4b4f      	ldr	r3, [pc, #316]	; (8007580 <__ieee754_pow+0x260>)
 8007444:	429c      	cmp	r4, r3
 8007446:	dd08      	ble.n	800745a <__ieee754_pow+0x13a>
 8007448:	f1b9 0f00 	cmp.w	r9, #0
 800744c:	f2c0 8456 	blt.w	8007cfc <__ieee754_pow+0x9dc>
 8007450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007454:	e783      	b.n	800735e <__ieee754_pow+0x3e>
 8007456:	2302      	movs	r3, #2
 8007458:	e7e5      	b.n	8007426 <__ieee754_pow+0x106>
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	f04f 0000 	mov.w	r0, #0
 8007462:	f04f 0100 	mov.w	r1, #0
 8007466:	f6bf af7a 	bge.w	800735e <__ieee754_pow+0x3e>
 800746a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800746e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007472:	e774      	b.n	800735e <__ieee754_pow+0x3e>
 8007474:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007478:	d106      	bne.n	8007488 <__ieee754_pow+0x168>
 800747a:	4632      	mov	r2, r6
 800747c:	463b      	mov	r3, r7
 800747e:	4630      	mov	r0, r6
 8007480:	4639      	mov	r1, r7
 8007482:	f7f9 f8b9 	bl	80005f8 <__aeabi_dmul>
 8007486:	e76a      	b.n	800735e <__ieee754_pow+0x3e>
 8007488:	4b3e      	ldr	r3, [pc, #248]	; (8007584 <__ieee754_pow+0x264>)
 800748a:	4599      	cmp	r9, r3
 800748c:	d10c      	bne.n	80074a8 <__ieee754_pow+0x188>
 800748e:	2d00      	cmp	r5, #0
 8007490:	db0a      	blt.n	80074a8 <__ieee754_pow+0x188>
 8007492:	ec47 6b10 	vmov	d0, r6, r7
 8007496:	b009      	add	sp, #36	; 0x24
 8007498:	ecbd 8b06 	vpop	{d8-d10}
 800749c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	f000 bd20 	b.w	8007ee4 <__ieee754_sqrt>
 80074a4:	2300      	movs	r3, #0
 80074a6:	9304      	str	r3, [sp, #16]
 80074a8:	ec47 6b10 	vmov	d0, r6, r7
 80074ac:	f000 fc62 	bl	8007d74 <fabs>
 80074b0:	ec51 0b10 	vmov	r0, r1, d0
 80074b4:	f1ba 0f00 	cmp.w	sl, #0
 80074b8:	d129      	bne.n	800750e <__ieee754_pow+0x1ee>
 80074ba:	b124      	cbz	r4, 80074c6 <__ieee754_pow+0x1a6>
 80074bc:	4b2f      	ldr	r3, [pc, #188]	; (800757c <__ieee754_pow+0x25c>)
 80074be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d123      	bne.n	800750e <__ieee754_pow+0x1ee>
 80074c6:	f1b9 0f00 	cmp.w	r9, #0
 80074ca:	da05      	bge.n	80074d8 <__ieee754_pow+0x1b8>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	2000      	movs	r0, #0
 80074d2:	492a      	ldr	r1, [pc, #168]	; (800757c <__ieee754_pow+0x25c>)
 80074d4:	f7f9 f9ba 	bl	800084c <__aeabi_ddiv>
 80074d8:	2d00      	cmp	r5, #0
 80074da:	f6bf af40 	bge.w	800735e <__ieee754_pow+0x3e>
 80074de:	9b04      	ldr	r3, [sp, #16]
 80074e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80074e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80074e8:	431c      	orrs	r4, r3
 80074ea:	d108      	bne.n	80074fe <__ieee754_pow+0x1de>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4610      	mov	r0, r2
 80074f2:	4619      	mov	r1, r3
 80074f4:	f7f8 fec8 	bl	8000288 <__aeabi_dsub>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	e78f      	b.n	800741e <__ieee754_pow+0xfe>
 80074fe:	9b04      	ldr	r3, [sp, #16]
 8007500:	2b01      	cmp	r3, #1
 8007502:	f47f af2c 	bne.w	800735e <__ieee754_pow+0x3e>
 8007506:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800750a:	4619      	mov	r1, r3
 800750c:	e727      	b.n	800735e <__ieee754_pow+0x3e>
 800750e:	0feb      	lsrs	r3, r5, #31
 8007510:	3b01      	subs	r3, #1
 8007512:	9306      	str	r3, [sp, #24]
 8007514:	9a06      	ldr	r2, [sp, #24]
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	d102      	bne.n	8007522 <__ieee754_pow+0x202>
 800751c:	4632      	mov	r2, r6
 800751e:	463b      	mov	r3, r7
 8007520:	e7e6      	b.n	80074f0 <__ieee754_pow+0x1d0>
 8007522:	4b19      	ldr	r3, [pc, #100]	; (8007588 <__ieee754_pow+0x268>)
 8007524:	4598      	cmp	r8, r3
 8007526:	f340 80fb 	ble.w	8007720 <__ieee754_pow+0x400>
 800752a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800752e:	4598      	cmp	r8, r3
 8007530:	4b13      	ldr	r3, [pc, #76]	; (8007580 <__ieee754_pow+0x260>)
 8007532:	dd0c      	ble.n	800754e <__ieee754_pow+0x22e>
 8007534:	429c      	cmp	r4, r3
 8007536:	dc0f      	bgt.n	8007558 <__ieee754_pow+0x238>
 8007538:	f1b9 0f00 	cmp.w	r9, #0
 800753c:	da0f      	bge.n	800755e <__ieee754_pow+0x23e>
 800753e:	2000      	movs	r0, #0
 8007540:	b009      	add	sp, #36	; 0x24
 8007542:	ecbd 8b06 	vpop	{d8-d10}
 8007546:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754a:	f000 bcc2 	b.w	8007ed2 <__math_oflow>
 800754e:	429c      	cmp	r4, r3
 8007550:	dbf2      	blt.n	8007538 <__ieee754_pow+0x218>
 8007552:	4b0a      	ldr	r3, [pc, #40]	; (800757c <__ieee754_pow+0x25c>)
 8007554:	429c      	cmp	r4, r3
 8007556:	dd19      	ble.n	800758c <__ieee754_pow+0x26c>
 8007558:	f1b9 0f00 	cmp.w	r9, #0
 800755c:	dcef      	bgt.n	800753e <__ieee754_pow+0x21e>
 800755e:	2000      	movs	r0, #0
 8007560:	b009      	add	sp, #36	; 0x24
 8007562:	ecbd 8b06 	vpop	{d8-d10}
 8007566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	f000 bca9 	b.w	8007ec0 <__math_uflow>
 800756e:	bf00      	nop
 8007570:	fff00000 	.word	0xfff00000
 8007574:	7ff00000 	.word	0x7ff00000
 8007578:	433fffff 	.word	0x433fffff
 800757c:	3ff00000 	.word	0x3ff00000
 8007580:	3fefffff 	.word	0x3fefffff
 8007584:	3fe00000 	.word	0x3fe00000
 8007588:	41e00000 	.word	0x41e00000
 800758c:	4b60      	ldr	r3, [pc, #384]	; (8007710 <__ieee754_pow+0x3f0>)
 800758e:	2200      	movs	r2, #0
 8007590:	f7f8 fe7a 	bl	8000288 <__aeabi_dsub>
 8007594:	a354      	add	r3, pc, #336	; (adr r3, 80076e8 <__ieee754_pow+0x3c8>)
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	4604      	mov	r4, r0
 800759c:	460d      	mov	r5, r1
 800759e:	f7f9 f82b 	bl	80005f8 <__aeabi_dmul>
 80075a2:	a353      	add	r3, pc, #332	; (adr r3, 80076f0 <__ieee754_pow+0x3d0>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	4606      	mov	r6, r0
 80075aa:	460f      	mov	r7, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f9 f822 	bl	80005f8 <__aeabi_dmul>
 80075b4:	4b57      	ldr	r3, [pc, #348]	; (8007714 <__ieee754_pow+0x3f4>)
 80075b6:	4682      	mov	sl, r0
 80075b8:	468b      	mov	fp, r1
 80075ba:	2200      	movs	r2, #0
 80075bc:	4620      	mov	r0, r4
 80075be:	4629      	mov	r1, r5
 80075c0:	f7f9 f81a 	bl	80005f8 <__aeabi_dmul>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	a14b      	add	r1, pc, #300	; (adr r1, 80076f8 <__ieee754_pow+0x3d8>)
 80075ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075ce:	f7f8 fe5b 	bl	8000288 <__aeabi_dsub>
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f7f9 f80f 	bl	80005f8 <__aeabi_dmul>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	2000      	movs	r0, #0
 80075e0:	494d      	ldr	r1, [pc, #308]	; (8007718 <__ieee754_pow+0x3f8>)
 80075e2:	f7f8 fe51 	bl	8000288 <__aeabi_dsub>
 80075e6:	4622      	mov	r2, r4
 80075e8:	4680      	mov	r8, r0
 80075ea:	4689      	mov	r9, r1
 80075ec:	462b      	mov	r3, r5
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f9 f801 	bl	80005f8 <__aeabi_dmul>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4640      	mov	r0, r8
 80075fc:	4649      	mov	r1, r9
 80075fe:	f7f8 fffb 	bl	80005f8 <__aeabi_dmul>
 8007602:	a33f      	add	r3, pc, #252	; (adr r3, 8007700 <__ieee754_pow+0x3e0>)
 8007604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007608:	f7f8 fff6 	bl	80005f8 <__aeabi_dmul>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4650      	mov	r0, sl
 8007612:	4659      	mov	r1, fp
 8007614:	f7f8 fe38 	bl	8000288 <__aeabi_dsub>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4680      	mov	r8, r0
 800761e:	4689      	mov	r9, r1
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	f7f8 fe32 	bl	800028c <__adddf3>
 8007628:	2000      	movs	r0, #0
 800762a:	4632      	mov	r2, r6
 800762c:	463b      	mov	r3, r7
 800762e:	4604      	mov	r4, r0
 8007630:	460d      	mov	r5, r1
 8007632:	f7f8 fe29 	bl	8000288 <__aeabi_dsub>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 fe23 	bl	8000288 <__aeabi_dsub>
 8007642:	9b04      	ldr	r3, [sp, #16]
 8007644:	9a06      	ldr	r2, [sp, #24]
 8007646:	3b01      	subs	r3, #1
 8007648:	4313      	orrs	r3, r2
 800764a:	4682      	mov	sl, r0
 800764c:	468b      	mov	fp, r1
 800764e:	f040 81e7 	bne.w	8007a20 <__ieee754_pow+0x700>
 8007652:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007708 <__ieee754_pow+0x3e8>
 8007656:	eeb0 8a47 	vmov.f32	s16, s14
 800765a:	eef0 8a67 	vmov.f32	s17, s15
 800765e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007662:	2600      	movs	r6, #0
 8007664:	4632      	mov	r2, r6
 8007666:	463b      	mov	r3, r7
 8007668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800766c:	f7f8 fe0c 	bl	8000288 <__aeabi_dsub>
 8007670:	4622      	mov	r2, r4
 8007672:	462b      	mov	r3, r5
 8007674:	f7f8 ffc0 	bl	80005f8 <__aeabi_dmul>
 8007678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800767c:	4680      	mov	r8, r0
 800767e:	4689      	mov	r9, r1
 8007680:	4650      	mov	r0, sl
 8007682:	4659      	mov	r1, fp
 8007684:	f7f8 ffb8 	bl	80005f8 <__aeabi_dmul>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4640      	mov	r0, r8
 800768e:	4649      	mov	r1, r9
 8007690:	f7f8 fdfc 	bl	800028c <__adddf3>
 8007694:	4632      	mov	r2, r6
 8007696:	463b      	mov	r3, r7
 8007698:	4680      	mov	r8, r0
 800769a:	4689      	mov	r9, r1
 800769c:	4620      	mov	r0, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	f7f8 ffaa 	bl	80005f8 <__aeabi_dmul>
 80076a4:	460b      	mov	r3, r1
 80076a6:	4604      	mov	r4, r0
 80076a8:	460d      	mov	r5, r1
 80076aa:	4602      	mov	r2, r0
 80076ac:	4649      	mov	r1, r9
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7f8 fdec 	bl	800028c <__adddf3>
 80076b4:	4b19      	ldr	r3, [pc, #100]	; (800771c <__ieee754_pow+0x3fc>)
 80076b6:	4299      	cmp	r1, r3
 80076b8:	ec45 4b19 	vmov	d9, r4, r5
 80076bc:	4606      	mov	r6, r0
 80076be:	460f      	mov	r7, r1
 80076c0:	468b      	mov	fp, r1
 80076c2:	f340 82f0 	ble.w	8007ca6 <__ieee754_pow+0x986>
 80076c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80076ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80076ce:	4303      	orrs	r3, r0
 80076d0:	f000 81e4 	beq.w	8007a9c <__ieee754_pow+0x77c>
 80076d4:	ec51 0b18 	vmov	r0, r1, d8
 80076d8:	2200      	movs	r2, #0
 80076da:	2300      	movs	r3, #0
 80076dc:	f7f9 f9fe 	bl	8000adc <__aeabi_dcmplt>
 80076e0:	3800      	subs	r0, #0
 80076e2:	bf18      	it	ne
 80076e4:	2001      	movne	r0, #1
 80076e6:	e72b      	b.n	8007540 <__ieee754_pow+0x220>
 80076e8:	60000000 	.word	0x60000000
 80076ec:	3ff71547 	.word	0x3ff71547
 80076f0:	f85ddf44 	.word	0xf85ddf44
 80076f4:	3e54ae0b 	.word	0x3e54ae0b
 80076f8:	55555555 	.word	0x55555555
 80076fc:	3fd55555 	.word	0x3fd55555
 8007700:	652b82fe 	.word	0x652b82fe
 8007704:	3ff71547 	.word	0x3ff71547
 8007708:	00000000 	.word	0x00000000
 800770c:	bff00000 	.word	0xbff00000
 8007710:	3ff00000 	.word	0x3ff00000
 8007714:	3fd00000 	.word	0x3fd00000
 8007718:	3fe00000 	.word	0x3fe00000
 800771c:	408fffff 	.word	0x408fffff
 8007720:	4bd5      	ldr	r3, [pc, #852]	; (8007a78 <__ieee754_pow+0x758>)
 8007722:	402b      	ands	r3, r5
 8007724:	2200      	movs	r2, #0
 8007726:	b92b      	cbnz	r3, 8007734 <__ieee754_pow+0x414>
 8007728:	4bd4      	ldr	r3, [pc, #848]	; (8007a7c <__ieee754_pow+0x75c>)
 800772a:	f7f8 ff65 	bl	80005f8 <__aeabi_dmul>
 800772e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007732:	460c      	mov	r4, r1
 8007734:	1523      	asrs	r3, r4, #20
 8007736:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800773a:	4413      	add	r3, r2
 800773c:	9305      	str	r3, [sp, #20]
 800773e:	4bd0      	ldr	r3, [pc, #832]	; (8007a80 <__ieee754_pow+0x760>)
 8007740:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007744:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007748:	429c      	cmp	r4, r3
 800774a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800774e:	dd08      	ble.n	8007762 <__ieee754_pow+0x442>
 8007750:	4bcc      	ldr	r3, [pc, #816]	; (8007a84 <__ieee754_pow+0x764>)
 8007752:	429c      	cmp	r4, r3
 8007754:	f340 8162 	ble.w	8007a1c <__ieee754_pow+0x6fc>
 8007758:	9b05      	ldr	r3, [sp, #20]
 800775a:	3301      	adds	r3, #1
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007762:	2400      	movs	r4, #0
 8007764:	00e3      	lsls	r3, r4, #3
 8007766:	9307      	str	r3, [sp, #28]
 8007768:	4bc7      	ldr	r3, [pc, #796]	; (8007a88 <__ieee754_pow+0x768>)
 800776a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800776e:	ed93 7b00 	vldr	d7, [r3]
 8007772:	4629      	mov	r1, r5
 8007774:	ec53 2b17 	vmov	r2, r3, d7
 8007778:	eeb0 9a47 	vmov.f32	s18, s14
 800777c:	eef0 9a67 	vmov.f32	s19, s15
 8007780:	4682      	mov	sl, r0
 8007782:	f7f8 fd81 	bl	8000288 <__aeabi_dsub>
 8007786:	4652      	mov	r2, sl
 8007788:	4606      	mov	r6, r0
 800778a:	460f      	mov	r7, r1
 800778c:	462b      	mov	r3, r5
 800778e:	ec51 0b19 	vmov	r0, r1, d9
 8007792:	f7f8 fd7b 	bl	800028c <__adddf3>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	2000      	movs	r0, #0
 800779c:	49bb      	ldr	r1, [pc, #748]	; (8007a8c <__ieee754_pow+0x76c>)
 800779e:	f7f9 f855 	bl	800084c <__aeabi_ddiv>
 80077a2:	ec41 0b1a 	vmov	d10, r0, r1
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f8 ff23 	bl	80005f8 <__aeabi_dmul>
 80077b2:	2300      	movs	r3, #0
 80077b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b8:	9302      	str	r3, [sp, #8]
 80077ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80077be:	46ab      	mov	fp, r5
 80077c0:	106d      	asrs	r5, r5, #1
 80077c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80077c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80077ca:	ec41 0b18 	vmov	d8, r0, r1
 80077ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80077d2:	2200      	movs	r2, #0
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	4614      	mov	r4, r2
 80077da:	461d      	mov	r5, r3
 80077dc:	f7f8 ff0c 	bl	80005f8 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f8 fd4e 	bl	8000288 <__aeabi_dsub>
 80077ec:	ec53 2b19 	vmov	r2, r3, d9
 80077f0:	4606      	mov	r6, r0
 80077f2:	460f      	mov	r7, r1
 80077f4:	4620      	mov	r0, r4
 80077f6:	4629      	mov	r1, r5
 80077f8:	f7f8 fd46 	bl	8000288 <__aeabi_dsub>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4650      	mov	r0, sl
 8007802:	4659      	mov	r1, fp
 8007804:	f7f8 fd40 	bl	8000288 <__aeabi_dsub>
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	f7f8 fef4 	bl	80005f8 <__aeabi_dmul>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	f7f8 fd36 	bl	8000288 <__aeabi_dsub>
 800781c:	ec53 2b1a 	vmov	r2, r3, d10
 8007820:	f7f8 feea 	bl	80005f8 <__aeabi_dmul>
 8007824:	ec53 2b18 	vmov	r2, r3, d8
 8007828:	ec41 0b19 	vmov	d9, r0, r1
 800782c:	ec51 0b18 	vmov	r0, r1, d8
 8007830:	f7f8 fee2 	bl	80005f8 <__aeabi_dmul>
 8007834:	a37c      	add	r3, pc, #496	; (adr r3, 8007a28 <__ieee754_pow+0x708>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	4604      	mov	r4, r0
 800783c:	460d      	mov	r5, r1
 800783e:	f7f8 fedb 	bl	80005f8 <__aeabi_dmul>
 8007842:	a37b      	add	r3, pc, #492	; (adr r3, 8007a30 <__ieee754_pow+0x710>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f7f8 fd20 	bl	800028c <__adddf3>
 800784c:	4622      	mov	r2, r4
 800784e:	462b      	mov	r3, r5
 8007850:	f7f8 fed2 	bl	80005f8 <__aeabi_dmul>
 8007854:	a378      	add	r3, pc, #480	; (adr r3, 8007a38 <__ieee754_pow+0x718>)
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	f7f8 fd17 	bl	800028c <__adddf3>
 800785e:	4622      	mov	r2, r4
 8007860:	462b      	mov	r3, r5
 8007862:	f7f8 fec9 	bl	80005f8 <__aeabi_dmul>
 8007866:	a376      	add	r3, pc, #472	; (adr r3, 8007a40 <__ieee754_pow+0x720>)
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f7f8 fd0e 	bl	800028c <__adddf3>
 8007870:	4622      	mov	r2, r4
 8007872:	462b      	mov	r3, r5
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	a373      	add	r3, pc, #460	; (adr r3, 8007a48 <__ieee754_pow+0x728>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f8 fd05 	bl	800028c <__adddf3>
 8007882:	4622      	mov	r2, r4
 8007884:	462b      	mov	r3, r5
 8007886:	f7f8 feb7 	bl	80005f8 <__aeabi_dmul>
 800788a:	a371      	add	r3, pc, #452	; (adr r3, 8007a50 <__ieee754_pow+0x730>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 fcfc 	bl	800028c <__adddf3>
 8007894:	4622      	mov	r2, r4
 8007896:	4606      	mov	r6, r0
 8007898:	460f      	mov	r7, r1
 800789a:	462b      	mov	r3, r5
 800789c:	4620      	mov	r0, r4
 800789e:	4629      	mov	r1, r5
 80078a0:	f7f8 feaa 	bl	80005f8 <__aeabi_dmul>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f8 fea4 	bl	80005f8 <__aeabi_dmul>
 80078b0:	4642      	mov	r2, r8
 80078b2:	4604      	mov	r4, r0
 80078b4:	460d      	mov	r5, r1
 80078b6:	464b      	mov	r3, r9
 80078b8:	ec51 0b18 	vmov	r0, r1, d8
 80078bc:	f7f8 fce6 	bl	800028c <__adddf3>
 80078c0:	ec53 2b19 	vmov	r2, r3, d9
 80078c4:	f7f8 fe98 	bl	80005f8 <__aeabi_dmul>
 80078c8:	4622      	mov	r2, r4
 80078ca:	462b      	mov	r3, r5
 80078cc:	f7f8 fcde 	bl	800028c <__adddf3>
 80078d0:	4642      	mov	r2, r8
 80078d2:	4682      	mov	sl, r0
 80078d4:	468b      	mov	fp, r1
 80078d6:	464b      	mov	r3, r9
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f8 fe8c 	bl	80005f8 <__aeabi_dmul>
 80078e0:	4b6b      	ldr	r3, [pc, #428]	; (8007a90 <__ieee754_pow+0x770>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	4606      	mov	r6, r0
 80078e6:	460f      	mov	r7, r1
 80078e8:	f7f8 fcd0 	bl	800028c <__adddf3>
 80078ec:	4652      	mov	r2, sl
 80078ee:	465b      	mov	r3, fp
 80078f0:	f7f8 fccc 	bl	800028c <__adddf3>
 80078f4:	2000      	movs	r0, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	460d      	mov	r5, r1
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	f7f8 fe79 	bl	80005f8 <__aeabi_dmul>
 8007906:	4b62      	ldr	r3, [pc, #392]	; (8007a90 <__ieee754_pow+0x770>)
 8007908:	4680      	mov	r8, r0
 800790a:	4689      	mov	r9, r1
 800790c:	2200      	movs	r2, #0
 800790e:	4620      	mov	r0, r4
 8007910:	4629      	mov	r1, r5
 8007912:	f7f8 fcb9 	bl	8000288 <__aeabi_dsub>
 8007916:	4632      	mov	r2, r6
 8007918:	463b      	mov	r3, r7
 800791a:	f7f8 fcb5 	bl	8000288 <__aeabi_dsub>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4650      	mov	r0, sl
 8007924:	4659      	mov	r1, fp
 8007926:	f7f8 fcaf 	bl	8000288 <__aeabi_dsub>
 800792a:	ec53 2b18 	vmov	r2, r3, d8
 800792e:	f7f8 fe63 	bl	80005f8 <__aeabi_dmul>
 8007932:	4622      	mov	r2, r4
 8007934:	4606      	mov	r6, r0
 8007936:	460f      	mov	r7, r1
 8007938:	462b      	mov	r3, r5
 800793a:	ec51 0b19 	vmov	r0, r1, d9
 800793e:	f7f8 fe5b 	bl	80005f8 <__aeabi_dmul>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f8 fc9f 	bl	800028c <__adddf3>
 800794e:	4606      	mov	r6, r0
 8007950:	460f      	mov	r7, r1
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4640      	mov	r0, r8
 8007958:	4649      	mov	r1, r9
 800795a:	f7f8 fc97 	bl	800028c <__adddf3>
 800795e:	a33e      	add	r3, pc, #248	; (adr r3, 8007a58 <__ieee754_pow+0x738>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	2000      	movs	r0, #0
 8007966:	4604      	mov	r4, r0
 8007968:	460d      	mov	r5, r1
 800796a:	f7f8 fe45 	bl	80005f8 <__aeabi_dmul>
 800796e:	4642      	mov	r2, r8
 8007970:	ec41 0b18 	vmov	d8, r0, r1
 8007974:	464b      	mov	r3, r9
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f8 fc85 	bl	8000288 <__aeabi_dsub>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 fc7f 	bl	8000288 <__aeabi_dsub>
 800798a:	a335      	add	r3, pc, #212	; (adr r3, 8007a60 <__ieee754_pow+0x740>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fe32 	bl	80005f8 <__aeabi_dmul>
 8007994:	a334      	add	r3, pc, #208	; (adr r3, 8007a68 <__ieee754_pow+0x748>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	4606      	mov	r6, r0
 800799c:	460f      	mov	r7, r1
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f8 fe29 	bl	80005f8 <__aeabi_dmul>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f8 fc6d 	bl	800028c <__adddf3>
 80079b2:	9a07      	ldr	r2, [sp, #28]
 80079b4:	4b37      	ldr	r3, [pc, #220]	; (8007a94 <__ieee754_pow+0x774>)
 80079b6:	4413      	add	r3, r2
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f7f8 fc66 	bl	800028c <__adddf3>
 80079c0:	4682      	mov	sl, r0
 80079c2:	9805      	ldr	r0, [sp, #20]
 80079c4:	468b      	mov	fp, r1
 80079c6:	f7f8 fdad 	bl	8000524 <__aeabi_i2d>
 80079ca:	9a07      	ldr	r2, [sp, #28]
 80079cc:	4b32      	ldr	r3, [pc, #200]	; (8007a98 <__ieee754_pow+0x778>)
 80079ce:	4413      	add	r3, r2
 80079d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079d4:	4606      	mov	r6, r0
 80079d6:	460f      	mov	r7, r1
 80079d8:	4652      	mov	r2, sl
 80079da:	465b      	mov	r3, fp
 80079dc:	ec51 0b18 	vmov	r0, r1, d8
 80079e0:	f7f8 fc54 	bl	800028c <__adddf3>
 80079e4:	4642      	mov	r2, r8
 80079e6:	464b      	mov	r3, r9
 80079e8:	f7f8 fc50 	bl	800028c <__adddf3>
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	f7f8 fc4c 	bl	800028c <__adddf3>
 80079f4:	2000      	movs	r0, #0
 80079f6:	4632      	mov	r2, r6
 80079f8:	463b      	mov	r3, r7
 80079fa:	4604      	mov	r4, r0
 80079fc:	460d      	mov	r5, r1
 80079fe:	f7f8 fc43 	bl	8000288 <__aeabi_dsub>
 8007a02:	4642      	mov	r2, r8
 8007a04:	464b      	mov	r3, r9
 8007a06:	f7f8 fc3f 	bl	8000288 <__aeabi_dsub>
 8007a0a:	ec53 2b18 	vmov	r2, r3, d8
 8007a0e:	f7f8 fc3b 	bl	8000288 <__aeabi_dsub>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4650      	mov	r0, sl
 8007a18:	4659      	mov	r1, fp
 8007a1a:	e610      	b.n	800763e <__ieee754_pow+0x31e>
 8007a1c:	2401      	movs	r4, #1
 8007a1e:	e6a1      	b.n	8007764 <__ieee754_pow+0x444>
 8007a20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007a70 <__ieee754_pow+0x750>
 8007a24:	e617      	b.n	8007656 <__ieee754_pow+0x336>
 8007a26:	bf00      	nop
 8007a28:	4a454eef 	.word	0x4a454eef
 8007a2c:	3fca7e28 	.word	0x3fca7e28
 8007a30:	93c9db65 	.word	0x93c9db65
 8007a34:	3fcd864a 	.word	0x3fcd864a
 8007a38:	a91d4101 	.word	0xa91d4101
 8007a3c:	3fd17460 	.word	0x3fd17460
 8007a40:	518f264d 	.word	0x518f264d
 8007a44:	3fd55555 	.word	0x3fd55555
 8007a48:	db6fabff 	.word	0xdb6fabff
 8007a4c:	3fdb6db6 	.word	0x3fdb6db6
 8007a50:	33333303 	.word	0x33333303
 8007a54:	3fe33333 	.word	0x3fe33333
 8007a58:	e0000000 	.word	0xe0000000
 8007a5c:	3feec709 	.word	0x3feec709
 8007a60:	dc3a03fd 	.word	0xdc3a03fd
 8007a64:	3feec709 	.word	0x3feec709
 8007a68:	145b01f5 	.word	0x145b01f5
 8007a6c:	be3e2fe0 	.word	0xbe3e2fe0
 8007a70:	00000000 	.word	0x00000000
 8007a74:	3ff00000 	.word	0x3ff00000
 8007a78:	7ff00000 	.word	0x7ff00000
 8007a7c:	43400000 	.word	0x43400000
 8007a80:	0003988e 	.word	0x0003988e
 8007a84:	000bb679 	.word	0x000bb679
 8007a88:	080081f8 	.word	0x080081f8
 8007a8c:	3ff00000 	.word	0x3ff00000
 8007a90:	40080000 	.word	0x40080000
 8007a94:	08008218 	.word	0x08008218
 8007a98:	08008208 	.word	0x08008208
 8007a9c:	a3b3      	add	r3, pc, #716	; (adr r3, 8007d6c <__ieee754_pow+0xa4c>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	f7f8 fbf1 	bl	800028c <__adddf3>
 8007aaa:	4622      	mov	r2, r4
 8007aac:	ec41 0b1a 	vmov	d10, r0, r1
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	f7f8 fbe7 	bl	8000288 <__aeabi_dsub>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	ec51 0b1a 	vmov	r0, r1, d10
 8007ac2:	f7f9 f829 	bl	8000b18 <__aeabi_dcmpgt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f47f ae04 	bne.w	80076d4 <__ieee754_pow+0x3b4>
 8007acc:	4aa2      	ldr	r2, [pc, #648]	; (8007d58 <__ieee754_pow+0xa38>)
 8007ace:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	f340 8107 	ble.w	8007ce6 <__ieee754_pow+0x9c6>
 8007ad8:	151b      	asrs	r3, r3, #20
 8007ada:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007ade:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007ae2:	fa4a fa03 	asr.w	sl, sl, r3
 8007ae6:	44da      	add	sl, fp
 8007ae8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007aec:	489b      	ldr	r0, [pc, #620]	; (8007d5c <__ieee754_pow+0xa3c>)
 8007aee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007af2:	4108      	asrs	r0, r1
 8007af4:	ea00 030a 	and.w	r3, r0, sl
 8007af8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007afc:	f1c1 0114 	rsb	r1, r1, #20
 8007b00:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007b04:	fa4a fa01 	asr.w	sl, sl, r1
 8007b08:	f1bb 0f00 	cmp.w	fp, #0
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	4620      	mov	r0, r4
 8007b12:	4629      	mov	r1, r5
 8007b14:	bfb8      	it	lt
 8007b16:	f1ca 0a00 	rsblt	sl, sl, #0
 8007b1a:	f7f8 fbb5 	bl	8000288 <__aeabi_dsub>
 8007b1e:	ec41 0b19 	vmov	d9, r0, r1
 8007b22:	4642      	mov	r2, r8
 8007b24:	464b      	mov	r3, r9
 8007b26:	ec51 0b19 	vmov	r0, r1, d9
 8007b2a:	f7f8 fbaf 	bl	800028c <__adddf3>
 8007b2e:	a37a      	add	r3, pc, #488	; (adr r3, 8007d18 <__ieee754_pow+0x9f8>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	2000      	movs	r0, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	460d      	mov	r5, r1
 8007b3a:	f7f8 fd5d 	bl	80005f8 <__aeabi_dmul>
 8007b3e:	ec53 2b19 	vmov	r2, r3, d9
 8007b42:	4606      	mov	r6, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 fb9d 	bl	8000288 <__aeabi_dsub>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 fb97 	bl	8000288 <__aeabi_dsub>
 8007b5a:	a371      	add	r3, pc, #452	; (adr r3, 8007d20 <__ieee754_pow+0xa00>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fd4a 	bl	80005f8 <__aeabi_dmul>
 8007b64:	a370      	add	r3, pc, #448	; (adr r3, 8007d28 <__ieee754_pow+0xa08>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	4689      	mov	r9, r1
 8007b6e:	4620      	mov	r0, r4
 8007b70:	4629      	mov	r1, r5
 8007b72:	f7f8 fd41 	bl	80005f8 <__aeabi_dmul>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	f7f8 fb85 	bl	800028c <__adddf3>
 8007b82:	4604      	mov	r4, r0
 8007b84:	460d      	mov	r5, r1
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	f7f8 fb7d 	bl	800028c <__adddf3>
 8007b92:	4632      	mov	r2, r6
 8007b94:	463b      	mov	r3, r7
 8007b96:	4680      	mov	r8, r0
 8007b98:	4689      	mov	r9, r1
 8007b9a:	f7f8 fb75 	bl	8000288 <__aeabi_dsub>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7f8 fb6f 	bl	8000288 <__aeabi_dsub>
 8007baa:	4642      	mov	r2, r8
 8007bac:	4606      	mov	r6, r0
 8007bae:	460f      	mov	r7, r1
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	f7f8 fd1f 	bl	80005f8 <__aeabi_dmul>
 8007bba:	a35d      	add	r3, pc, #372	; (adr r3, 8007d30 <__ieee754_pow+0xa10>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	f7f8 fd18 	bl	80005f8 <__aeabi_dmul>
 8007bc8:	a35b      	add	r3, pc, #364	; (adr r3, 8007d38 <__ieee754_pow+0xa18>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fb5b 	bl	8000288 <__aeabi_dsub>
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	f7f8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8007bda:	a359      	add	r3, pc, #356	; (adr r3, 8007d40 <__ieee754_pow+0xa20>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fb54 	bl	800028c <__adddf3>
 8007be4:	4622      	mov	r2, r4
 8007be6:	462b      	mov	r3, r5
 8007be8:	f7f8 fd06 	bl	80005f8 <__aeabi_dmul>
 8007bec:	a356      	add	r3, pc, #344	; (adr r3, 8007d48 <__ieee754_pow+0xa28>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fb49 	bl	8000288 <__aeabi_dsub>
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	f7f8 fcfd 	bl	80005f8 <__aeabi_dmul>
 8007bfe:	a354      	add	r3, pc, #336	; (adr r3, 8007d50 <__ieee754_pow+0xa30>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fb42 	bl	800028c <__adddf3>
 8007c08:	4622      	mov	r2, r4
 8007c0a:	462b      	mov	r3, r5
 8007c0c:	f7f8 fcf4 	bl	80005f8 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4640      	mov	r0, r8
 8007c16:	4649      	mov	r1, r9
 8007c18:	f7f8 fb36 	bl	8000288 <__aeabi_dsub>
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	460d      	mov	r5, r1
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4640      	mov	r0, r8
 8007c26:	4649      	mov	r1, r9
 8007c28:	f7f8 fce6 	bl	80005f8 <__aeabi_dmul>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	ec41 0b19 	vmov	d9, r0, r1
 8007c32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c36:	4620      	mov	r0, r4
 8007c38:	4629      	mov	r1, r5
 8007c3a:	f7f8 fb25 	bl	8000288 <__aeabi_dsub>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	ec51 0b19 	vmov	r0, r1, d9
 8007c46:	f7f8 fe01 	bl	800084c <__aeabi_ddiv>
 8007c4a:	4632      	mov	r2, r6
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	460d      	mov	r5, r1
 8007c50:	463b      	mov	r3, r7
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	f7f8 fccf 	bl	80005f8 <__aeabi_dmul>
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	f7f8 fb15 	bl	800028c <__adddf3>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7f8 fb0d 	bl	8000288 <__aeabi_dsub>
 8007c6e:	4642      	mov	r2, r8
 8007c70:	464b      	mov	r3, r9
 8007c72:	f7f8 fb09 	bl	8000288 <__aeabi_dsub>
 8007c76:	460b      	mov	r3, r1
 8007c78:	4602      	mov	r2, r0
 8007c7a:	4939      	ldr	r1, [pc, #228]	; (8007d60 <__ieee754_pow+0xa40>)
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	f7f8 fb03 	bl	8000288 <__aeabi_dsub>
 8007c82:	ec41 0b10 	vmov	d0, r0, r1
 8007c86:	ee10 3a90 	vmov	r3, s1
 8007c8a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c92:	da2b      	bge.n	8007cec <__ieee754_pow+0x9cc>
 8007c94:	4650      	mov	r0, sl
 8007c96:	f000 f877 	bl	8007d88 <scalbn>
 8007c9a:	ec51 0b10 	vmov	r0, r1, d0
 8007c9e:	ec53 2b18 	vmov	r2, r3, d8
 8007ca2:	f7ff bbee 	b.w	8007482 <__ieee754_pow+0x162>
 8007ca6:	4b2f      	ldr	r3, [pc, #188]	; (8007d64 <__ieee754_pow+0xa44>)
 8007ca8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007cac:	429e      	cmp	r6, r3
 8007cae:	f77f af0d 	ble.w	8007acc <__ieee754_pow+0x7ac>
 8007cb2:	4b2d      	ldr	r3, [pc, #180]	; (8007d68 <__ieee754_pow+0xa48>)
 8007cb4:	440b      	add	r3, r1
 8007cb6:	4303      	orrs	r3, r0
 8007cb8:	d009      	beq.n	8007cce <__ieee754_pow+0x9ae>
 8007cba:	ec51 0b18 	vmov	r0, r1, d8
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f7f8 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8007cc6:	3800      	subs	r0, #0
 8007cc8:	bf18      	it	ne
 8007cca:	2001      	movne	r0, #1
 8007ccc:	e448      	b.n	8007560 <__ieee754_pow+0x240>
 8007cce:	4622      	mov	r2, r4
 8007cd0:	462b      	mov	r3, r5
 8007cd2:	f7f8 fad9 	bl	8000288 <__aeabi_dsub>
 8007cd6:	4642      	mov	r2, r8
 8007cd8:	464b      	mov	r3, r9
 8007cda:	f7f8 ff13 	bl	8000b04 <__aeabi_dcmpge>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f43f aef4 	beq.w	8007acc <__ieee754_pow+0x7ac>
 8007ce4:	e7e9      	b.n	8007cba <__ieee754_pow+0x99a>
 8007ce6:	f04f 0a00 	mov.w	sl, #0
 8007cea:	e71a      	b.n	8007b22 <__ieee754_pow+0x802>
 8007cec:	ec51 0b10 	vmov	r0, r1, d0
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	e7d4      	b.n	8007c9e <__ieee754_pow+0x97e>
 8007cf4:	491a      	ldr	r1, [pc, #104]	; (8007d60 <__ieee754_pow+0xa40>)
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f7ff bb31 	b.w	800735e <__ieee754_pow+0x3e>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	2100      	movs	r1, #0
 8007d00:	f7ff bb2d 	b.w	800735e <__ieee754_pow+0x3e>
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	f7ff bb29 	b.w	800735e <__ieee754_pow+0x3e>
 8007d0c:	9204      	str	r2, [sp, #16]
 8007d0e:	f7ff bb7b 	b.w	8007408 <__ieee754_pow+0xe8>
 8007d12:	2300      	movs	r3, #0
 8007d14:	f7ff bb65 	b.w	80073e2 <__ieee754_pow+0xc2>
 8007d18:	00000000 	.word	0x00000000
 8007d1c:	3fe62e43 	.word	0x3fe62e43
 8007d20:	fefa39ef 	.word	0xfefa39ef
 8007d24:	3fe62e42 	.word	0x3fe62e42
 8007d28:	0ca86c39 	.word	0x0ca86c39
 8007d2c:	be205c61 	.word	0xbe205c61
 8007d30:	72bea4d0 	.word	0x72bea4d0
 8007d34:	3e663769 	.word	0x3e663769
 8007d38:	c5d26bf1 	.word	0xc5d26bf1
 8007d3c:	3ebbbd41 	.word	0x3ebbbd41
 8007d40:	af25de2c 	.word	0xaf25de2c
 8007d44:	3f11566a 	.word	0x3f11566a
 8007d48:	16bebd93 	.word	0x16bebd93
 8007d4c:	3f66c16c 	.word	0x3f66c16c
 8007d50:	5555553e 	.word	0x5555553e
 8007d54:	3fc55555 	.word	0x3fc55555
 8007d58:	3fe00000 	.word	0x3fe00000
 8007d5c:	fff00000 	.word	0xfff00000
 8007d60:	3ff00000 	.word	0x3ff00000
 8007d64:	4090cbff 	.word	0x4090cbff
 8007d68:	3f6f3400 	.word	0x3f6f3400
 8007d6c:	652b82fe 	.word	0x652b82fe
 8007d70:	3c971547 	.word	0x3c971547

08007d74 <fabs>:
 8007d74:	ec51 0b10 	vmov	r0, r1, d0
 8007d78:	ee10 2a10 	vmov	r2, s0
 8007d7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d80:	ec43 2b10 	vmov	d0, r2, r3
 8007d84:	4770      	bx	lr
	...

08007d88 <scalbn>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	ec55 4b10 	vmov	r4, r5, d0
 8007d8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007d92:	4606      	mov	r6, r0
 8007d94:	462b      	mov	r3, r5
 8007d96:	b999      	cbnz	r1, 8007dc0 <scalbn+0x38>
 8007d98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d9c:	4323      	orrs	r3, r4
 8007d9e:	d03f      	beq.n	8007e20 <scalbn+0x98>
 8007da0:	4b35      	ldr	r3, [pc, #212]	; (8007e78 <scalbn+0xf0>)
 8007da2:	4629      	mov	r1, r5
 8007da4:	ee10 0a10 	vmov	r0, s0
 8007da8:	2200      	movs	r2, #0
 8007daa:	f7f8 fc25 	bl	80005f8 <__aeabi_dmul>
 8007dae:	4b33      	ldr	r3, [pc, #204]	; (8007e7c <scalbn+0xf4>)
 8007db0:	429e      	cmp	r6, r3
 8007db2:	4604      	mov	r4, r0
 8007db4:	460d      	mov	r5, r1
 8007db6:	da10      	bge.n	8007dda <scalbn+0x52>
 8007db8:	a327      	add	r3, pc, #156	; (adr r3, 8007e58 <scalbn+0xd0>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	e01f      	b.n	8007e00 <scalbn+0x78>
 8007dc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007dc4:	4291      	cmp	r1, r2
 8007dc6:	d10c      	bne.n	8007de2 <scalbn+0x5a>
 8007dc8:	ee10 2a10 	vmov	r2, s0
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7f8 fa5c 	bl	800028c <__adddf3>
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	e022      	b.n	8007e20 <scalbn+0x98>
 8007dda:	460b      	mov	r3, r1
 8007ddc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007de0:	3936      	subs	r1, #54	; 0x36
 8007de2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007de6:	4296      	cmp	r6, r2
 8007de8:	dd0d      	ble.n	8007e06 <scalbn+0x7e>
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	a11c      	add	r1, pc, #112	; (adr r1, 8007e60 <scalbn+0xd8>)
 8007dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df2:	da02      	bge.n	8007dfa <scalbn+0x72>
 8007df4:	a11c      	add	r1, pc, #112	; (adr r1, 8007e68 <scalbn+0xe0>)
 8007df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dfa:	a319      	add	r3, pc, #100	; (adr r3, 8007e60 <scalbn+0xd8>)
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f7f8 fbfa 	bl	80005f8 <__aeabi_dmul>
 8007e04:	e7e6      	b.n	8007dd4 <scalbn+0x4c>
 8007e06:	1872      	adds	r2, r6, r1
 8007e08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e0c:	428a      	cmp	r2, r1
 8007e0e:	dcec      	bgt.n	8007dea <scalbn+0x62>
 8007e10:	2a00      	cmp	r2, #0
 8007e12:	dd08      	ble.n	8007e26 <scalbn+0x9e>
 8007e14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e20:	ec45 4b10 	vmov	d0, r4, r5
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
 8007e26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e2a:	da08      	bge.n	8007e3e <scalbn+0xb6>
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	a10a      	add	r1, pc, #40	; (adr r1, 8007e58 <scalbn+0xd0>)
 8007e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e34:	dac0      	bge.n	8007db8 <scalbn+0x30>
 8007e36:	a10e      	add	r1, pc, #56	; (adr r1, 8007e70 <scalbn+0xe8>)
 8007e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e3c:	e7bc      	b.n	8007db8 <scalbn+0x30>
 8007e3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e42:	3236      	adds	r2, #54	; 0x36
 8007e44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <scalbn+0xf8>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	e7d5      	b.n	8007e00 <scalbn+0x78>
 8007e54:	f3af 8000 	nop.w
 8007e58:	c2f8f359 	.word	0xc2f8f359
 8007e5c:	01a56e1f 	.word	0x01a56e1f
 8007e60:	8800759c 	.word	0x8800759c
 8007e64:	7e37e43c 	.word	0x7e37e43c
 8007e68:	8800759c 	.word	0x8800759c
 8007e6c:	fe37e43c 	.word	0xfe37e43c
 8007e70:	c2f8f359 	.word	0xc2f8f359
 8007e74:	81a56e1f 	.word	0x81a56e1f
 8007e78:	43500000 	.word	0x43500000
 8007e7c:	ffff3cb0 	.word	0xffff3cb0
 8007e80:	3c900000 	.word	0x3c900000

08007e84 <with_errno>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4604      	mov	r4, r0
 8007e88:	460d      	mov	r5, r1
 8007e8a:	4616      	mov	r6, r2
 8007e8c:	f7fe fd4e 	bl	800692c <__errno>
 8007e90:	4629      	mov	r1, r5
 8007e92:	6006      	str	r6, [r0, #0]
 8007e94:	4620      	mov	r0, r4
 8007e96:	bd70      	pop	{r4, r5, r6, pc}

08007e98 <xflow>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	4614      	mov	r4, r2
 8007e9c:	461d      	mov	r5, r3
 8007e9e:	b108      	cbz	r0, 8007ea4 <xflow+0xc>
 8007ea0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ea4:	e9cd 2300 	strd	r2, r3, [sp]
 8007ea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	2222      	movs	r2, #34	; 0x22
 8007eb6:	b003      	add	sp, #12
 8007eb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ebc:	f7ff bfe2 	b.w	8007e84 <with_errno>

08007ec0 <__math_uflow>:
 8007ec0:	b508      	push	{r3, lr}
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ec8:	f7ff ffe6 	bl	8007e98 <xflow>
 8007ecc:	ec41 0b10 	vmov	d0, r0, r1
 8007ed0:	bd08      	pop	{r3, pc}

08007ed2 <__math_oflow>:
 8007ed2:	b508      	push	{r3, lr}
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007eda:	f7ff ffdd 	bl	8007e98 <xflow>
 8007ede:	ec41 0b10 	vmov	d0, r0, r1
 8007ee2:	bd08      	pop	{r3, pc}

08007ee4 <__ieee754_sqrt>:
 8007ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee8:	ec55 4b10 	vmov	r4, r5, d0
 8007eec:	4e67      	ldr	r6, [pc, #412]	; (800808c <__ieee754_sqrt+0x1a8>)
 8007eee:	43ae      	bics	r6, r5
 8007ef0:	ee10 0a10 	vmov	r0, s0
 8007ef4:	ee10 2a10 	vmov	r2, s0
 8007ef8:	4629      	mov	r1, r5
 8007efa:	462b      	mov	r3, r5
 8007efc:	d10d      	bne.n	8007f1a <__ieee754_sqrt+0x36>
 8007efe:	f7f8 fb7b 	bl	80005f8 <__aeabi_dmul>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4620      	mov	r0, r4
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f7f8 f9bf 	bl	800028c <__adddf3>
 8007f0e:	4604      	mov	r4, r0
 8007f10:	460d      	mov	r5, r1
 8007f12:	ec45 4b10 	vmov	d0, r4, r5
 8007f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	dc0b      	bgt.n	8007f36 <__ieee754_sqrt+0x52>
 8007f1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f22:	4326      	orrs	r6, r4
 8007f24:	d0f5      	beq.n	8007f12 <__ieee754_sqrt+0x2e>
 8007f26:	b135      	cbz	r5, 8007f36 <__ieee754_sqrt+0x52>
 8007f28:	f7f8 f9ae 	bl	8000288 <__aeabi_dsub>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	f7f8 fc8c 	bl	800084c <__aeabi_ddiv>
 8007f34:	e7eb      	b.n	8007f0e <__ieee754_sqrt+0x2a>
 8007f36:	1509      	asrs	r1, r1, #20
 8007f38:	f000 808d 	beq.w	8008056 <__ieee754_sqrt+0x172>
 8007f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f40:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f48:	07c9      	lsls	r1, r1, #31
 8007f4a:	bf5c      	itt	pl
 8007f4c:	005b      	lslpl	r3, r3, #1
 8007f4e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007f52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f56:	bf58      	it	pl
 8007f58:	0052      	lslpl	r2, r2, #1
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007f60:	1076      	asrs	r6, r6, #1
 8007f62:	0052      	lsls	r2, r2, #1
 8007f64:	f04f 0e16 	mov.w	lr, #22
 8007f68:	46ac      	mov	ip, r5
 8007f6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f6e:	eb0c 0001 	add.w	r0, ip, r1
 8007f72:	4298      	cmp	r0, r3
 8007f74:	bfde      	ittt	le
 8007f76:	1a1b      	suble	r3, r3, r0
 8007f78:	eb00 0c01 	addle.w	ip, r0, r1
 8007f7c:	186d      	addle	r5, r5, r1
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	f1be 0e01 	subs.w	lr, lr, #1
 8007f84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007f88:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007f8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007f90:	d1ed      	bne.n	8007f6e <__ieee754_sqrt+0x8a>
 8007f92:	4674      	mov	r4, lr
 8007f94:	2720      	movs	r7, #32
 8007f96:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007f9a:	4563      	cmp	r3, ip
 8007f9c:	eb01 000e 	add.w	r0, r1, lr
 8007fa0:	dc02      	bgt.n	8007fa8 <__ieee754_sqrt+0xc4>
 8007fa2:	d113      	bne.n	8007fcc <__ieee754_sqrt+0xe8>
 8007fa4:	4290      	cmp	r0, r2
 8007fa6:	d811      	bhi.n	8007fcc <__ieee754_sqrt+0xe8>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	eb00 0e01 	add.w	lr, r0, r1
 8007fae:	da57      	bge.n	8008060 <__ieee754_sqrt+0x17c>
 8007fb0:	f1be 0f00 	cmp.w	lr, #0
 8007fb4:	db54      	blt.n	8008060 <__ieee754_sqrt+0x17c>
 8007fb6:	f10c 0801 	add.w	r8, ip, #1
 8007fba:	eba3 030c 	sub.w	r3, r3, ip
 8007fbe:	4290      	cmp	r0, r2
 8007fc0:	bf88      	it	hi
 8007fc2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007fc6:	1a12      	subs	r2, r2, r0
 8007fc8:	440c      	add	r4, r1
 8007fca:	46c4      	mov	ip, r8
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	3f01      	subs	r7, #1
 8007fd0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007fd4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007fd8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007fdc:	d1dd      	bne.n	8007f9a <__ieee754_sqrt+0xb6>
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	d01b      	beq.n	800801a <__ieee754_sqrt+0x136>
 8007fe2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008090 <__ieee754_sqrt+0x1ac>
 8007fe6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008094 <__ieee754_sqrt+0x1b0>
 8007fea:	e9da 0100 	ldrd	r0, r1, [sl]
 8007fee:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ff2:	f7f8 f949 	bl	8000288 <__aeabi_dsub>
 8007ff6:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4640      	mov	r0, r8
 8008000:	4649      	mov	r1, r9
 8008002:	f7f8 fd75 	bl	8000af0 <__aeabi_dcmple>
 8008006:	b140      	cbz	r0, 800801a <__ieee754_sqrt+0x136>
 8008008:	f1b4 3fff 	cmp.w	r4, #4294967295
 800800c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008010:	e9db 2300 	ldrd	r2, r3, [fp]
 8008014:	d126      	bne.n	8008064 <__ieee754_sqrt+0x180>
 8008016:	3501      	adds	r5, #1
 8008018:	463c      	mov	r4, r7
 800801a:	106a      	asrs	r2, r5, #1
 800801c:	0863      	lsrs	r3, r4, #1
 800801e:	07e9      	lsls	r1, r5, #31
 8008020:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008024:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008028:	bf48      	it	mi
 800802a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800802e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008032:	461c      	mov	r4, r3
 8008034:	e76d      	b.n	8007f12 <__ieee754_sqrt+0x2e>
 8008036:	0ad3      	lsrs	r3, r2, #11
 8008038:	3815      	subs	r0, #21
 800803a:	0552      	lsls	r2, r2, #21
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0fa      	beq.n	8008036 <__ieee754_sqrt+0x152>
 8008040:	02dc      	lsls	r4, r3, #11
 8008042:	d50a      	bpl.n	800805a <__ieee754_sqrt+0x176>
 8008044:	f1c1 0420 	rsb	r4, r1, #32
 8008048:	fa22 f404 	lsr.w	r4, r2, r4
 800804c:	1e4d      	subs	r5, r1, #1
 800804e:	408a      	lsls	r2, r1
 8008050:	4323      	orrs	r3, r4
 8008052:	1b41      	subs	r1, r0, r5
 8008054:	e772      	b.n	8007f3c <__ieee754_sqrt+0x58>
 8008056:	4608      	mov	r0, r1
 8008058:	e7f0      	b.n	800803c <__ieee754_sqrt+0x158>
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	3101      	adds	r1, #1
 800805e:	e7ef      	b.n	8008040 <__ieee754_sqrt+0x15c>
 8008060:	46e0      	mov	r8, ip
 8008062:	e7aa      	b.n	8007fba <__ieee754_sqrt+0xd6>
 8008064:	f7f8 f912 	bl	800028c <__adddf3>
 8008068:	e9da 8900 	ldrd	r8, r9, [sl]
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4640      	mov	r0, r8
 8008072:	4649      	mov	r1, r9
 8008074:	f7f8 fd32 	bl	8000adc <__aeabi_dcmplt>
 8008078:	b120      	cbz	r0, 8008084 <__ieee754_sqrt+0x1a0>
 800807a:	1ca0      	adds	r0, r4, #2
 800807c:	bf08      	it	eq
 800807e:	3501      	addeq	r5, #1
 8008080:	3402      	adds	r4, #2
 8008082:	e7ca      	b.n	800801a <__ieee754_sqrt+0x136>
 8008084:	3401      	adds	r4, #1
 8008086:	f024 0401 	bic.w	r4, r4, #1
 800808a:	e7c6      	b.n	800801a <__ieee754_sqrt+0x136>
 800808c:	7ff00000 	.word	0x7ff00000
 8008090:	200000d8 	.word	0x200000d8
 8008094:	200000e0 	.word	0x200000e0

08008098 <_init>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	bf00      	nop
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr

080080a4 <_fini>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	bf00      	nop
 80080a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080aa:	bc08      	pop	{r3}
 80080ac:	469e      	mov	lr, r3
 80080ae:	4770      	bx	lr
